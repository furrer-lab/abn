default:
    tags:
        - docker
        - alpine

stages:
    - build
    - test
    - check
    - deploy

r-build:
    # test on latest r-version
    stage: build
    image: rocker/r-ver:latest # https://rocker-project.org/images/versioned/r-ver.html#overview
    script:
        - echo $CI_PROJECT_DIR
        - ls -la $CI_PROJECT_DIR
        - apt-get update
        - apt-get install --yes cmake # used to install nloptr
        - apt-get install --yes libgsl-dev # used by nlopt
        - apt-get install --yes libnlopt-dev # used by lme4
        - apt-get install --yes jags # used by rjags
        - apt-get install --yes qpdf # used by R CMD check
        - apt-get install --yes devscripts # used by R CMD check
        - install2.r testthat devtools BiocManager remotes covr rjags lme4 # see https://rocker-project.org/use/extending.html#helper-commands
        - R -e 'BiocManager::install("Rgraphviz")'
        - R -e "remotes::install_deps(pkgdir='$CI_PROJECT_DIR',dependencies=TRUE)"
        - R -e "devtools::build(pkg = '$CI_PROJECT_DIR', vignettes = FALSE)"
    artifacts:
        paths:
            - "$CI_PROJECT_DIR/*.tar.gz"
        when: always
        name: build
        expire_in: 30 days

r-test:
    # test on latest r-version
    stage: test
    image: rocker/r-ver:latest # https://rocker-project.org/images/versioned/r-ver.html#overview
    script:
        - apt-get update
        - apt-get install --yes cmake # used to install nloptr
        - apt-get install --yes libgsl-dev # used by nlopt
        - apt-get install --yes libnlopt-dev # used by lme4
        - apt-get install --yes jags # used by rjags
        - apt-get install --yes qpdf # used by R CMD check
        - apt-get install --yes devscripts # used by R CMD check
        - install2.r testthat devtools BiocManager remotes covr rjags lme4 # see https://rocker-project.org/use/extending.html#helper-commands
        - R -e 'BiocManager::install("Rgraphviz")'
        - R -e "remotes::install_deps(pkgdir='$CI_PROJECT_DIR',dependencies=TRUE)"
        - R -e "devtools::test(pkg = '$CI_PROJECT_DIR')"

r-check:
    # test on latest r-version
    stage: check
    image: rocker/r-ver:latest # https://rocker-project.org/images/versioned/r-ver.html#overview
    when: on_success
    script:
        - apt-get update
        - apt-get install --yes cmake # used to install nloptr
        - apt-get install --yes libgsl-dev # used by nlopt
        - apt-get install --yes libnlopt-dev # used by lme4
        - apt-get install --yes jags # used by rjags
        - apt-get install --yes qpdf # used by R CMD check
        - apt-get install --yes devscripts # used by R CMD check
        - install2.r testthat devtools BiocManager remotes covr rjags lme4 # see https://rocker-project.org/use/extending.html#helper-commands
        - R -e 'BiocManager::install("Rgraphviz")'
        - R -e "remotes::install_deps(pkgdir='$CI_PROJECT_DIR',dependencies=TRUE)"
        - R -e "devtools::check(pkg = '$CI_PROJECT_DIR', vignettes = FALSE)"
    artifacts:
        paths:
            - "$CI_PROJECT_DIR/*.Rcheck"
        when: always
        name: logRcheck
        expire_in: 30 days

r-coverage:
    stage: deploy
    image: rocker/r-ver:latest
    when: on_success
    only:
        - $CI_DEFAULT_BRANCH
    script:
        - apt-get update
        - apt-get install --yes cmake # used to install nloptr
        - apt-get install --yes libgsl-dev # used by nlopt
        - apt-get install --yes libnlopt-dev # used by lme4
        - apt-get install --yes jags # used by rjags
        - apt-get install --yes qpdf # used by R CMD check
        - apt-get install --yes devscripts # used by R CMD check
        - install2.r testthat devtools BiocManager remotes covr rjags lme4 # see https://rocker-project.org/use/extending.html#helper-commands
        - R -e 'BiocManager::install("Rgraphviz")'
        - R -e "remotes::install_deps(pkgdir='$CI_PROJECT_DIR',dependencies=TRUE)"
        - R -e "devtools::install(pkg = '$CI_PROJECT_DIR')"
        - R -e "covr::codecov(path = '$CI_PROJECT_DIR', quiet = FALSE)"
    coverage: '/Coverage: \d+\.\d+/'

release_job:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG' # Run this job when tags are pushed or merged to the default branch
  script:
    - echo "running release_job for $CI_COMMIT_TAG"
  release:                                         # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'                # The version is incremented per pipeline.
    description: "release automatically created by '$CI_PIPELINE_IID'"
