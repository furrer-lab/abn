[{"path":[]},{"path":"http://r-bayesian-networks.org/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://r-bayesian-networks.org/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://r-bayesian-networks.org/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://r-bayesian-networks.org/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://r-bayesian-networks.org/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement matteo.delucchi@math.uzh.ch. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://r-bayesian-networks.org/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://r-bayesian-networks.org/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://r-bayesian-networks.org/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://r-bayesian-networks.org/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://r-bayesian-networks.org/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://r-bayesian-networks.org/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://r-bayesian-networks.org/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://r-bayesian-networks.org/articles/data_simulation.html","id":"fit-a-model-to-the-original-data","dir":"Articles","previous_headings":"","what":"Fit a model to the original data","title":"Data Simulation","text":"First, fit model original data use simulate new data . use ex1.dag.data data set fit model .","code":"# Load example data mydat <- ex1.dag.data  # Set the distribution of each node mydists <- list(b1=\"binomial\",                 p1=\"poisson\",                 g1=\"gaussian\",                 b2=\"binomial\",                 p2=\"poisson\",                 b3=\"binomial\",                 g2=\"gaussian\",                 b4=\"binomial\",                 b5=\"binomial\",                 g3=\"gaussian\")  # Build the score cache mycache <- buildScoreCache(data.df = mydat,                            data.dists = mydists,                            method = \"bayes\",                            max.parents = 4)  # Structure learning mp.dag <- mostProbable(score.cache = mycache) #> Step1. completed max alpha_i(S) for all i and S #> Total sets g(S) to be evaluated over: 1024  # Estimate the parameters myfit <- fitAbn(object = mp.dag)  # Plot the DAG plot(myfit)"},{"path":"http://r-bayesian-networks.org/articles/data_simulation.html","id":"simulate-new-data","dir":"Articles","previous_headings":"","what":"Simulate new data","title":"Data Simulation","text":"Based abnFit object, can simulate new data. default simulateAbn() synthesizes 1000 new data points. background, simulateAbn() function translates abnFit object BUGS model calls rjags package simulate new data. Especially debugging purposes, can usefull manually inspect BUGS file generated simulateAbn(). can done running simulation run.simulation = FALSE print BUGS file console verbose = TRUE. store BUGS file reproducibility manual inspection, can set bugsfile argument file name save BUGS file disk.","code":"mydat_sim <- simulateAbn(object = myfit) str(mydat_sim) #> 'data.frame':    1000 obs. of  10 variables: #>  $ b1: Factor w/ 2 levels \"0\",\"1\": 2 2 2 2 2 2 2 2 2 2 ... #>  $ b2: Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 2 1 1 2 2 2 ... #>  $ b3: Factor w/ 2 levels \"0\",\"1\": 2 1 2 1 1 1 2 1 2 2 ... #>  $ b4: Factor w/ 2 levels \"0\",\"1\": 2 2 2 2 2 2 2 2 2 2 ... #>  $ b5: Factor w/ 2 levels \"0\",\"1\": 2 2 2 2 2 2 1 2 2 2 ... #>  $ g1: num  0.796 -0.92 0.167 -2.602 -0.432 ... #>  $ g2: num  0.112 -0.708 -1.621 0.115 1.504 ... #>  $ g3: num  0.703 -0.891 0.206 -0.55 -1.458 ... #>  $ p1: num  0 1 1 0 0 0 1 0 1 0 ... #>  $ p2: num  17 7 6 16 9 12 7 9 5 9 ... # Simulate new data and print the BUGS file to the console simulateAbn(object = myfit,             run.simulation = FALSE,             verbose = TRUE)"},{"path":"http://r-bayesian-networks.org/articles/data_simulation.html","id":"compare-the-original-and-simulated-data","dir":"Articles","previous_headings":"","what":"Compare the original and simulated data","title":"Data Simulation","text":"can compare original simulated data plotting distributions variables. plots show distributions original simulated data similar.","code":"# order the columns of mydat equal to mydat_sim mydat <- mydat[, colnames(mydat_sim)] library(ggplot2) library(gridExtra)  # Create a list of variables variables <- names(mydat)  # Initialize an empty list to store plots plots <- list()  # For each variable for (i in seq_along(variables)) {   # Check if the variable is numeric   if (is.numeric(mydat[[variables[i]]])) {     # Create a histogram for the variable in mydat     p1 <- ggplot(mydat, aes(!!as.name(variables[i]))) +       geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +       labs(title = paste(\"mydat\", variables[i]), x = variables[i], y = \"Count\") +       theme_minimal()      # Create a histogram for the variable in mydat_sim     p2 <- ggplot(mydat_sim, aes(!!as.name(variables[i]))) +       geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +       labs(title = paste(\"mydat_sim\", variables[i]), x = variables[i], y = \"Count\") +       theme_minimal()   } else {     # Create a bar plot for the variable in mydat     p1 <- ggplot(mydat, aes(!!as.name(variables[i]))) +       geom_bar(fill = \"skyblue\", color = \"black\") +       labs(title = paste(\"mydat\", variables[i]), x = variables[i], y = \"Count\") +       theme_minimal()      # Create a bar plot for the variable in mydat_sim     p2 <- ggplot(mydat_sim, aes(!!as.name(variables[i]))) +       geom_bar(fill = \"skyblue\", color = \"black\") +       labs(title = paste(\"mydat_sim\", variables[i]), x = variables[i], y = \"Count\") +       theme_minimal()   }    # Combine the plots into a grid   plots[[i]] <- arrangeGrob(p1, p2, ncol = 2) } # Print all plots do.call(grid.arrange, c(plots, ncol = 1))"},{"path":"http://r-bayesian-networks.org/articles/mixed_effect_BN_model.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Mixed-effect Bayesian Network Model","text":"Multi-level models, also known hierarchical models particularly useful dealing data structured different levels - instance, students nested within schools, repeated measures nested within individuals. Multi-level models allow estimation within-group -group effects, can help account non-independence observations within groups. various types multi-level models, including random-intercept models, random-slope models, models include random intercepts slopes. estimation multi-level models can complex, involves estimating parameters multiple levels organization accounting correlations within level. instance, mixed-effect models varying intercepts slopes allow effects predictor variables vary across groups. involves estimation numerous parameters, including variances covariances random slopes intercepts. Among different multi-level models, random-intercept models often simplest understand implement. allow variation groups (e.g., schools individuals), assume effect predictor variables constant across groups. assumption useful outcome variability attributable group-level characteristics, effects predictor variables assumed consistent across groups. Consequently, random-intercept models less complex also include random slopes. Bayesian network models can formulated based multi-level models. approach formalised Azzimonti (2021) discrete data Scutari (2022) continuous data. authors demonstrated apply models, including models random coefficients, various studies. vignette focuses mixed data, includes discrete continuous variables. Unlike R packages mixed-effect Bayesian network modelling, additive Bayesian networks R package abn restrict possible parent-child combinations. However, abn limited random-intercept models without random coefficients. inclusion random coefficients render model estimation process computationally practically unfeasible less restricted data distribution setting. following sections, demonstrate use package fit random-intercept model mixed data.","code":""},{"path":"http://r-bayesian-networks.org/articles/mixed_effect_BN_model.html","id":"ground-truth-data","dir":"Articles","previous_headings":"","what":"Ground truth data","title":"Mixed-effect Bayesian Network Model","text":"generate first data set continuous (Gaussian) discrete (Binomial) variables random-intercept structure.","code":"n_groups <- 5  # Number of observations per group n_obs_per_group <- 1000  # Total number of observations n_obs <- n_groups * n_obs_per_group  # Simulate group effects group <- factor(rep(1:n_groups, each = n_obs_per_group)) group_effects <- rnorm(n_groups)  # Simulate variables G1 <- rnorm(n_obs) + group_effects[group] B1 <- rbinom(n_obs, 1, plogis(group_effects[group])) G2 <- 1.5 * B1 + 0.7 * G1 + rnorm(n_obs) + group_effects[group] B2 <- rbinom(n_obs, 1, plogis(2 * G2 + group_effects[group]))  # Normalize the continuous variables G1 <- (G1 - mean(G1)) / sd(G1) G2 <- (G2 - mean(G2)) / sd(G2)  # Create data frame data <- data.frame(group = group, G1 = G1, G2 = G2, B1 = factor(B1), B2 = factor(B2))  # Look at data str(data) #> 'data.frame':    5000 obs. of  5 variables: #>  $ group: Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ G1   : num  0.786 -0.239 -1.651 -1.178 -0.981 ... #>  $ G2   : num  -1.071 -0.454 -0.933 -0.788 -1.908 ... #>  $ B1   : Factor w/ 2 levels \"0\",\"1\": 1 2 2 1 1 1 1 1 1 2 ... #>  $ B2   : Factor w/ 2 levels \"0\",\"1\": 1 1 1 2 1 1 1 2 1 1 ... summary(data) #>  group          G1                 G2          B1       B2       #>  1:1000   Min.   :-2.91459   Min.   :-3.1031   0:2262   0:1665   #>  2:1000   1st Qu.:-0.69009   1st Qu.:-0.7309   1:2738   1:3335   #>  3:1000   Median :-0.03136   Median :-0.1026                     #>  4:1000   Mean   : 0.00000   Mean   : 0.0000                     #>  5:1000   3rd Qu.: 0.65699   3rd Qu.: 0.6456                     #>           Max.   : 3.91505   Max.   : 3.2302"},{"path":"http://r-bayesian-networks.org/articles/mixed_effect_BN_model.html","id":"additive-bayesian-network-model-fitting","dir":"Articles","previous_headings":"","what":"Additive Bayesian Network Model fitting","title":"Mixed-effect Bayesian Network Model","text":"fit mixed-effect Bayesian network model data using abn package estimate relationships variables G1, G2, B1, B2 qualitatively. model include random intercept group variable specified using group argument buildScoreCache() function.  see probable DAG equals true DAG. Note abn package plot grouping variable DAG, included model.","code":"# Build the score cache score_cache <- buildScoreCache(data.df = data,                                data.dists = list(G1 = \"gaussian\",                                                   G2 = \"gaussian\",                                                   B1 = \"binomial\",                                                   B2 = \"binomial\"),                                group.var = \"group\",                                max.parents = 2,                                method = \"mle\")  # Structure learning mp_dag <- mostProbable(score.cache = score_cache) #> Step1. completed max alpha_i(S) for all i and S #> Total sets g(S) to be evaluated over: 16  # Plot the DAG plot(mp_dag) # Parameter estimation abn_fit <- fitAbn(object = mp_dag,                   method = \"mle\")  # Print the fitted model print(abn_fit) #> The ABN model was fitted using a Maximum Likelihood Estimation (MLE) approach. #>  #> The model is a Generalized Linear Mixed Model (GLMM) with the following grouping variable:  #>  #> group #>  #> Fixed-effect parameters (mu): #> $G1 #> [1] 1.14e-14 #>  #> $G2 #> [1] -0.404 #>  #> $B1 #> [1] 0.23 #>  #> $B2 #> [1] 2.27 #>  #> Fixed-effect coefficients (betas): #> $G1 #> named numeric(0) #>  #> $G2 #>    G1    B1  #> 0.409 0.738  #>  #> $B1 #> named numeric(0) #>  #> $B2 #>   G2  #> 3.93  #>  #> Random-effects residuals (sigma): #> $G1 #> [1] 0.814 #>  #> $G2 #> [1] 0.503 #>  #> $B1 #> numeric(0) #>  #> $B2 #> numeric(0) #>  #> Random-effects intercepts (sigma_alpha): #> $G1 #> [1] 0.65 #>  #> $G2 #> [1] 0.415 #>  #> $B1 #> [1] 0.678 #>  #> $B2 #> [1] 0.41 #>  #> Number of nodes in the network:  0"},{"path":"http://r-bayesian-networks.org/articles/mixed_effect_BN_model.html","id":"comparison-with-the-results-of-the-lme4-package","dir":"Articles","previous_headings":"","what":"Comparison with the results of the lme4 package","title":"Mixed-effect Bayesian Network Model","text":"quantitative results abn package consistent results lme4 package.","code":"# Fit a lmer model for G2 model_g2 <- lmer(G2 ~ G1 + B1 + (1 | group), data = data)  # Print summary summary(model_g2) #> Linear mixed model fit by REML ['lmerMod'] #> Formula: G2 ~ G1 + B1 + (1 | group) #>    Data: data #>  #> REML criterion at convergence: 7359.7 #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -3.8339 -0.6708 -0.0148  0.6946  3.7729  #>  #> Random effects: #>  Groups   Name        Variance Std.Dev. #>  group    (Intercept) 0.1722   0.4150   #>  Residual             0.2528   0.5028   #> Number of obs: 5000, groups:  group, 5 #>  #> Fixed effects: #>             Estimate Std. Error t value #> (Intercept) -0.40421    0.18592  -2.174 #> G1           0.40853    0.00874  46.741 #> B11          0.73815    0.01499  49.254 #>  #> Correlation of Fixed Effects: #>     (Intr) G1     #> G1   0.000        #> B11 -0.044  0.008 # Fit a glmer model for B2 model_b2 <- glmer(B2 ~ G1 + G2 + B1 + (1 | group), data = data, family = binomial)  # Print summary summary(model_b2) #> Generalized linear mixed model fit by maximum likelihood (Laplace #>   Approximation) [glmerMod] #>  Family: binomial  ( logit ) #> Formula: B2 ~ G1 + G2 + B1 + (1 | group) #>    Data: data #>  #>      AIC      BIC   logLik deviance df.resid  #>   2767.1   2799.7  -1378.6   2757.1     4995  #>  #> Scaled residuals:  #>      Min       1Q   Median       3Q      Max  #> -12.2485  -0.2197   0.0368   0.2661   6.6791  #>  #> Random effects: #>  Groups Name        Variance Std.Dev. #>  group  (Intercept) 0.1755   0.4189   #> Number of obs: 5000, groups:  group, 5 #>  #> Fixed effects: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  2.29458    0.22596  10.155   <2e-16 *** #> G1          -0.05993    0.07026  -0.853    0.394     #> G2           3.98141    0.14545  27.373   <2e-16 *** #> B11         -0.04588    0.11148  -0.412    0.681     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Correlation of Fixed Effects: #>     (Intr) G1     G2     #> G1  -0.113               #> G2   0.310 -0.365        #> B11 -0.268  0.352 -0.424"},{"path":"http://r-bayesian-networks.org/articles/model_specification.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Model Specification: Build a Cache of Scores","text":"first step, abn package calculates cache scores data given possible model. cache used estimate Bayesian network structure (“structure learning”) estimate parameters model (“parameter learning”). cache scores calculated using buildScoreCache() function, focus vignette. abn distinguish two approaches: Bayesian information-theoretic score. frequentist framework, package supports possible mixtures continuous, discrete, count data (see also vignette(\"01_quick_start_example.Rmd\")). Settings specific modelling approach set control argument buildScoreCache() function. illustrate model specification process using simple example data set buildScoreCache() function.","code":""},{"path":"http://r-bayesian-networks.org/articles/model_specification.html","id":"estimate-the-maximum-number-of-parent-nodes","dir":"Articles","previous_headings":"","what":"Estimate the maximum number of parent nodes","title":"Model Specification: Build a Cache of Scores","text":"maximum number parent nodes node data set crucial parameter speed model estimation abn. limits number possible combinations thus search space model estimation. Instead wild guess, maximum number parent nodes can set reasonable value based prior knowledge value maximizes score model given data. later case, can estimate model’s score different maximum numbers parent nodes choose maximum number parent nodes maximizes score model given data. can see model score increases maximum number parent nodes certain point remains constant. typical pattern indicates maximum number parent nodes reached point score remains constant. value max.parents can set single value equal nodes list node names keys maximum number parent nodes values shown vignette(\"01_quick_start_example.Rmd\").","code":"# Load only a subset of the example data for illustration mydat <- ex1.dag.data[, c(\"b1\", \"p1\", \"g1\", \"b2\", \"p2\", \"b3\", \"g2\")] mydists <- list(b1=\"binomial\",                  p1=\"poisson\",                  g1=\"gaussian\",                  b2=\"binomial\",                  p2=\"poisson\",                  b3=\"binomial\",                 g2=\"gaussian\")  # Estimate model score for different maximum numbers of parent nodes num.vars <- ncol(mydat) # number of variables max.pars <- 1:(num.vars-1) # vector of possible maximum number of parent nodes  npars_scores <- data.frame(max.pars = max.pars, score = rep(NA, length(max.pars))) # data frame to store scores  # loop over maximum number of parent nodes for (i in max.pars) {   mycache <- buildScoreCache(data.df = mydat,                               data.dists = mydists,                              method = \"bayes\",                               max.parents = i)   mp.dag <- mostProbable(mycache)   myfit <- fitAbn(mp.dag)      npars_scores[i, \"score\"] <- myfit$mlik # store score }  # Plot the scores for different maximum numbers of parent nodes library(ggplot2) ggplot(npars_scores, aes(x = max.pars, y = score)) +   geom_point() +   geom_line() +   labs(x = \"Maximum number of parent nodes\", y = \"Model score\") +   # set x-axis labels to integers   scale_x_continuous(breaks = seq(0, num.vars, 1))"},{"path":"http://r-bayesian-networks.org/articles/model_specification.html","id":"include-prior-domain-knowledge","dir":"Articles","previous_headings":"","what":"Include prior domain knowledge","title":"Model Specification: Build a Cache of Scores","text":"abn package allows include prior domain knowledge model estimation process defining edges directions fixed forbidden. Arcs certain can provided dag.retained, arcs certain present can defined dag.banned. dag.retained dag.banned arguments can set adjacency matrix node names row- column names. edge node node j indicated 1 -th row j-th column matrix, 0 indicates edge. plot shows forbidden edges defined dag.banned matrix.","code":"# Load the example data mydat <- ex1.dag.data mydists <- list(b1=\"binomial\",                  p1=\"poisson\",                  g1=\"gaussian\",                  b2=\"binomial\",                  p2=\"poisson\",                  b3=\"binomial\",                  g2=\"gaussian\",                  b4=\"binomial\",                  b5=\"binomial\",                  g3=\"gaussian\")  # Define edges and their directions as fixed or forbidden dag.banned <- matrix(0, nrow = 10, ncol = 10, dimnames = list(names(mydat), names(mydat)))  # Define edges and their directions as forbidden dag.banned[\"b1\", \"b2\"] <- 1 dag.banned[\"b1\", \"b3\"] <- 1 dag.banned[\"b1\", \"b4\"] <- 1  # Display the matrix dag.banned  # Plot the forbidden edges plotAbn(dag = dag.banned, data.dists = mydists)"},{"path":"http://r-bayesian-networks.org/articles/multiprocessing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Parallelisation","text":"abn package allows efficient modelling additive Bayesian networks. Certain steps workflow, computing score cache, well-suited parallel execution. score cache stores scores possible parent sets node network. running computations multiple combinations simultaneously across different cores, can significantly speed process. abn package uses parallel package achieve .","code":""},{"path":"http://r-bayesian-networks.org/articles/multiprocessing.html","id":"fork-vs--psock","dir":"Articles","previous_headings":"Introduction","what":"FORK vs. PSOCK","title":"Parallelisation","text":"parallel package R offers two main types parallelisation: FORK: Predominantly used Unix-based systems (including Linux Mac OS), FORK parent process creates child processes copy parent process. key advantage FORK shares memory objects processes, can lead significant efficiencies dealing large objects. PSOCK: Used systems, including Windows, PSOCK creates set independent R processes communicates using sockets. PSOCK worker separate R process, memory sharing workers resulting higher memory overhead compared FORK. choice FORK PSOCK depends operating system specific use case.","code":""},{"path":"http://r-bayesian-networks.org/articles/multiprocessing.html","id":"parallelisation-in-the-abn-package","dir":"Articles","previous_headings":"","what":"Parallelisation in the abn package","title":"Parallelisation","text":"illustrate difference FORK PSOCK, compare performance Bayesian frequentist approaches. use microbenchmark package measure time takes compute score cache given data set parameters.","code":""},{"path":"http://r-bayesian-networks.org/articles/multiprocessing.html","id":"load-the-data-and-specify-the-parameters","dir":"Articles","previous_headings":"Parallelisation in the abn package","what":"Load the data and specify the parameters","title":"Parallelisation","text":"","code":"library(abn) library(microbenchmark)  set.seed(123456) # Prepare data and parameters df <- FCV[, -c(13)] mydists <- list(FCV = \"binomial\",                 FHV_1 = \"binomial\",                 C_felis = \"binomial\",                 M_felis = \"binomial\",                 B_bronchiseptica = \"binomial\",                 FeLV = \"binomial\",                 FIV = \"binomial\",                 Gingivostomatitis = \"binomial\",                 URTD = \"binomial\",                 Vaccinated = \"binomial\",                 Pedigree=\"binomial\",                 Outdoor=\"binomial\",                 GroupSize=\"poisson\",                 Age=\"gaussian\") maxparents <- 5 ncores <- 2"},{"path":"http://r-bayesian-networks.org/articles/multiprocessing.html","id":"benchmarking","dir":"Articles","previous_headings":"Parallelisation in the abn package","what":"Benchmarking","title":"Parallelisation","text":"compare following methods: mleSinglecore: Maximum likelihood estimation single core mleMulticorePSOCK: Maximum likelihood estimation 2 cores using PSOCK mleMulticoreFORK: Maximum likelihood estimation 2 cores using FORK bayesSinglecore: Bayesian estimation single core bayesMulticorePSOCK: Bayesian estimation 2 cores using PSOCK bayesMulticoreFORK: Bayesian estimation 2 cores using FORK boxplot illustrates time distribution computing score cache using different methods. can see Bayesian approach generally faster frequentist approach. due efficient implementation score cache computation Bayesian approach. leverages either internal C/C++ implementation INLA, efficient implementation Bayesian approach. method selection, default, automatic depends specific use case. frequentist approach hand relies R packages, introduces higher overhead. multicore approach generally faster singlecore approach. particularly noticeable frequentist approach, multicore methods surpass singlecore method speed. Bayesian approach already highly efficient, gain using multiple cores pronounced. Bayesian approach, FORK method generally faster PSOCK method. FORK method shares memory objects processes, leading significant efficiencies large objects. contrast, PSOCK method creates set independent R processes communicates using sockets, introduces higher memory overhead. example, difference single core approach significant, likely problem large enough greatly benefit parallelization. Interestingly, frequentist approach, PSOCK method appears generally faster FORK method. can occur overhead copying large objects memory outweighs benefits shared memory FORK method. conclusion, Bayesian approach generally faster frequentist approach, speed larger frequentist approach. However, choice FORK PSOCK depends operating system specific use case.","code":"# Benchmark res <- microbenchmark(mleSinglecore = buildScoreCache(data.df = df,                                                data.dists = mydists,                                                method = \"mle\",                                                max.parents = maxparents,                                                control = build.control(method = \"mle\",                                                                        ncores = 1)),                mleMulticorePSOCK = buildScoreCache(data.df = df,                                                    data.dists = mydists,                                                    method = \"mle\",                                                    max.parents = maxparents,                                                    control = build.control(method = \"mle\",                                                                            ncores = ncores,                                                                            cluster.type = \"PSOCK\")),                mleMulticoreFORK = buildScoreCache(data.df = df,                                                   data.dists = mydists,                                                   method = \"mle\",                                                   max.parents = maxparents,                                                   control = build.control(method = \"mle\",                                                                           ncores = ncores,                                                                           cluster.type = \"FORK\")),                bayesSinglecore = buildScoreCache(data.df = df,                                                  data.dists = mydists,                                                  method = \"bayes\",                                                  max.parents = maxparents,                                                  control = build.control(method = \"bayes\",                                                                          ncores = 1)),                bayesMulticorePSOCK = buildScoreCache(data.df = df,                                                      data.dists = mydists,                                                      method = \"bayes\",                                                      max.parents = maxparents,                                                      control = build.control(method = \"bayes\",                                                                              ncores = ncores,                                                                              cluster.type = \"PSOCK\")),                bayesMulticoreFORK = buildScoreCache(data.df = df,                                                     data.dists = mydists,                                                     method = \"bayes\",                                                     max.parents = maxparents,                                                     control = build.control(method = \"bayes\",                                                                             ncores = ncores,                                                                             cluster.type = \"FORK\")),                times = 25) boxplot(res)"},{"path":"http://r-bayesian-networks.org/articles/paper.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Additive Bayesian Networks","text":"abn package comprehensive tool Bayesian network (BN) analysis, form probabilistic graphical model. derives directed acyclic graph empirical data, describing dependency structure random variables. package provides routines structure learning parameter estimation additive Bayesian network (ABN) models. BNs type statistical model leverages principles Bayesian statistics graph theory provide framework representing complex multivariate data. ABN models extend concept generalized linear models, typically used predicting single outcome, scenarios multiple dependent variables (e.g. Kratzer et al. (2023)). makes powerful tool understanding complex, multivariate datasets.","code":""},{"path":"http://r-bayesian-networks.org/articles/paper.html","id":"statment-of-need","dir":"Articles","previous_headings":"","what":"Statment of need","title":"Additive Bayesian Networks","text":"need tool like abn arises increasing complexity data various fields. Researchers often face multivariate, tabular data relationships variables straightforward. BN analysis becomes essential traditional statistical methods fall short analyzing multivariate data intricate relationships, models relationships graphically straightforward data interpretation. However, existing implementations BN models limit variable types, often allowing discrete variables discrete parent variables, parent starts directed edge graph. limitation can pose challenges dealing continuous mixed-type data (.e., data includes continuous discrete variables) attempting model complex relationships fit restricted categories. details discussed context patient data study Delucchi et al. (2022), particularly focusing widely used bnlearn package (Scutari 2010) abn package. abn package overcomes limitations additive model formulation, generalizes usual (Bayesian) multivariable regression accommodate multiple dependent variables. Additionally, abn package offers comprehensive suite features model selection, structure learning, parameter estimation. includes exact greedy search algorithms structure learning allows integrating prior expert knowledge model selection process specifying structural constraints. Unlike software, abn offers Bayesian information-theoretic model scoring approach. Furthermore, supports mixed-effect models control one-layer clustering, making suitable, e.g., handling data different sources. Previous versions abn package successfully used various fields, including epidemiology Kratzer Furrer (2018) health Delucchi et al. (2022). Despite promise, abn package encountered historical obstacles. Sporadic maintenance incomplete codebase hindered full potential. Recognizing need enhancement, undertook substantial upgrade meticulously addressed legacy issues, revamped codebase, introduced significant improvements. latest version 3 abn now robust reliable tool BN analysis. Applying latest standards open-source software, guarantee active maintenance abn. Future updates planned enhance functionality user experience . highly value feedback user community, guide ongoing developments. summary, abn sets apart emphasizing ABNs exhaustive features model selection structure learning. unique contribution implementation mixed-effect BN models, thereby extending applicability broader range complex, multivariate datasets mixed, continuous discrete data.","code":""},{"path":"http://r-bayesian-networks.org/articles/paper.html","id":"implementation","dir":"Articles","previous_headings":"","what":"Implementation","title":"Additive Bayesian Networks","text":"outlined Kratzer et al. (2023), package’s comprehensive framework integrates mixed-effects model clustered data, considering data heterogeneity grouping effects. However, confined Bayesian context. implementation information-theoretic (“mle”) setting notably missing previous versions, omission rectified current version 3 onwards. Analyzing hierarchical grouped data, .e., observations nested within higher-level units, requires statistical models group-varying parameters (e.g., mixed-effect models). abn package facilitates single-layer clustering, observations grouped single layer clusters. clusters assumed independent, intra-cluster observations may exhibit correlation (e.g., students within schools, patient-specific measurements time, etc.). ABN model fitted independently varying intercept model, intercept can vary slope assumed constant across group levels. frequentist paradigm (method = \"mle\"), abn employs lme4 package (Bates et al. 2015) fit generalized linear mixed models Binomial, Poisson, Gaussian distributed variables. multinomial distributed variables, abn fits multinomial baseline category logit model random effects using mclogit package (Elff 2022). Currently, single-layer clustering supported (e.g., method = \"mle\", corresponds random intercept model). Bayesian approach (method = \"bayes\"), abn utilizes implementation Laplace approximation well INLA package (Martins et al. 2013) fit single-level hierarchical model Binomial, Poisson, Gaussian distributed variables. Independent type data, multinomial distributed variables yet implemented method =\"bayes\" (details online manual). Furthermore, code base enhanced efficient, reliable, user-friendly code optimization, regular reviews continuous integration practices. adhered latest open-source software standards, including active maintenance abn. Future updates augment functionality planned via flexible roadmap. User feedback valued open communication channels, steer ongoing developments. Consequently, latest version abn now robust reliable tool BN analysis.","code":""},{"path":"http://r-bayesian-networks.org/articles/paper.html","id":"validation-and-testing","dir":"Articles","previous_headings":"","what":"Validation and Testing","title":"Additive Bayesian Networks","text":"comprehensive set documented case studies published validate abn package (see abn website). numerical accuracy quality assurance exercises demonstrated Kratzer et al. (2023). rigorous testing framework implemented using testthat package (Wickham 2011), executed part extensive continuous integration pipeline designed explicitly non-standard R packages rely Rcpp (Eddelbuettel et al. 2023) JAGS (Plummer 2003). Additional documentation resources available abn website reference guidance.","code":""},{"path":"http://r-bayesian-networks.org/articles/paper.html","id":"availability","dir":"Articles","previous_headings":"","what":"Availability","title":"Additive Bayesian Networks","text":"abn package available CRAN can installed R command: development version abn package hosted GitHub can installed using devtools package:","code":"install.packages(\"abn\") devtools::install_github(\"furrer-lab/abn\")"},{"path":"http://r-bayesian-networks.org/articles/paper.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Additive Bayesian Networks","text":"development abn package possible without significant contributions former developers whose efforts instrumental shaping project. acknowledge contributions Fraser Iain Lewis, Marta Pittavino, Gilles Kratzer, Kalina Cherneva, particular. want extend gratitude faculty staff Department Mathematical Modeling Machine Learning University Zurich Institute Mathematics maintain research teaching infrastructure. appreciation also goes UZH ZHAW financial support. like highlight funding Digitalization Initiative Zurich Higher Education Institutions (DIZH), instrumental realization project, particularly within context “Modeling multicentric dynamic stroke health data” “Stroke DynamiX” projects. work conducted part M.D.’s PhD project, supervised R.F.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/articles/parameter_learning.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Parameter Learning","text":"context additive Bayesian network (ABN) modelling, parameter learning refers process estimating parameters graphical model. parameters model coefficients linear regression models used model conditional probability distributions nodes network. estimated using data available nodes network.","code":""},{"path":"http://r-bayesian-networks.org/articles/parameter_learning.html","id":"fitting-an-abn-model","dir":"Articles","previous_headings":"","what":"Fitting an ABN model","title":"Parameter Learning","text":"fitAbn() function used estimate parameters ABN model. principle, need data directed acyclic graph (DAG) specifies structure network. , together additional arguments, provided object abnLearned fitAbn() estimate parameters model. process illustrated vignette(\"01_quick_start_example\"). Alternatively, fitAbn() can fit parameters manually specified DAG. case, need provide data, distributions DAG arguments fitAbn(): Fit model calculate log marginal likelihood goodness fit:","code":"# Load an illustrative subset of the example data mydat <- ex0.dag.data[,c(\"b1\",\"b2\",\"b3\",\"g1\",\"b4\",\"p2\",\"p4\")]  # Specify the distributions of the nodes mydists <- list(b1=\"binomial\",                 b2=\"binomial\",                 b3=\"binomial\",                 g1=\"gaussian\",                 b4=\"binomial\",                 p2=\"poisson\",                 p4=\"poisson\" )  # Define a DAG mydag <- matrix(data=c( 0,0,1,0,0,0,0, # b1<-b3                         1,0,0,0,0,0,0, # b2<-b1                         0,0,0,0,0,0,0, #                         0,0,0,0,1,0,0, # g1<-b4                         0,0,0,0,0,0,0, #                         0,0,0,0,0,0,0, #                         0,0,0,0,0,0,0 # ), byrow=TRUE,ncol=7) colnames(mydag) <- rownames(mydag) <- names(mydat) myres.c <- fitAbn(dag = mydag,                   data.df = mydat,                   data.dists = mydists,                   method = \"bayes\") plot(myres.c)"},{"path":"http://r-bayesian-networks.org/articles/parameter_learning.html","id":"examine-the-parameter-estimates","dir":"Articles","previous_headings":"","what":"Examine the parameter estimates","title":"Parameter Learning","text":"can examine parameter estimates print() method class abnFit looking coef slot abnFit object returned fitAbn():","code":"print(myres.c) #> The ABN model was fitted using a Bayesian approach. The estimated modes (the highest posterior density values of the parameters) are: #>  #> $b1 #> b1|(Intercept)          b1|b3  #>          0.217         -0.164  #>  #> $b2 #> b2|(Intercept)          b2|b1  #>         0.0286         0.0465  #>  #> $b3 #> b3|(Intercept)  #>         0.0267  #>  #> $g1 #> g1|(Intercept)          g1|b4   g1|precision  #>        -0.0494         0.0915         1.0054  #>  #> $b4 #> b4|(Intercept)  #>           0.16  #>  #> $p2 #> p2|(Intercept)  #>           2.34  #>  #> $p4 #> p4|(Intercept)  #>           2.32  #>  #> Number of nodes in the network:  7"},{"path":"http://r-bayesian-networks.org/articles/parameter_learning.html","id":"examine-the-marginal-posterior-densities","dir":"Articles","previous_headings":"","what":"Examine the marginal posterior densities","title":"Parameter Learning","text":"Furthermore, can examine marginal posterior densities parameters. useful assess uncertainty parameter estimates check model overfitting data. Now fit model compute.fixed=TRUE calculate marginal posterior distributions parameters: marginals slot abnFit object returned fitAbn() contains list marginal posterior densities. can plot marginal posterior densities assess uncertainty parameter estimates: Note , default, variables standardized (centre = TRUE).","code":"myres.c2 <- fitAbn(dag = mydag,                   data.df = mydat,                   data.dists = mydists,                   method = \"bayes\",                   compute.fixed=TRUE) library(ggplot2) library(gridExtra)  df1 <- as.data.frame(myres.c2$marginals$b1[[\"b1|(Intercept)\"]]) names(df1) <- c(\"x\",\"y\") p1 <- ggplot(df1, aes(x=x, y=y)) +   geom_line() +   geom_point(shape = 43, color=\"green\") +   labs(x=\"b1|(Intercept)\", title=\"Node b1, Intercept\")  df2 <- as.data.frame(myres.c2$marginals$g1[[\"g1|b4\"]]) names(df2) <- c(\"x\",\"y\") p2 <- ggplot(df2, aes(x=x, y=y)) +   geom_line() +   geom_point(shape = 43, color=\"orange\") +   labs(x=\"g1|b4\", title=\"Node g1, parameter b4\")  grid.arrange(p1, p2, ncol=2)"},{"path":"http://r-bayesian-networks.org/articles/quick_start_example.html","id":"basic-workflow-with-the-abn-package","dir":"Articles","previous_headings":"","what":"Basic workflow with the abn package","title":"Quick Start Example","text":"package abn collection functions modelling additive Bayesian networks. contains routines score Bayesian Networks based Bayesian (default) information-theoretic formulation generalized linear models. Depending type data, package supports possible mixture continuous, discrete, count data. following table shows distribution types supported method estimation: Structure learning additive Bayesian networks abn three-step process. Based set model specifications (data, maximal number possible parent nodes, restricted enforced arcs, etc.), abn calculates first step score data given model (buildScoreCache()). list scores used estimate probable Bayesian network structure (“structure learning”) infer network structure third step (fitAbn()). Four structure-learning algorithms implemented abn: hill-climbing algorithm, “exact search” algorithm, simulated annealing algorithm tabu search algorithm. network structure inferred, package provides routines estimate parameters network simulate data fitted additive Bayesian network model. following example shows find best fitting graphical structure using exact search algorithm.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/articles/quick_start_example.html","id":"load-the-example-dataset-ex1-dag-data","dir":"Articles","previous_headings":"Model specification","what":"Load the example dataset ex1.dag.data","title":"Quick Start Example","text":"artificial data set comes abn contains 10000 observations 10 variables. variables mixture continuous (gaussian), binary (binomial), count (poisson) data. data set simulated data set known network structure.","code":"mydat <- ex1.dag.data str(mydat)"},{"path":"http://r-bayesian-networks.org/articles/quick_start_example.html","id":"set-up-distribution-list-for-each-node","dir":"Articles","previous_headings":"Model specification","what":"Set up distribution list for each node","title":"Quick Start Example","text":"abn requires list type distribution node data set.","code":"mydists <- list(b1=\"binomial\",                  p1=\"poisson\",                  g1=\"gaussian\",                  b2=\"binomial\",                  p2=\"poisson\",                  b3=\"binomial\",                  g2=\"gaussian\",                  b4=\"binomial\",                  b5=\"binomial\",                  g3=\"gaussian\")"},{"path":"http://r-bayesian-networks.org/articles/quick_start_example.html","id":"set-the-parent-limits-node-wise","dir":"Articles","previous_headings":"Model specification","what":"Set the parent limits node-wise","title":"Quick Start Example","text":"max.par argument sets maximum number parent nodes node data set. can set single value nodes list node names keys maximum number parent nodes values. crucial parameter speed model estimation abn limits number possible combinations.","code":"# max.par <- list(\"b1\"=1,\"p1\"=2,\"g1\"=3,\"b2\"=4,\"p2\"=1,\"b3\"=2,\"g2\"=3,\"b4\"=4,\"b5\"=1,\"g3\"=2) # set different max parents for each node max.par <- 4 # set the same max parents for all nodes"},{"path":"http://r-bayesian-networks.org/articles/quick_start_example.html","id":"build-the-score-cache","dir":"Articles","previous_headings":"","what":"Build the score cache","title":"Quick Start Example","text":"score cache list scores possible parent combination node data set. used learn structure Bayesian network next step. minimal number input arguments buildScoreCache() data set distribution list. default, function uses Bayesian score based posterior probability model given data. use Log-Likelihood score, Akaike Information Criterion (AIC) Bayesian Information Criterion (BIC) instead, method argument can set \"mle\". function buildScoreCache() also accepts list banned retained arcs, can used enforce restrict presence certain arcs network structure. can useful prior knowledge network structure available, e.g. expert knowledge previous analyses known certain arcs must present absent. max.parents argument sets maximum number parent nodes node data set together dag.banned dag.retained arguments, restricts model search space can speed model estimation abn.","code":"mycache <- buildScoreCache(data.df = mydat,                             data.dists = mydists,                            method = \"bayes\", # the default method is \"bayes\"                            max.parents = max.par)"},{"path":"http://r-bayesian-networks.org/articles/quick_start_example.html","id":"structure-learning","dir":"Articles","previous_headings":"","what":"Structure learning","title":"Quick Start Example","text":"next step find best fitting graphical structure Bayesian network. example, use exact search algorithm find probable Bayesian network structure given score cache previous step. supply score cache abnCache object previous step structure learning function. mostProbable() function returns object class abnLearned contains probable Bayesian network structure score model given data.","code":"mp.dag <- mostProbable(score.cache = mycache)"},{"path":"http://r-bayesian-networks.org/articles/quick_start_example.html","id":"plot-the-best-fitting-graphical-structure","dir":"Articles","previous_headings":"Structure learning","what":"Plot the best fitting graphical structure","title":"Quick Start Example","text":"best fitting graphical structure can plotted using plotAbn() function. plot() function requires Rgraphviz package installed.","code":"plot(mp.dag)"},{"path":"http://r-bayesian-networks.org/articles/quick_start_example.html","id":"estimate-the-parameters-of-the-network","dir":"Articles","previous_headings":"","what":"Estimate the parameters of the network","title":"Quick Start Example","text":"parameters network can estimated using fitAbn() function. fitAbn() function returns object class abnFit contains estimated parameters network.","code":"myfit <- fitAbn(object = mp.dag) summary(myfit) plot(myfit)"},{"path":"http://r-bayesian-networks.org/articles/quick_start_example.html","id":"simulate-data-from-the-fitted-model","dir":"Articles","previous_headings":"","what":"Simulate data from the fitted model","title":"Quick Start Example","text":"simulateAbn() function can used simulate data fitted model.","code":"simdat <- simulateAbn(object = myfit,                        n.iter = 10000L) summary(simdat)"},{"path":"http://r-bayesian-networks.org/articles/structure_learning.html","id":"structure-learning-of-bayesian-networks","dir":"Articles","previous_headings":"","what":"Structure Learning of Bayesian Networks","title":"Bayesian Network Structure Learning","text":"structure learning Bayesian networks process estimating (-)dependencies variables network results directed acyclic graph (DAG) nodes represent variables edges represent dependencies variables. Structure learning Bayesian networks challenging problem several algorithms solve (see Koller Friedman (2009) comprehensive review). abn package currently offers four distinct algorithms Bayesian network structure learning: mostProbable(): exact order-based structure learning algorithm identifies probable posterior DAG following method Koivisto Sood (2004). details see help page mostProbable(). searchHillClimber(): Hill-climber algorithm single move algorithm. step, arc attempted added. new score computed compared previous network’s score. deviates slightly original method proposed Heckerman, Geiger, Chickering (1995) utilizing full cache possible local combinations provided buildScoreCache(). algorithm considers potential single swaps DAG step, selecting swap maximizes goodness fit. multiple arc changes considered step, arc reversal requires two steps. implementation (C), intuitive pre-computed cache local scores, optimized abn workflow. details see help page searchHillClimber(). searchHeuristic(): function flexible implementation multiple greedy heuristic algorithms, particularly well adapted abn framework. targets multi-random restarts heuristic algorithms allows user select number searches maximum number steps within search. function implements three algorithms selected parameter algo: hc, tabu, sa. algo=hc: alternative implementation greedy hill-climbing approach fully written R, unlike searchHillClimber() mostProbable() written C. performs local stepwise optimization, choosing structural move computing score’s change. function closer MCMCMC algorithm Madigan, York, Allard (1995) Paolo Giudici Roberto Castello (2003) single edge move. algo=tabu: algorithm hc used, list banned moves computed. parameter tabu.memory controls length tabu list. forces algorithm escape local maximum choosing already used moves. algo=sa: variant heuristic search algorithm based simulated annealing described Metropolis et al. (1953). accepted moves result decrease network score. acceptance rate can monitored parameter temperature. information, refer help page searchHeuristic().","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matteo Delucchi. Author, maintainer. Reinhard Furrer. Author. Gilles Kratzer. Author. Fraser Iain Lewis. Author. Marta Pittavino. Contributor. Kalina Cherneva. Contributor.","code":""},{"path":"http://r-bayesian-networks.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kratzer G, Lewis F, Comin , Pittavino M, Furrer R (2023). “Additive Bayesian Network Modeling R Package abn.” Journal Statistical Software, 105(8), 1–41. doi:10.18637/jss.v105.i08. Kratzer, G., Lewis, F.., Willi, B., Meli, M.L., Boretti, F.S., Hofmann-Lehmann, R., Torgerson, P., Furrer, R. Hartnack, S. (2020). Bayesian Network Modeling Applied Feline Calicivirus Infection Among Cats Switzerland. Frontiers Veterinary Science, 7, 73 Furrer, R., Kratzer, G. Lewis, F.. (2023). abn: Modelling Multivariate Data Additive Bayesian Networks. R package version 2.7-2.   https://CRAN.R-project.org/package=abn","code":"@Article{,   title = {Additive Bayesian Network Modeling with the R Package abn},   author = {Gilles Kratzer and Fraser Lewis and Arianna Comin and Marta Pittavino and Reinhard Furrer},   journal = {Journal of Statistical Software},   year = {2023},   volume = {105},   number = {8},   pages = {1--41},   doi = {10.18637/jss.v105.i08}, } @Article{,   title = {Bayesian Network Modeling Applied to Feline Calicivirus Infection Among Cats in Switzerland},   author = {Gilles Kratzer and Fraser Iain Lewis and Barbara Willi and Marina Meli and Felicitas Boretti and Regina Hofmann-Lehmann and Paul Torgerson and Reinhard Furrer and Sonja Hartnack},   year = {2020},   journal = {Frontiers in Veterinary Science}, } @Manual{,   title = {abn: Modelling Multivariate Data with Additive Bayesian Networks},   author = {Reinhard Furrer and Gilles Kratzer and Fraser Iain Lewis},   year = {2023},   note = {R package version 2.7-2},   url = {https://CRAN.R-project.org/package=abn}, }"},{"path":"http://r-bayesian-networks.org/index.html","id":"abn-additive-bayesian-networks-","dir":"","previous_headings":"","what":"Modelling Multivariate Data with Additive Bayesian Networks","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"R package abn tool Bayesian network analysis, form probabilistic graphical model. derives directed acyclic graph (DAG) empirical data describes dependency structure random variables. package provides routines structure learning parameter estimation additive Bayesian network models.","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"abn R package can easily installed CRAN using: recent development version available Github can installed : recommended install abn within virtual environment, e.g., using renv) can done :","code":"install.packages(\"abn\", dependencies = TRUE) devtools::install_github(\"furrer-lab/abn\") renv::install(\"bioc::graph\") renv::install(\"bioc::Rgraphviz\") renv::install(\"abn\", dependencies = c(\"Depends\", \"Imports\", \"LinkingTo\", \"Suggests\"))"},{"path":"http://r-bayesian-networks.org/index.html","id":"additional-libraries","dir":"","previous_headings":"","what":"Additional libraries","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"following additional libraries recommended best profit abn features. INLA, R package used model fitting. hosted separately CRAN easy install common platforms (see instructions INLA website). Rgraphviz used produce plots network graphs hosted Bioconductor. JAGS program analysing Bayesian hierarchical models using Markov Chain Monte Carlo (MCMC) simulation. installation platform-dependent , therefore, covered .","code":"install.packages(\"INLA\", repos=c(getOption(\"repos\"), INLA=\"https://inla.r-inla-download.org/R/stable\"), dep=TRUE) if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"Rgraphviz\", version = \"3.8\")"},{"path":"http://r-bayesian-networks.org/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"Explore basics data analysis using additive Bayesian networks abn package simple example. datasets required examples included within abn package. deeper understanding, refer manual pages abn homepage, include numerous examples. Key pages visit fitAbn(), buildScoreCache(), mostProbable(), searchHillClimber(). Also, see examples quick overview package’s capabilities.","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"R package abn provides routines determining optimal additive Bayesian network models given data set. core functionality concerned model selection - determining likely model data interdependent variables. model selection process can incorporate expert knowledge specifying structural constraints, arcs banned retained. general workflow abn follows three-step process: Determine model search space: function buildScoreCache() builds cache pre-computed scores possible DAG. , ’s required specify data types variables data set structural constraints model (e.g. arcs banned retained maximum number parents per node). Structure learning: abn offers different structure learning algorithms: exact structure learning algorithm Koivisto Sood (2004) implemented C can called function mostProbable(), finds probable DAG given data set. function searchHeuristic() provides set heuristic search algorithms. include hill-climber, tabu search, simulated annealing algorithms implemented R. searchHillClimber() searches high-scoring DAGs using random re-start greedy hill-climber heuristic search implemented C. slightly deviates method initially presented Heckerman et al. 1995 (details consult respective help page ?abn::searchHillClimber()). Parameter estimation: function fitAbn() estimates model’s parameters based DAG previous step. abn allows two different model formulations, specified argument method: method = \"mle\" fits model frequentist paradigm using information-theoretic criteria select best model. method = \"bayes\" estimates posterior distribution model parameters based two Laplace approximation methods, , method Bayesian inference alternative Markov Chain Monte Carlo (MCMC): standard Laplace approximation implemented abn source code switches specific cases (see help page ?fitAbn) Integrated Nested Laplace Approximation INLA package requiring installation thereof. generate new observations fitted ABN model, function simulateAbn() simulates data based DAG estimated parameters previous step. simulateAbn() available method = \"mle\" method = \"bayes\" requires installation JAGS package.","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"supported-data-types","dir":"","previous_headings":"","what":"Supported Data types","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"abn package supports following distributions variables network: Gaussian distribution continuous variables. Binomial distribution binary variables. Poisson distribution variables count data. Multinomial distribution categorical variables (available method = \"mle\"). Unlike packages, abn restrict combination parent-child distributions.","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"multilevel-models-for-grouped-data-structures","dir":"","previous_headings":"","what":"Multilevel Models for Grouped Data Structures","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"analysis “hierarchical” “grouped” data, observations nested within higher-level units, requires statistical models parameters vary across groups (e.g. mixed-effect models). abn allows control one-layer clustering, observations grouped single layer clusters themself assumed independent, observations within clusters may correlated (e.g. students nested within schools, measurements time patient, etc). argument group.var specifies discrete variable defines group structure. model fitted separately group, results combined. example, studying student test scores across different schools, varying intercept model allow possibility average test scores (intercept) might higher one school another due factors specific school. can modelled abn setting argument group.var variable containing school names. model fitted varying intercept model, intercept allowed vary across schools, slope assumed schools. frequentist paradigm (method = \"mle\"), abn relies lme4 package fit generalised linear mixed models (GLMMs) Binomial, Poisson, Gaussian distributed variables. multinomial distributed variables, abn fits multinomial baseline category logit model random effects using mclogit package. Currently, one-layer clustering supported (e.g., method = \"mle\", corresponds random intercept model). Bayesian approach (method = \"bayes\"), abn relies implementation Laplace approximation package INLA fit single-level hierarchical model Binomial, Poisson, Gaussian distributed variables. Multinomial distributed variables general (see Section Supported Data Types) yet implemented method = \"bayes\".","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"basic-background","dir":"","previous_headings":"","what":"Basic Background","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"Bayesian network modelling data analysis technique ideally suited messy, highly correlated complex datasets. methodology rather distinct forms statistical modelling focus structure discovery—determining optimal graphical model describes interrelationships underlying processes generated data. multivariate technique can used one many dependent variables. data-driven approach, opposed relying subjective expert opinion determine variables interest interrelated (example, structural equation modelling). package’s website, provide cookbook-type examples perform Bayesian network structure discovery analyses observational data. particular type Bayesian network models considered additive Bayesian networks. rather different, mathematically speaking, standard form Bayesian network models (binary categorical data) presented academic literature, typically use analytically elegant arguably interpretation-wise opaque contingency table parametrisation. additive Bayesian network model simply multidimensional regression model, e.g. directly analogous generalised linear modelling variables potentially dependent. example can found American Journal Epidemiology, approach used investigate risk factors child diarrhoea. special issue Preventive Veterinary Medicine graphical modelling features several articles use abn fit epidemiological data. Introductions methodology can found Emerging Themes Epidemiology Computers Biology Medicine compared approaches.","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"what-is-an-additive-bayesian-network","dir":"","previous_headings":"","what":"What is an additive Bayesian network?","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"Additive Bayesian network (ABN) models statistical models use principles Bayesian statistics graph theory. provide framework representing data multiple variables, known multivariate data. ABN models graphical representation (Bayesian) multivariate regression. form statistical analysis enables prediction multiple outcomes given set predictors simultaneously accounting relationships outcomes. words, additive Bayesian network models extend concept generalised linear models (GLMs), typically used predict single outcome, scenarios multiple dependent variables. makes powerful tool understanding complex, multivariate datasets.","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"the-term-bayesian-network-is-interpreted-differently-across-various-fields","dir":"","previous_headings":"","what":"The term Bayesian network is interpreted differently across various fields.","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"Bayesian network models often involve binary nodes, arguably frequently used type Bayesian network. models typically use contingency table instead additive parameter formulation. approach allows mathematical elegance enables key metrics like model goodness fit marginal posterior parameters estimated analytically (.e., formula) rather numerically (approximation). However, parametrisation may parsimonious, interpretation model parameters less straightforward usual Generalized Linear Model (GLM) type models, prevalent across scientific disciplines. crucial practical distinction, ’s relatively low-level technical one, primary aspect BN modelling ’s form graphical modelling – model data’s joint probability distribution. joint – multidimensional – aspect makes methodology highly attractive complex data analysis sets apart standard regression techniques, GLMs, GLMMs, etc., one-dimensional assume covariates independent. assumption entirely reasonable classical experimental design scenario, ’s unrealistic many observational studies fields like medicine, veterinary science, ecology, biology.","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"Example 1: Basic usage Example 2: Restrict model search space Example 3: Grouped Data Structures Example 4: Using INLA vs internal Laplace approximation","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"example-1-basic-usage","dir":"","previous_headings":"","what":"Example 1: Basic Usage","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"basic example shows basic workflow:","code":"library(abn)  # Built-in toy dataset with two Gaussian variables G1 and G2, two Binomial variables B1 and B2, and one multinomial variable C str(g2b2c_data)  # Define the distributions of the variables dists <- list(G1 = \"gaussian\",               B1 = \"binomial\",               B2 = \"binomial\",               C = \"multinomial\",               G2 = \"gaussian\")   # Build the score cache cacheMLE <- buildScoreCache(data.df = g2b2c_data,                          data.dists = dists,                          method = \"mle\",                          max.parents = 2)  # Find the most probable DAG dagMP <- mostProbable(score.cache = cacheMLE)  # Print the most probable DAG print(dagMP)  # Plot the most probable DAG plot(dagMP)  # Fit the most probable DAG myfit <- fitAbn(object = dagMP,                 method = \"mle\")  # Print the fitted DAG print(myfit)"},{"path":"http://r-bayesian-networks.org/index.html","id":"example-2-restrict-model-search-space","dir":"","previous_headings":"","what":"Example 2: Restrict Model Search Space","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"Based example 1, may know arc G1->G2 possible arc C -> G2 must present. “expert knowledge” can included model banning arc G1 G2 retaining arc C G2. retain ban matrices specified adjacency matrix 0 1 entries, 1 indicates arc banned retained, respectively. Row column names must match variable names data set. corresponding column parent variable row. column represents parents, row child. example, first row ban matrix indicates G1 banned parent G2. , can restrict maximum number parents per node 2.","code":"# Ban the edge G1 -> G2 banmat <- matrix(0, nrow = 5, ncol = 5, dimnames = list(names(dists), names(dists))) banmat[1, 5] <- 1  # retain always the edge C -> G2 retainmat <- matrix(0, nrow = 5, ncol = 5, dimnames = list(names(dists), names(dists))) retainmat[5, 4] <- 1  # Limit the maximum number of parents to 2 max.par <- 2  # Build the score cache cacheMLE_small <- buildScoreCache(data.df = g2b2c_data,                             data.dists = dists,                             method = \"mle\",                             dag.banned = banmat,                             dag.retained = retainmat,                             max.parents = max.par) print(paste(\"Without restrictions from example 1: \", nrow(cacheMLE$node.defn))) print(paste(\"With restrictions as in example 2: \", nrow(cacheMLE_small$node.defn)))"},{"path":"http://r-bayesian-networks.org/index.html","id":"example-3-grouped-data-structures","dir":"","previous_headings":"","what":"Example 3: Grouped Data Structures","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"Depending data structure, may want control one-layer clustering, observations grouped single layer clusters assumed independent, observations within clusters may correlated (e.g., students nested within schools, measurements time patient, etc.). Currently, abn supports one layer clustering.","code":"# Built-in toy data set str(g2pbcgrp)  # Define the distributions of the variables dists <- list(G1 = \"gaussian\",               P = \"poisson\",               B = \"binomial\",               C = \"multinomial\",               G2 = \"gaussian\") # group is not among the list of variable distributions  # Ban arcs such that C has only B and P as parents ban.mat <- matrix(0, nrow = 5, ncol = 5, dimnames = list(names(dists), names(dists))) ban.mat[4, 1] <- 1 ban.mat[4, 4] <- 1 ban.mat[4, 5] <- 1  # Build the score cache cache <- buildScoreCache(data.df = g2pbcgrp,                          data.dists = dists,                          group.var = \"group\",                          dag.banned = ban.mat,                          method = \"mle\",                          max.parents = 2)  # Find the most probable DAG dag <- mostProbable(score.cache = cache)  # Plot the most probable DAG plot(dag)  # Fit the most probable DAG fit <- fitAbn(object = dag,               method = \"mle\")  # Plot the fitted DAG plot(fit)  # Print the fitted DAG print(fit)"},{"path":"http://r-bayesian-networks.org/index.html","id":"example-4-using-inla-vs-internal-laplace-approximation","dir":"","previous_headings":"","what":"Example 4: Using INLA vs internal Laplace approximation","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"Bayesian approach, abn automatically switches Integrated Nested Laplace Approximation INLA package internal Laplace approximation fails converge. However, can also force use INLA setting argument control=list(max.mode.error=100). following example shows results similar. also shows constrain arcs formula objects specify different parent limits node separately.","code":"library(abn)  # Subset of the build-in dataset, see  ?ex0.dag.data mydat <- ex0.dag.data[,c(\"b1\",\"b2\",\"g1\",\"g2\",\"b3\",\"g3\")] ## take a subset of cols  # setup distribution list for each node mydists <- list(b1=\"binomial\", b2=\"binomial\", g1=\"gaussian\",                 g2=\"gaussian\", b3=\"binomial\", g3=\"gaussian\")  # Structural constraints ## ban arc from b2 to b1 ## always retain arc from g2 to g1 ## parent limits - can be specified for each node separately max.par <- list(\"b1\"=2, \"b2\"=2, \"g1\"=2, \"g2\"=2, \"b3\"=2, \"g3\"=2)  # now build the cache of pre-computed scores according to the structural constraints res.c <- buildScoreCache(data.df=mydat, data.dists=mydists,                          dag.banned= ~b1|b2,                           dag.retained= ~g1|g2,                           max.parents=max.par)   # repeat but using R-INLA. The mlik's should be virtually identical. if(requireNamespace(\"INLA\", quietly = TRUE)){   res.inla <- buildScoreCache(data.df=mydat, data.dists=mydists,                               dag.banned= ~b1|b2, # ban arc from b2 to b1                               dag.retained= ~g1|g2, # always retain arc from g2 to g1                               max.parents=max.par,                               control=list(max.mode.error=100)) # force using of INLA      ## comparison - very similar   difference <- res.c$mlik - res.inla$mlik   summary(difference) }"},{"path":"http://r-bayesian-networks.org/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"greatly appreciate contributions community excited welcome development process abn package. guidelines help get started: Seeking Support: need help using abn package, can seek support creating new issue GitHub repository. Please describe problem detail include minimal reproducible example possible. Reporting Issues Problems: encounter issues problems software, please report creating new issue GitHub repository. reporting issue, try include much detail possible, including steps reproduce issue, operating system R version, error messages received. Software Contributions: encourage contributions directly via pull requests GitHub repository. starting work, please first create issue describing contribution wish make. allows us discuss agree best way integrate contribution package. participating project, agree abide code conduct. committed making participation project respectful harassment-free experience everyone.","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"use abn research, please cite follows:","code":"> citation(\"abn\") To cite the methodology of the R package 'abn' use:    Kratzer G, Lewis F, Comin A, Pittavino M, Furrer R (2023). “Additive Bayesian Network Modeling with the R Package abn.” _Journal of Statistical Software_,   *105*(8), 1-41. doi:10.18637/jss.v105.i08 <https://doi.org/10.18637/jss.v105.i08>.  To cite an example of a typical ABN analysis use:    Kratzer, G., Lewis, F.I., Willi, B., Meli, M.L., Boretti, F.S., Hofmann-Lehmann, R., Torgerson, P., Furrer, R. and Hartnack, S. (2020). Bayesian Network   Modeling Applied to Feline Calicivirus Infection Among Cats in Switzerland. Frontiers in Veterinary Science, 7, 73  To cite the software implementation of the R package 'abn' use:    Furrer, R., Kratzer, G. and Lewis, F.I. (2023). abn: Modelling Multivariate Data with Additive Bayesian Networks. R package version 2.7-2.   https://CRAN.R-project.org/package=abn"},{"path":"http://r-bayesian-networks.org/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"abn package licensed GNU General Public License v3.0.","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"Please note abn project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"applications","dir":"","previous_headings":"","what":"Applications","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"abn website provides comprehensive set documented case studies, numerical accuracy/quality assurance exercises, additional documentation.","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"technical-articles","dir":"","previous_headings":"","what":"Technical articles","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"Kratzer et al. (2023): Additive Bayesian Network Modeling R Package abn Kratzer et al. (2020) Bayesian Networks modeling applied Feline Calicivirus infection among cats Switzerland Kratzer et al. (2018): Comparison Suitable Priors Additive Bayesian Networks Koivisto et al. (2004): Exact Bayesian structure discovery Bayesian networks Friedman et al. (2003): Bayesian network structure. Bayesian approach structure discovery Bayesian networks Friedman et al. (1999): Data analysis Bayesian networks: bootstrap approach Heckerman et al. (1995): Learning Bayesian Networks – Combination Knowledge Statistical-Data","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"application-articles","dir":"","previous_headings":"","what":"Application articles","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"Delucchi et al. (2022): Bayesian network analysis reveals interplay intracranial aneurysm rupture risk factors Guinat et al. (2020) Biosecurity risk factors highly pathogenic avian influenza (H5N8) virus infection duck farms, France Hartnack et al. (2019) Additive Bayesian networks antimicrobial resistance potential risk factors non-typhoidal Salmonella isolates layer hens Uganda Ruchti et al. (2019): Progression risk factors pododermatitis part-time group housed rabbit Switzerland Comin et al. (2019) Revealing structure associations housing system, facilities, management welfare commercial laying hens using Additive Bayesian Networks Ruchti et al. (2018): Pododermatitis group housed rabbit Switzerland – prevalence, severity risk factors Pittavino et al. (2017): Comparison generalised linear modelling additive Bayesian network; identification factors associated incidence antibodies Leptospira interrogans sv Pomona meat workers New Zealand Hartnack et al. (2017): Attitudes Austrian veterinarians towards euthanasia small animal practice: impacts age gender views euthanasia Lewis et al. (2012): Revealing Complexity Health Determinants Resource-poor Settings Lewis et al. (2011): Structure discovery Bayesian networks: analytical tool analysing complex animal health data","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/index.html","id":"causality","dir":"","previous_headings":"Workshops","what":"Causality:","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"4 December 2018, Beate Sick & Gilles Kratzer 1st Causality workshop talk, Bayesian Networks meet Observational data. (UZH, Switzerland)","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"abn-modeling","dir":"","previous_headings":"Workshops","what":"ABN modeling","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"07 July 2021, workshop UseR! Conference Additive Bayesian Networks Modeling. (Online) 29 March 2019, workshop SVEPM conference Multivariate analysis using Additive Bayesian Networks. (Utrecht, Netherland)","code":""},{"path":"http://r-bayesian-networks.org/index.html","id":"presentations","dir":"","previous_headings":"","what":"Presentations","title":"Modelling Multivariate Data with Additive Bayesian Networks","text":"4 October 2018, talk Nutricia (Danone). Multivariable analysis: variable model selection system epidemiology. (Utrecht, Netherland) 30 May 2018. Brown Bag Seminar ZHAW. Presentation: Bayesian Networks Learning Nutshell. (Winterthur, Switzerland)","code":""},{"path":"http://r-bayesian-networks.org/reference/AIC.abnFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print AIC of objects of class abnFit — AIC.abnFit","title":"Print AIC of objects of class abnFit — AIC.abnFit","text":"Print AIC objects class abnFit","code":""},{"path":"http://r-bayesian-networks.org/reference/AIC.abnFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print AIC of objects of class abnFit — AIC.abnFit","text":"","code":"# S3 method for abnFit AIC(object, digits = 3L, verbose = TRUE, ...)"},{"path":"http://r-bayesian-networks.org/reference/AIC.abnFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print AIC of objects of class abnFit — AIC.abnFit","text":"object Object class abnFit digits number digits results. verbose print additional output. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/BIC.abnFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print BIC of objects of class abnFit — BIC.abnFit","title":"Print BIC of objects of class abnFit — BIC.abnFit","text":"Print BIC objects class abnFit","code":""},{"path":"http://r-bayesian-networks.org/reference/BIC.abnFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print BIC of objects of class abnFit — BIC.abnFit","text":"","code":"# S3 method for abnFit BIC(object, digits = 3L, verbose = TRUE, ...)"},{"path":"http://r-bayesian-networks.org/reference/BIC.abnFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print BIC of objects of class abnFit — BIC.abnFit","text":"object Object class abnFit digits number digits results. verbose print additional output. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/Cfunctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation of C Functions — Cfunctions","title":"Documentation of C Functions — Cfunctions","text":"mainly circumvent issues R CMD check.","code":""},{"path":"http://r-bayesian-networks.org/reference/FCV.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset related to Feline calicivirus infection among cats in Switzerland. — FCV","title":"Dataset related to Feline calicivirus infection among cats in Switzerland. — FCV","text":"dataset Feline calicivirus (FCV) infection among cats Switzerland. FCV virus occurs worldwide domestic cats also exotic felids. FCV highly contagious virus major cause upper respiratory disease cat flue affects felids. complex disease caused different viral bacterial pathogens, .e., FCV, FHV-1, Mycoplasma felis, Chlamydia felis Bordetella bronchiseptica. can aggravated retrovirus infections FeLV FIV. composite dynamic makes interesting BN modeling approach. data collected September 2012 April 2013.","code":""},{"path":"http://r-bayesian-networks.org/reference/FCV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset related to Feline calicivirus infection among cats in Switzerland. — FCV","text":"","code":"FCV"},{"path":"http://r-bayesian-networks.org/reference/FCV.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset related to Feline calicivirus infection among cats in Switzerland. — FCV","text":"adapted data frame original dataset, consists 300 observations 15 variables. FCV Feline Calici Virus status (0/1). FHV_1 Feline Herpes Virus 1 status (0/1). C_felis C-felis Chlamydia felis status (0/1). M_felis Mycoplasma felis status (0/1). B_bronchiseptica B-bronchiseptica & Bordetella bronchispetica status (0/1). FeLV feline leukosis virus status (0/1). FIV feline immunodeficiency virus status (0/1). Gingivostomatitis gingivostomatitis complex status (0/1). URTD URTD complex (upper respiratory complex) (0/1). Vaccinated vaccination status (0/1). Pedigree pedigree (0/1). Outdoor outdoor access (0/1). Sex sex castrated status (M, MN, F, FS). GroupSize number cats group (counts). Age age year (continuous)\\.","code":""},{"path":"http://r-bayesian-networks.org/reference/FCV.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset related to Feline calicivirus infection among cats in Switzerland. — FCV","text":"Berger, ., Willi, B., Meli, M. L., Boretti, F. S., Hartnack, S., Dreyfus, ., ... Hofmann-Lehmann, R. (2015). Feline calicivirus respiratory pathogens cats Feline calicivirus-related symptoms clinically healthy cats Switzerland. BMC Veterinary Research, 11(1), 282.","code":""},{"path":"http://r-bayesian-networks.org/reference/abn-package.html","id":null,"dir":"Reference","previous_headings":"","what":"abn Package — abn-package","title":"abn Package — abn-package","text":"abn collection functions fitting, selecting/learning, analyzing, reporting Additive Bayesian Networks.","code":""},{"path":"http://r-bayesian-networks.org/reference/abn-package.html","id":"general-overview","dir":"Reference","previous_headings":"","what":"General overview","title":"abn Package — abn-package","text":"abn: Bayesian network modeling data analysis technique ideally suited messy, highly correlated, complex data sets. methodology somewhat distinct forms statistical modeling focus structure discovery - determining optimal graphical model describes inter-relationships underlying processes generated data. multivariate technique can used one many dependent variables. data-driven approach, opposed , rely subjective expert opinion determine variables interest inter-related (example, structural equation modeling). R package abn designed fit additive Bayesian models observational data sets. contains routines score Bayesian Networks based Bayesian information-theoretic formulation generalized linear models. equipped exact search greedy search algorithms select best network. Bayesian implementation supports random effects control one layer clustering. supports possible mixture continuous, discrete, count data inputs prior knowledge structural level. R package abn requires R package Rgraphviz work well. store outside CRAN; see ‘Examples’ code install last version. web page r-bayesian-networks.org provides case studies. See also files provided package directories inst/bootstrapping_example inst/old_vignette details.","code":""},{"path":"http://r-bayesian-networks.org/reference/abn-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"abn Package — abn-package","text":"Kratzer, Gilles, Fraser Lewis, Arianna Comin, Marta Pittavino, Reinhard Furrer. “Additive Bayesian Network Modeling R Package Abn.” Journal Statistical Software 105 (January 28, 2023): 1–41. https://doi.org/10.18637/jss.v105.i08. Kratzer, G., Lewis, F.., Comin, ., Pittavino, M. Furrer, R. (2019). \"Additive Bayesian Network Modelling R Package abn\". arXiv preprint arXiv:1911.09006. Lewis, F. ., Ward, M. P. (2013). \"Improving epidemiologic data analyses multivariate regression modeling\". Emerging themes epidemiology, 10(1), 4. Kratzer, G., Pittavino, M, Lewis, F. ., Furrer, R., (2017). \"abn: R package modelling multivariate data using additive Bayesian networks\". R package version 2.2.  https://CRAN.R-project.org/package=abn","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/abn-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"abn Package — abn-package","text":"Maintainer: Matteo Delucchi matteo.delucchi@math.uzh.ch (ORCID) Authors: Reinhard Furrer reinhard.furrer@math.uzh.ch (ORCID) Gilles Kratzer gilles.kratzer@gmail.com (ORCID) Fraser Iain Lewis fraser.iain.lewis@gmail.com (ORCID) contributors: Marta Pittavino marta.pittavino@math.uzh.ch (ORCID) [contributor] Kalina Cherneva kalinacherneva@gmail.com [contributor]","code":""},{"path":"http://r-bayesian-networks.org/reference/abn-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"abn Package — abn-package","text":"","code":"## Citations: print(citation('abn'), bibtex=TRUE) #> To cite the methodology of the R package 'abn' use: #>  #>   Kratzer G, Lewis F, Comin A, Pittavino M, Furrer R (2023). “Additive #>   Bayesian Network Modeling with the R Package abn.” _Journal of #>   Statistical Software_, *105*(8), 1-41. doi:10.18637/jss.v105.i08 #>   <https://doi.org/10.18637/jss.v105.i08>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {Additive Bayesian Network Modeling with the R Package abn}, #>     author = {Gilles Kratzer and Fraser Lewis and Arianna Comin and Marta Pittavino and Reinhard Furrer}, #>     journal = {Journal of Statistical Software}, #>     year = {2023}, #>     volume = {105}, #>     number = {8}, #>     pages = {1--41}, #>     doi = {10.18637/jss.v105.i08}, #>   } #>  #> To cite an example of a typical ABN analysis use: #>  #>   Kratzer, G., Lewis, F.I., Willi, B., Meli, M.L., Boretti, F.S., #>   Hofmann-Lehmann, R., Torgerson, P., Furrer, R. and Hartnack, S. #>   (2020). Bayesian Network Modeling Applied to Feline Calicivirus #>   Infection Among Cats in Switzerland. Frontiers in Veterinary Science, #>   7, 73 #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {Bayesian Network Modeling Applied to Feline Calicivirus Infection Among Cats in Switzerland}, #>     author = {Gilles Kratzer and Fraser Iain Lewis and Barbara Willi and Marina Meli and Felicitas Boretti and Regina Hofmann-Lehmann and Paul Torgerson and Reinhard Furrer and Sonja Hartnack}, #>     year = {2020}, #>     journal = {Frontiers in Veterinary Science}, #>   } #>  #> To cite the software implementation of the R package 'abn' use: #>  #>   Furrer, R., Kratzer, G. and Lewis, F.I. (2023). abn: Modelling #>   Multivariate Data with Additive Bayesian Networks. R package version #>   2.7-2.  https://CRAN.R-project.org/package=abn #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {abn: Modelling Multivariate Data with Additive Bayesian Networks}, #>     author = {Reinhard Furrer and Gilles Kratzer and Fraser Iain Lewis}, #>     year = {2023}, #>     note = {R package version 2.7-2}, #>     url = {https://CRAN.R-project.org/package=abn}, #>   }  ## Installing the R package Rgraphviz: # if (!requireNamespace(\"BiocManager\", quietly = TRUE)) #     install.packages(\"BiocManager\") # BiocManager::install(\"Rgraphviz\")  ## README.md in the directory `bootstrapping_example/`: # edit(file=paste0( path.package('abn'),'/bootstrapping_example/README.md'))"},{"path":"http://r-bayesian-networks.org/reference/abn.version.html","id":null,"dir":"Reference","previous_headings":"","what":"abn Version Information — abn.version","title":"abn Version Information — abn.version","text":"abn.version() provides detailed information running version abn abn components.","code":""},{"path":"http://r-bayesian-networks.org/reference/abn.version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"abn Version Information — abn.version","text":"","code":"abn.version(what = c(\"abn\", \"system\"))"},{"path":"http://r-bayesian-networks.org/reference/abn.version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"abn Version Information — abn.version","text":"detailed information version abn system (see returns).","code":""},{"path":"http://r-bayesian-networks.org/reference/abn.version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"abn Version Information — abn.version","text":"abn.version(= \"system\") list character-string components R R.version.string abn essentially abn.version$version.string GSL, JAGS, INLA version numbers thereof abn.version(= \"abn\") list character-string components status status version (e.g., \"beta\") major major version number minor minor version number year year version released month month version released day day version released version.string character string concatenating info , useful plotting, etc. abn.version list class \"simple.list\" print method.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/abn.version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"abn Version Information — abn.version","text":"","code":"abn.version()$version.string #> [1] \"abn version 3.0.6 (2024-03-17)\" if (FALSE) {   abn.version(\"system\") }"},{"path":"http://r-bayesian-networks.org/reference/adg.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset related to average daily growth performance and abattoir findings in pigs commercial production. — adg","title":"Dataset related to average daily growth performance and abattoir findings in pigs commercial production. — adg","text":"case study dataset growth performance abattoir findings pigs commercial production selected set 15 Canadian farms collected March 1987.","code":""},{"path":"http://r-bayesian-networks.org/reference/adg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset related to average daily growth performance and abattoir findings in pigs commercial production. — adg","text":"","code":"adg"},{"path":"http://r-bayesian-networks.org/reference/adg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset related to average daily growth performance and abattoir findings in pigs commercial production. — adg","text":"adapted data frame original dataset  consists 341 observations 8 variables grouping variable (farm). AR presence atrophic rhinitis. pneumS presence moderate severe pneumonia. female sex pig (1=female, 0=castrated). livdam presence liver damage (parasite-induced white spots). eggs presence fecal/gastrointestinal nematode eggs time slaughter. wormCount count nematodes small intestine time slaughter. age days elapsed birth slaughter (days). adg average daily weight gain (grams). farm farm ID.","code":""},{"path":"http://r-bayesian-networks.org/reference/adg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset related to average daily growth performance and abattoir findings in pigs commercial production. — adg","text":"using data fit additive Bayesian network, variables AR, pneumS, female, livdam, eggs considered binomial, wormcount Poisson, age adg Gaussian. variable farm can used adjust grouping.","code":""},{"path":"http://r-bayesian-networks.org/reference/adg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset related to average daily growth performance and abattoir findings in pigs commercial production. — adg","text":"Kratzer, G., Lewis, F.., Comin, ., Pittavino, M. Furrer, R. (2019). \"Additive Bayesian Network Modelling R Package abn\". arXiv preprint arXiv:1911.09006. Dohoo, Ian Robert, Wayne Martin, Henrik Stryhn. Veterinary epidemiologic research. . V413 DOHv. Charlottetown, Canada: AVC Incorporated, 2003.","code":""},{"path":"http://r-bayesian-networks.org/reference/bern_bugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Bugs code for Bernoulli response — bern_bugs","title":"Bugs code for Bernoulli response — bern_bugs","text":"Bugs model Binomial response \\(X\\) single trial: \\(X \\sim \\mathcal{B}(n=1, p) = \\mathcal{Bernoulli}(p)\\).","code":""},{"path":"http://r-bayesian-networks.org/reference/bern_bugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bugs code for Bernoulli response — bern_bugs","text":"","code":"bern_bugs(nodename, nodesintercept, parentnames, parentcoefs)  bern_bugsGroup(nodename, nodesintercept, parentnames, parentcoefs, sigma_alpha)"},{"path":"http://r-bayesian-networks.org/reference/bern_bugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bugs code for Bernoulli response — bern_bugs","text":"nodename character string response variable name. nodesintercept overall mean response. Parameter fixed-effects intercept. parentnames single character string (one parent) vector characters (multiple parent nodes) parent node (predictor variables) names. parentcoefs overall slope predictor (parent node) variable (fixed-effects). sigma_alpha -group variance. Parameter random-effects intercept.","code":""},{"path":"http://r-bayesian-networks.org/reference/bern_bugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bugs code for Bernoulli response — bern_bugs","text":"Bugs model returned stdout.","code":""},{"path":"http://r-bayesian-networks.org/reference/bern_bugs.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Bugs code for Bernoulli response — bern_bugs","text":"bern_bugsGroup(): Bugs code Bernoulli response varying intercept","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/bern_bugs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bugs code for Bernoulli response — bern_bugs","text":"","code":"bern_bugs(nodename = \"a\",           parentnames = c(\"b\", \"c\"),           nodesintercept = c(0.318077),           parentcoefs = list(\"b\"=c(b=0.3059395),                              \"c\"=c(c=0.5555))) #> a ~ dbern(p.a) # Bernoulli response #> logit(p.a) <- 0.318077 + 0.3059395*b + 0.5555*c # logistic regression"},{"path":"http://r-bayesian-networks.org/reference/build.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Control the iterations in buildScoreCache — build.control","title":"Control the iterations in buildScoreCache — build.control","text":"Allow user set restrictions buildScoreCache Bayesian MLE approach. Control function similar fit.control.","code":""},{"path":"http://r-bayesian-networks.org/reference/build.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control the iterations in buildScoreCache — build.control","text":"","code":"build.control(   method = \"bayes\",   max.mode.error = 10,   mean = 0,   prec = 0.001,   loggam.shape = 1,   loggam.inv.scale = 5e-05,   max.iters = 100,   epsabs = 1e-07,   error.verbose = FALSE,   trace = 0L,   epsabs.inner = 1e-06,   max.iters.inner = 100,   finite.step.size = 1e-07,   hessian.params = c(1e-04, 0.01),   max.iters.hessian = 10,   max.hessian.error = 0.5,   factor.brent = 100,   maxiters.hessian.brent = 100,   num.intervals.brent = 100,   n.grid = 250,   ncores = 1,   cluster.type = \"FORK\",   max.irls = 100,   tol = 1e-08,   tolPwrss = 1e-07,   check.rankX = \"message+drop.cols\",   check.scaleX = \"message+rescale\",   check.conv.grad = \"message\",   check.conv.singular = \"message\",   check.conv.hess = \"message\",   xtol_abs = 1e-06,   ftol_abs = 1e-06,   trace.mblogit = FALSE,   catcov.mblogit = \"free\",   epsilon = 1e-06,   seed = 9062019L )"},{"path":"http://r-bayesian-networks.org/reference/build.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control the iterations in buildScoreCache — build.control","text":"method character takes one two values: \"bayes\" \"mle\". Overrides method argument buildScoreCache. max.mode.error estimated modes INLA differ factor max.mode.error computed internally, results INLA replaced computed internally. force INLA always used, max.mode.error=100, force INLA never used max.mod.error=0. See also fitAbn. mean prior mean Gaussian additive terms node. INLA argument control.fixed=list(mean.intercept=...) control.fixed=list(mean=...). prec prior precision (\\(\\tau = \\frac{1}{\\sigma^2}\\)) Gaussian additive term node. INLA argument control.fixed=list(prec.intercept=...) control.fixed=list(prec=...). loggam.shape shape parameter Gamma distribution prior precision Gaussian node. INLA argument control.family=list(hyper = list(prec = list(prior=\"loggamma\",param=c(loggam.shape, loggam.inv.scale)))). loggam.inv.scale inverse scale parameter Gamma distribution prior precision Gaussian node. INLA argument control.family=list(hyper = list(prec = list(prior=\"loggamma\",param=c(loggam.shape, loggam.inv.scale)))). max.iters total number iterations allowed estimating modes Laplace approximation. passed .Call(\"fit_single_node\", ...). epsabs absolute error estimating modes Laplace approximation models random effects. Passed .Call(\"fit_single_node\", ...). error.verbose logical, additional output case errors occurring optimization. Passed .Call(\"fit_single_node\", ...). trace Non-negative integer. positive, tracing information progress \"L-BFGS-B\" optimization produced. Higher values may produce tracing information. (six levels tracing.  understand exactly see source code.). Passed .Call(\"fit_single_node\", ...). epsabs.inner absolute error maximization step (nested) Laplace approximation random effect term. Passed .Call(\"fit_single_node\", ...). max.iters.inner total number iterations maximization step nested Laplace approximation. Passed .Call(\"fit_single_node\", ...). finite.step.size suggested step length used finite difference estimation derivatives (outer) Laplace approximation estimating modes. Passed .Call(\"fit_single_node\", ...). hessian.params numeric vector giving parameters adaptive algorithm, determines optimal stepsize finite-difference estimation hessian. First entry initial guess, second entry absolute error. Passed .Call(\"fit_single_node\", ...). max.iters.hessian integer, maximum number iterations use determining optimal finite difference approximation (Nelder-Mead). Passed .Call(\"fit_single_node\", ...). max.hessian.error estimated log marginal likelihood using adaptive 5pt finite-difference rule Hessian differs max.hessian.error using adaptive 3pt rule continue minimize local error switching Brent-Dekker root bracketing method. Passed .Call(\"fit_single_node\", ...). factor.brent using Brent-Dekker root bracketing method define outer interval end points best estimate \\(h\\) (stepsize) Nelder-Mead \\(h/factor.brent,h*factor.brent)\\). Passed .Call(\"fit_single_node\", ...). maxiters.hessian.brent maximum number iterations allowed Brent-Dekker method. Passed .Call(\"fit_single_node\", ...). num.intervals.brent number initial different bracket segments try Brent-Dekker method. Passed .Call(\"fit_single_node\", ...). n.grid recompute density equally spaced grid n.grid points. ncores number cores parallelize , see ‘Details’. >0, number CPU cores used. -1 available -1 core. method=\"mle\". cluster.type type cluster used, see ?parallel::makeCluster. abn defaults \"PSOCK\" Windows \"FORK\" Unix-like systems. \"FORK\" child process started rscript_args = \"---environ\" avoid loading whole workspace child. max.irls total number iterations estimating network scores using Iterative Reweighed Least Square algorithm. DEPRECATED? tol real number giving minimal tolerance expected terminate Iterative Reweighed Least Square algorithm estimate network score. Passed irls_binomial_cpp_fast_br irls_poisson_cpp_fast. tolPwrss numeric scalar passed glmerControl - tolerance declaring convergence penalized iteratively weighted residual sum--squares step. Similar tol. check.rankX character passed lmerControl glmerControl - specifying rankMatrix(X) compared ncol(X) columns design matrix possibly dropped ensure full rank. Defaults message+drop.cols. check.scaleX character passed lmerControl glmerControl - check problematic scaling columns fixed-effect model matrix, e.g. parameters measured different scales. Defaults message+rescale. check.conv.grad character passed lmerControl glmerControl - checking gradient deviance function convergence. Defaults message can one \"ignore\" - skip test; \"warning\" - warn test fails; \"message\" - print message test fails; \"stop\" - throw error test fails. check.conv.singular character passed lmerControl glmerControl - checking singular fit, .e. one parameters boundary feasible space (example, random effects variances equal 0 correlations random effects equal +/- 1.0). Defaults message can one \"ignore\" - skip test; \"warning\" - warn test fails; \"message\" - print message test fails; \"stop\" - throw error test fails. check.conv.hess character passed lmerControl glmerControl - checking Hessian deviance function convergence. Defaults message can one \"ignore\" - skip test; \"warning\" - warn test fails; \"message\" - print message test fails; \"stop\" - throw error test fails. xtol_abs Defaults 1e-6 stop small change parameter value. method='mle', group.var=.... Default convergence tolerance fitted (g)lmer models reduced value provided default values fit. value passed optCtrl argument (g)lmer (see help lme4::convergence()). ftol_abs Defaults 1e-6 stop small change deviance. Similar xtol_abs. trace.mblogit logical indicating output produced iteration. Directly passed trace argument mclogit.control. independent verbose. catcov.mblogit Defaults \"free\" meaning restrictions covariances random effects logit equations. Set \"diagonal\" random effects pertinent different categories uncorrelated \"single\" random effect variances pertinent categories identical. epsilon Defaults 1e-8. Positive convergence tolerance \\(\\epsilon\\) directly passed control argument mclogit::mblogit mclogit.control. method='mle', group.var=.... seed non-negative integer sets seed set.seed(seed).","code":""},{"path":"http://r-bayesian-networks.org/reference/build.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control the iterations in buildScoreCache — build.control","text":"Named list according provided arguments.","code":""},{"path":"http://r-bayesian-networks.org/reference/build.control.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Control the iterations in buildScoreCache — build.control","text":"Parallelization children possible via function foreach package doParallel.  ncores=0 ncores=1 use single threaded foreach. ncores=-1 uses available cores one.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/build.control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control the iterations in buildScoreCache — build.control","text":"","code":"ctrlmle <- abn::build.control(method = \"mle\",                         ncores = 0,                         cluster.type = \"PSOCK\",                         max.irls = 100,                         tol = 10^-11,                         tolPwrss = 1e-7,                         check.rankX = \"message+drop.cols\",                         check.scaleX = \"message+rescale\",                         check.conv.grad = \"message\",                         check.conv.singular = \"message\",                         check.conv.hess = \"message\",                         xtol_abs = 1e-6,                         ftol_abs = 1e-6,                         trace.mblogit = FALSE,                         catcov.mblogit = \"free\",                         epsilon = 1e-6,                         seed = 9062019L) ctrlbayes <- abn::build.control(method = \"bayes\",                            max.mode.error = 10,                            mean = 0, prec = 0.001,                            loggam.shape = 1,                            loggam.inv.scale = 5e-05,                            max.iters = 100,                            epsabs = 1e-07,                            error.verbose = FALSE,                            epsabs.inner = 1e-06,                            max.iters.inner = 100,                            finite.step.size = 1e-07,                            hessian.params = c(1e-04, 0.01),                            max.iters.hessian = 10,                            max.hessian.error = 0.5,                            factor.brent = 100,                            maxiters.hessian.brent = 100,                            num.intervals.brent = 100,                            tol = 10^-8,                            seed = 9062019L)"},{"path":"http://r-bayesian-networks.org/reference/buildScoreCache.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a cache of goodness of fit metrics for each node in a DAG, possibly subject to user-defined restrictions — buildScoreCache","title":"Build a cache of goodness of fit metrics for each node in a DAG, possibly subject to user-defined restrictions — buildScoreCache","text":"Iterates valid parent combinations - subject ban, retain, max.parent limits - node, subset nodes, computes cache scores (AIC, BIC, log marginal likelihood). cache can used different DAG structural search algorithms.","code":""},{"path":"http://r-bayesian-networks.org/reference/buildScoreCache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a cache of goodness of fit metrics for each node in a DAG, possibly subject to user-defined restrictions — buildScoreCache","text":"","code":"buildScoreCache(data.df = NULL, data.dists = NULL, method = \"bayes\", group.var = NULL, adj.vars = NULL, cor.vars = NULL, dag.banned = NULL, dag.retained = NULL, max.parents = NULL, which.nodes = NULL, defn.res = NULL, centre = TRUE, dry.run = FALSE, control = NULL, verbose = FALSE, debugging = FALSE, ...)  buildScoreCache.bayes(   data.df = NULL,   data.dists = NULL,   group.var = NULL,   cor.vars = NULL,   dag.banned = NULL,   dag.retained = NULL,   max.parents = NULL,   which.nodes = NULL,   defn.res = NULL,   dry.run = FALSE,   centre = TRUE,   force.method = NULL,   mylist = NULL,   grouped.vars = NULL,   group.ids = NULL,   control = build.control(method = \"bayes\"),   verbose = FALSE,   debugging = FALSE )  forLoopContentBayes(   row.no = NULL,   children = NULL,   node.defn = NULL,   dag.m = NULL,   force.method = NULL,   data.df = NULL,   data.dists = NULL,   var.types = NULL,   control = NULL,   grouped.vars = NULL,   group.ids = NULL,   verbose = FALSE )  forLoopContent(   row.num,   mycache,   data.dists,   data.df.multi,   adj.vars,   data.df,   data.df.lvl,   group.var,   group.ids,   control,   n,   verbose )  buildScoreCache.mle(   data.df = NULL,   data.dists = NULL,   max.parents = NULL,   adj.vars = NULL,   cor.vars = NULL,   dag.banned = NULL,   dag.retained = NULL,   which.nodes = NULL,   centre = TRUE,   defn.res = NULL,   dry.run = FALSE,   verbose = FALSE,   debugging = FALSE,   force.method = NULL,   group.var = NULL,   grouped.vars = NULL,   group.ids = NULL,   control = build.control(method = \"mle\") )"},{"path":"http://r-bayesian-networks.org/reference/buildScoreCache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a cache of goodness of fit metrics for each node in a DAG, possibly subject to user-defined restrictions — buildScoreCache","text":"data.df data frame containing data used learning node. Binary variables must declared factors. data.dists named list giving distribution node network, see ‘Details’. method \"Bayes\" \"mle\" approach used, see ‘Details’. group.var variable name nodes fitted variable intercept mixed-effects model (\"Bayes\" \"mle\") gives column name data.df grouping variable must factor denoting group membership. adj.vars character vector giving column names data.df network score adjusted , see ‘Details’. cor.vars character vector giving column names data.df mixed model used adjust within group correlation pure adjustment (\"bayes\" ). dag.banned matrix formula statement (see ‘Details’ format) defining arcs permitted - banned - see ‘Details’ format. Note colnames rownames must set, otherwise row/column names data.df assumed. set NULL empty matrix assumed. dag.retained matrix formula statement (see ‘Details’ format) defining arcs must retained model search, see ‘Details’ format. Note colnames rownames must set, otherwise row/column names data.df assumed. set NULL empty matrix assumed. max.parents constant named list giving maximum number parents allowed, list version allows vary per node (method=\"bayes\". constant can single integer, numeric vector length variables integer variable (e.g. c(2,2)) named list values (e.g. list(\"\"=2, \"B\"=2)). .nodes vector giving column indices variables included, ignored variables included. used subset data.df. defn.res optional user-supplied list child parent combinations, see ‘Details’. centre observations Gaussian node first standardized mean zero standard deviation one, defaults TRUE. dry.run TRUE list child nodes parent combinations returned without estimation node scores (log marginal likelihoods). control list control parameters. See build.control names settable control values effect. verbose TRUE provides additional output. debugging TRUE method = 'mle' enables step -loop. ... additional arguments passed optimization. force.method \"notset\", \"INLA\" \"C\". specified buildScoreCache(control=list(max.mode.error=...)). mylist result returned check.valid.data. grouped.vars result returned check.valid.groups. group.ids result returned check.valid.groups. row.row number child-parent combination processed. children vector child node integers. node.defn child-parent combination table. dag.m Empty adjacency matrix. var.types vector numeric encoding distribution types. See get.var.types(data.dists) row.num number child-node (mostly corresponds child node index e.g. dag). mycache prepared cache. data.df.multi extended data.df one-hot-encoded multinomial variables. data.df.lvl copy original data.df. n corresponds nvars, number variables data.dists.","code":""},{"path":"http://r-bayesian-networks.org/reference/buildScoreCache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a cache of goodness of fit metrics for each node in a DAG, possibly subject to user-defined restrictions — buildScoreCache","text":"named list class abnCache. children vector child node indexes (1) corresponding columns data.df (ignoring grouping variable) node.defn matrix giving parent combination mlik log marginal likelihood value node combination. model fitted NA returned. error.code non-zero either root finding algorithm (glm nodes) maximisation algorithm (glmm nodes) terminated unusual way suggesting possible unreliable result, else finite difference hessian estimation produced error warning (glmm nodes). NULL method=\"mle\". error.code.desc textual description error.code. NULL method=\"mle\" hessian.accuracy estimate error final mlik value parent combination - absolute difference two different adaptive finite difference rules computes mlik value. NULL method=\"mle\" data.df version original data (internal use functions mostProbable). data.dists named list nodes distributions (internal use functions mostProbable). max.parents maximum number parents (internal use functions mostProbable). dag.retained matrix encoding retained arcs (internal use functions searchHeuristic). dag.banned matrix encoding banned arcs (internal use functions searchHeuristic). aic aic value node combination. model fitted NaN returned. NULL method=\"bayes\". bic bic value node combination. model fitted NaN returned. NULL method=\"bayes\". mdl mdl value node combination. model fitted NaN returned. NULL method=\"bayes\". Named vector results one child-parent combination subject row.. names : childParentCombNo row number child-parent combination node.defn table. must row number node.defn: careful buildScoreCache.bayes() run parallel! mlik marginal log-likelihood child-parent combination. error.code error code returned inla(). hessian.accuracy accuracy Hessian matrix returned inla(). used.INLA logical value indicating whether inla() used fit model. list","code":""},{"path":"http://r-bayesian-networks.org/reference/buildScoreCache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a cache of goodness of fit metrics for each node in a DAG, possibly subject to user-defined restrictions — buildScoreCache","text":"function computes cache scores based possible restrictions (maximum complexity, retained banned arcs). function similar fitAbn - see help page details type models used particular data.dists specification - rather fit single complete DAG buildScoreCache iterates different parent combinations node, creating cache scores. cache score used select optimal network function searchHeuristic mostProbable. ‘dag.banned’ ‘dag.retained’ specify arcs forced absent present DAG, respectively. provided matrix, rows represent child nodes columns parents elements value $=1$. Two different approaches implemented: Bayesian frequentist approaches. can selected using method argument.","code":""},{"path":"http://r-bayesian-networks.org/reference/buildScoreCache.html","id":"if-method-bayes-","dir":"Reference","previous_headings":"","what":"If method=\"bayes\":","title":"Build a cache of goodness of fit metrics for each node in a DAG, possibly subject to user-defined restrictions — buildScoreCache","text":"function used calculate individual node scores (log marginal likelihoods). Internal code used default numerical estimation nodes without random effects, INLA default nodes random effects. default behavior can overridden using control=list(max.mode.error=...). default max.mode.error=10, means modes estimated INLA output must within 10\\ Otherwise, internal code used rather INLA. force use INLA nodes, use max.mode.error=100, ignores check, force use internal code use max.mode.error=0. detials, see fitAbn. variable .nodes allow computation separated node, example, different CPUs using say R CMD BATCH. may useful indeed likely essential larger problems random effects. Note case, results must combined back list identical formats produced individual call buildScoreCache, comprising nodes (order columns data.df) sending search routines. Using dry.run can useful .","code":""},{"path":"http://r-bayesian-networks.org/reference/buildScoreCache.html","id":"if-method-mle-","dir":"Reference","previous_headings":"","what":"If method=\"mle\":","title":"Build a cache of goodness of fit metrics for each node in a DAG, possibly subject to user-defined restrictions — buildScoreCache","text":"function used calculate individual information-theoretic node scores. possible information-theoretic based network scores computed buildScoreCache maximum likelihood (mlik, called marginal likelihood context computed node wise), Akaike Information Criteria (aic), Bayesian Information Criteria (bic) Minimum distance Length (mdl). classical definitions metrics given Kratzer Furrer (2018). function computes cache can fed model search algorithm. numerical routines used identical fitAbn see help page details also quality assurance section r-bayesian-networks.org abn website details.","code":""},{"path":"http://r-bayesian-networks.org/reference/buildScoreCache.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Build a cache of goodness of fit metrics for each node in a DAG, possibly subject to user-defined restrictions — buildScoreCache","text":"buildScoreCache.bayes(): Fit given DAG data method=\"bayes\". forLoopContentBayes(): Internal function called buildScoreCache.bayes(). forLoopContent(): Internal function called buildScoreCache.mle(). buildScoreCache.mle(): Fit given DAG data method=\"mle\".","code":""},{"path":"http://r-bayesian-networks.org/reference/buildScoreCache.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build a cache of goodness of fit metrics for each node in a DAG, possibly subject to user-defined restrictions — buildScoreCache","text":"Kratzer, Gilles, Fraser Lewis, Arianna Comin, Marta Pittavino, Reinhard Furrer. “Additive Bayesian Network Modeling R Package Abn.” Journal Statistical Software 105 (January 28, 2023): 1–41. https://doi.org/10.18637/jss.v105.i08. Kratzer, G., Lewis, F.., Comin, ., Pittavino, M., Furrer, R. (2019). \"Additive Bayesian Network Modelling R Package abn\". arXiv:1911.09006. Kratzer, G., Furrer, R., (2018). \"Information-Theoretic Scoring Rules Learn Additive Bayesian Network Applied Epidemiology\". arXiv:1808.01126. Lewis, F. ., McCormick, B. J. J. (2012). \"Revealing complexity health determinants resource poor settings\". American Journal Epidemiology. doi:10.1093/aje/KWS183). information abn can found : r-bayesian-networks.org.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/buildScoreCache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a cache of goodness of fit metrics for each node in a DAG, possibly subject to user-defined restrictions — buildScoreCache","text":"","code":"## Simple example # Generate data N <- 1e6 mydists <- list(a=\"gaussian\",                 b=\"gaussian\",                 c=\"gaussian\") a <- rnorm(n = N, mean = 0, sd = 1) b <- 1 + 2*rnorm(n = N, mean = 5, sd = 1) c <- 2 + 1*a + 2*b + rnorm(n = N, mean = 2, sd = 1) mydf <- data.frame(\"a\" = scale(a),                    \"b\" = scale(b),                    \"c\" = scale(c))  # ABN with MLE mycache.mle <- buildScoreCache(data.df = mydf,                                data.dists = mydists,                                method = \"mle\",                             max.parents = 2) #> Loading required package: Matrix dag.mle <- mostProbable(score.cache = mycache.mle,                         max.parents = 2) #> Step1. completed max alpha_i(S) for all i and S #> Total sets g(S) to be evaluated over: 8 myfit.mle <- fitAbn(object = dag.mle,                     method = \"mle\",                     max.parents = 2) plot(myfit.mle)   if (FALSE) { # ABN with Bayes if(requireNamespace(\"INLA\", quietly = TRUE)){   # Run only if INLA is available   mycache.bayes <- buildScoreCache(data.df = mydf,                                    data.dists = mydists,                                    method = \"bayes\",                                    max.parents = 2)   dag.bayes <- mostProbable(score.cache = mycache.bayes,                             max.parents = 2)   myfit.bayes <- fitAbn(object = dag.bayes,                         method = \"bayes\",                         max.parents = 2)   plot(myfit.bayes) } # Compare MLE and Bayes with lm mymod.lm <- lm(c ~ a + b, data = mydf) summary(mymod.lm)  ################################################################################################## ## Example 1 - \"mle\" vs. \"bayes\" and the later with using the internal C routine compared to INLA ##################################################################################################  # Subset of the build-in dataset, see  ?ex0.dag.data mydat <- ex0.dag.data[,c(\"b1\",\"b2\",\"g1\",\"g2\",\"b3\",\"g3\")] ## take a subset of cols  # setup distribution list for each node mydists <- list(b1=\"binomial\", b2=\"binomial\", g1=\"gaussian\",                 g2=\"gaussian\", b3=\"binomial\", g3=\"gaussian\")  # Structural constraints ## ban arc from b2 to b1 ## always retain arc from g2 to g1 ## parent limits - can be specified for each node separately max.par <- list(\"b1\"=2, \"b2\"=2, \"g1\"=2, \"g2\"=2, \"b3\"=2, \"g3\"=2)  # now build the cache of pre-computed scores accordingly to the structural constraints res.c <- buildScoreCache(data.df=mydat,                          data.dists=mydists,                          dag.banned= ~b1|b2,                          dag.retained= ~g1|g2,                          max.parents=max.par,                          method=\"bayes\")   # repeat but using R-INLA. The mlik's should be virtually identical. # Force using of INLA build.control(max.mode.error=100) if(requireNamespace(\"INLA\", quietly = TRUE)){   res.inla <- buildScoreCache(data.df=mydat,                               data.dists=mydists,                               dag.banned= ~b1|b2, # ban arc from b2 to b1                               dag.retained= ~g1|g2, # always retain arc from g2 to g1                               max.parents=max.par,                               method=\"bayes\",                               control=build.control(max.mode.error=100))    ## comparison - very similar   difference <- res.c$mlik - res.inla$mlik   summary(difference) }  # Comparison Bayes with MLE (unconstrained): res.mle <- buildScoreCache(data.df=mydat, data.dists=mydists,                            max.parents=3, method=\"mle\") res.abn <- buildScoreCache(data.df=mydat, data.dists=mydists,                            max.parents=3, method=\"bayes\") # of course different, but same order: plot(-res.mle$bic, res.abn$mlik)  ################################################################# ## Example 2 - mle with several cores #################################################################  ## Many variables, few observations mydat <- ex0.dag.data mydists <- as.list(rep(c(\"binomial\", \"gaussian\", \"poisson\"), each=10)) names(mydists) <- names(mydat)  system.time({   res.mle1 <- buildScoreCache(data.df=mydat,                               data.dists=mydists,                               max.parents=2,                               method=\"mle\",                               control = build.control(method = \"mle\",                                                       ncores=1))}) system.time({   res.mle2 <- buildScoreCache(data.df=mydat,                               data.dists=mydists,                               max.parents=2,                               method=\"mle\",                               control = build.control(method = \"mle\",                                                       ncores=2))})  ################################################################# ## Example 3 - grouped data - random effects example e.g. glmm #################################################################  ## this data comes with abn see ?ex3.dag.data mydat <- ex3.dag.data[,c(\"b1\",\"b2\",\"b3\",\"b4\",\"b5\",\"b6\",\"b7\",                          \"b8\",\"b9\",\"b10\",\"b11\",\"b12\",\"b13\", \"group\")]  mydists <- list(b1=\"binomial\", b2=\"binomial\", b3=\"binomial\",                 b4=\"binomial\", b5=\"binomial\", b6=\"binomial\", b7=\"binomial\",                 b8=\"binomial\", b9=\"binomial\", b10=\"binomial\",b11=\"binomial\",                 b12=\"binomial\", b13=\"binomial\" ) max.par <- 2  ## in this example INLA is used as default since these are glmm nodes ## when running this at node-parent combination 71 the default accuracy check on the ## INLA modes is exceeded (default is a max. of 10 percent difference from ## modes estimated using internal code) and a message is given that internal code ## will be used in place of INLA's results.  mycache.bayes <- buildScoreCache(data.df=mydat,                                  data.dists=mydists,                                  group.var=\"group\",                                  method = \"bayes\",                                  max.parents=max.par) dag.bayes <- mostProbable(score.cache=mycache.bayes) plot(dag.bayes)  mycache.mle <- buildScoreCache(data.df=mydat,                                data.dists=mydists,                                group.var=\"group\",                                method = \"mle\",                                max.parents=max.par) dag.mle <- mostProbable(score.cache=mycache.mle) plot(dag.mle) }"},{"path":"http://r-bayesian-networks.org/reference/calc.node.inla.glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a given regression using INLA — calc.node.inla.glm","title":"Fit a given regression using INLA — calc.node.inla.glm","text":"Internal wrapper INLA called fitAbn.bayes buildScoreCache.bayes.","code":""},{"path":"http://r-bayesian-networks.org/reference/calc.node.inla.glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a given regression using INLA — calc.node.inla.glm","text":"","code":"calc.node.inla.glm(   child.loc = NULL,   dag.m.loc = NULL,   data.df.loc = NULL,   data.dists.loc = NULL,   ntrials.loc = NULL,   exposure.loc = NULL,   compute.fixed.loc = NULL,   mean.intercept.loc = NULL,   prec.intercept.loc = NULL,   mean.loc = NULL,   prec.loc = NULL,   loggam.shape.loc = NULL,   loggam.inv.scale.loc = NULL,   verbose.loc = FALSE,   nthreads = NULL )"},{"path":"http://r-bayesian-networks.org/reference/calc.node.inla.glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a given regression using INLA — calc.node.inla.glm","text":"child.loc index current child node. dag.m.loc dag matrix. data.df.loc data df, data.dists.loc list distributions. ntrials.loc rep(1,dim(data.df)[1]). exposure.loc rep(1,dim(data.df)[1]). compute.fixed.loc TRUE. mean.intercept.loc prior mean Gaussian additive terms node. INLA argument control.fixed=list(mean.intercept=...) control.fixed=list(mean=...). prec.intercept.loc prior precision Gaussian additive term node. INLA argument control.fixed=list(prec.intercept=...) control.fixed=list(prec=...). mean.loc prior mean Gaussian additive terms node. INLA argument control.fixed=list(mean.intercept=...) control.fixed=list(mean=...). mean.intercept.loc. prec.loc prior precision Gaussian additive term node. INLA argument control.fixed=list(prec.intercept=...) control.fixed=list(prec=...). prec.intercept.loc. loggam.shape.loc shape parameter Gamma distribution prior precision Gaussian node. INLA argument control.family=list(hyper = list(prec = list(prior=\"loggamma\",param=c(loggam.shape, loggam.inv.scale)))). loggam.inv.scale.loc inverse scale parameter Gamma distribution prior precision Gaussian node. INLA argument control.family=list(hyper = list(prec = list(prior=\"loggamma\",param=c(loggam.shape, loggam.inv.scale)))). verbose.loc FALSE print additional output. nthreads number threads use INLA. Default fit.control[[\"ncores\"]] build.control[[\"ncores\"]] number cores specified control defaults 1.","code":""},{"path":"http://r-bayesian-networks.org/reference/calc.node.inla.glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a given regression using INLA — calc.node.inla.glm","text":"INLA failed, FALSE error returned. Otherwise, direct output INLA returned.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/calc.node.inla.glmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a given regression using INLA — calc.node.inla.glmm","title":"Fit a given regression using INLA — calc.node.inla.glmm","text":"Internal wrapper INLA called fitAbn.bayes buildScoreCache.bayes.","code":""},{"path":"http://r-bayesian-networks.org/reference/calc.node.inla.glmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a given regression using INLA — calc.node.inla.glmm","text":"","code":"calc.node.inla.glmm(   child.loc = NULL,   dag.m.loc = NULL,   data.df.loc = NULL,   data.dists.loc = NULL,   ntrials.loc = NULL,   exposure.loc = NULL,   compute.fixed.loc = NULL,   mean.intercept.loc = NULL,   prec.intercept.loc = NULL,   mean.loc = NULL,   prec.loc = NULL,   loggam.shape.loc = NULL,   loggam.inv.scale.loc = NULL,   verbose.loc = FALSE,   nthreads = NULL )"},{"path":"http://r-bayesian-networks.org/reference/calc.node.inla.glmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a given regression using INLA — calc.node.inla.glmm","text":"child.loc index current child node. dag.m.loc dag matrix. data.df.loc data df, data.dists.loc list distributions. ntrials.loc rep(1,dim(data.df)[1]). exposure.loc rep(1,dim(data.df)[1]). compute.fixed.loc TRUE. mean.intercept.loc prior mean Gaussian additive terms node. INLA argument control.fixed=list(mean.intercept=...) control.fixed=list(mean=...). prec.intercept.loc prior precision Gaussian additive term node. INLA argument control.fixed=list(prec.intercept=...) control.fixed=list(prec=...). mean.loc prior mean Gaussian additive terms node. INLA argument control.fixed=list(mean.intercept=...) control.fixed=list(mean=...). mean.intercept.loc. prec.loc prior precision Gaussian additive term node. INLA argument control.fixed=list(prec.intercept=...) control.fixed=list(prec=...). prec.intercept.loc. loggam.shape.loc shape parameter Gamma distribution prior precision Gaussian node. INLA argument control.family=list(hyper = list(prec = list(prior=\"loggamma\",param=c(loggam.shape, loggam.inv.scale)))). loggam.inv.scale.loc inverse scale parameter Gamma distribution prior precision Gaussian node. INLA argument control.family=list(hyper = list(prec = list(prior=\"loggamma\",param=c(loggam.shape, loggam.inv.scale)))). verbose.loc FALSE print additional output. nthreads number threads use INLA. Default fit.control[[\"ncores\"]] build.control[[\"ncores\"]] number cores specified control defaults 1.","code":""},{"path":"http://r-bayesian-networks.org/reference/calc.node.inla.glmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a given regression using INLA — calc.node.inla.glmm","text":"INLA failed, FALSE error returned. Otherwise, direct output INLA returned.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/categorical_bugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Bugs code for Categorical response — categorical_bugs","title":"Bugs code for Categorical response — categorical_bugs","text":"Bugs code Categorical response","code":""},{"path":"http://r-bayesian-networks.org/reference/categorical_bugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bugs code for Categorical response — categorical_bugs","text":"","code":"categorical_bugs(   nodename,   nodesCatIdx,   parentnames,   nodesintercepts,   parentcoefs )  categorical_bugsGroup(   nodename,   nodesCatIdx,   nodesintercepts,   parentnames,   parentcoefs,   sigma,   sigma_alpha )"},{"path":"http://r-bayesian-networks.org/reference/categorical_bugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bugs code for Categorical response — categorical_bugs","text":"nodename character string response variable name. nodesCatIdx integer vector length \\(|K-1|\\) starting \\(k+1\\) (see Examples). parentnames single character string (one parent) vector characters (multiple parent nodes) parent node (predictor variables) names. nodesintercepts overall mean response. Parameter fixed-effects intercept. parentcoefs overall slope predictor (parent node) variable (fixed-effects). sigma within-group variance. Parameter random-effects residual. sigma_alpha -group variance-covariance matrix. Parameters random-effects intercept.","code":""},{"path":"http://r-bayesian-networks.org/reference/categorical_bugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bugs code for Categorical response — categorical_bugs","text":"Bugs model returned stdout.","code":""},{"path":"http://r-bayesian-networks.org/reference/categorical_bugs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bugs code for Categorical response — categorical_bugs","text":"output fitAbn method = \"mle\" based output logistic regression models fit either lm, glm, glmer, multinom, mblogit internal irls methods. use first factor level reference level. Therefore, nodesCatIdx starts index \\(2\\) \\(1\\). nodesintercepts parentcoefs refer values (Intercept) Estimate respective model output. Predictor names build keys parentcoef.","code":""},{"path":"http://r-bayesian-networks.org/reference/categorical_bugs.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Bugs code for Categorical response — categorical_bugs","text":"categorical_bugsGroup(): Bugs code Categorical response varying intercept","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/categorical_bugs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bugs code for Categorical response — categorical_bugs","text":"","code":"# A -> B # Where B is a categorical variable with 4 levels. categorical_bugs(nodename = \"b\",                  nodesCatIdx = c(2, 3, 4),                  parentnames = \"a\",                  nodesintercepts = c(2.188650, 3.133928, 3.138531),                  parentcoefs = list(\"a\"=c(a=1.686432, a=3.134161, a=5.052104))) #> b ~ dcat(p.b) # Categorical response #> p.b[1] <- phi.b[1]/sum(phi.b) # soft-max #> log(phi.b[1]) <- 0 # Reference category #> p.b[2] <- phi.b[2]/sum(phi.b) # soft-max #> log(phi.b[2]) <- 2.18865 + 1.686432*a #> p.b[3] <- phi.b[3]/sum(phi.b) # soft-max #> log(phi.b[3]) <- 3.133928 + 3.134161*a #> p.b[4] <- phi.b[4]/sum(phi.b) # soft-max #> log(phi.b[4]) <- 3.138531 + 5.052104*a"},{"path":"http://r-bayesian-networks.org/reference/check.valid.buildControls.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple check on the control parameters — check.valid.buildControls","title":"Simple check on the control parameters — check.valid.buildControls","text":"Simple check control parameters","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.buildControls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple check on the control parameters — check.valid.buildControls","text":"","code":"check.valid.buildControls(control, method = \"bayes\", verbose = FALSE)"},{"path":"http://r-bayesian-networks.org/reference/check.valid.buildControls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple check on the control parameters — check.valid.buildControls","text":"control list control arguments new parameters supplied buildScoreCache fitAbn. method \"bayes\" \"mle\" strategy argument method=... buildScoreCache fitAbn. Defaults \"bayes\". verbose TRUE additional information printed. Defaults FALSE.","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.buildControls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple check on the control parameters — check.valid.buildControls","text":"list control arguments respect method new values.","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Set of simple commonsense validity checks on the directed acyclic graph definition matrix — check.valid.dag","title":"Set of simple commonsense validity checks on the directed acyclic graph definition matrix — check.valid.dag","text":"Set simple commonsense validity checks directed acyclic graph definition matrix","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set of simple commonsense validity checks on the directed acyclic graph definition matrix — check.valid.dag","text":"","code":"check.valid.dag(   dag = NULL,   data.df = NULL,   is.ban.matrix = FALSE,   group.var = NULL )"},{"path":"http://r-bayesian-networks.org/reference/check.valid.dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set of simple commonsense validity checks on the directed acyclic graph definition matrix — check.valid.dag","text":"dag Named square matrix formula statement specifying directed acyclic graph. NULL empty network assumed. data.df data frame names corresponding variable/node names. .ban.matrix Diagonals cycles checked ban-matrices. Defaults FALSE. group.var yet implemented","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set of simple commonsense validity checks on the directed acyclic graph definition matrix — check.valid.dag","text":"dag named square matrix","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Set of simple commonsense validity checks on the data.df and data.dists arguments — check.valid.data","title":"Set of simple commonsense validity checks on the data.df and data.dists arguments — check.valid.data","text":"Set simple commonsense validity checks data.df data.dists arguments","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set of simple commonsense validity checks on the data.df and data.dists arguments — check.valid.data","text":"","code":"check.valid.data(data.df = NULL, data.dists = NULL, group.var = NULL)"},{"path":"http://r-bayesian-networks.org/reference/check.valid.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set of simple commonsense validity checks on the data.df and data.dists arguments — check.valid.data","text":"data.df data frame names corresponding variable/node names. data.dists list specifying columns distribution type. Names correspond column names values must one \"gaussian\", \"binomial\", \"poisson\", \"multinomial\". group.var yet implemented","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set of simple commonsense validity checks on the data.df and data.dists arguments — check.valid.data","text":"list sums distribution types (abbreviated) names.","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.fitControls.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple check on the control parameters — check.valid.fitControls","title":"Simple check on the control parameters — check.valid.fitControls","text":"Simple check control parameters","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.fitControls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple check on the control parameters — check.valid.fitControls","text":"","code":"check.valid.fitControls(control, method = \"bayes\", verbose = FALSE)"},{"path":"http://r-bayesian-networks.org/reference/check.valid.fitControls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple check on the control parameters — check.valid.fitControls","text":"control list control arguments new parameters supplied buildScoreCache fitAbn. method \"bayes\" \"mle\" strategy argument method=... buildScoreCache fitAbn. Defaults \"bayes\". verbose TRUE additional information printed. Defaults FALSE.","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.fitControls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple check on the control parameters — check.valid.fitControls","text":"list control arguments respect method new values.","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple check on the grouping variable — check.valid.groups","title":"Simple check on the grouping variable — check.valid.groups","text":"Simple check grouping variable","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple check on the grouping variable — check.valid.groups","text":"","code":"check.valid.groups(   group.var = NULL,   data.df = NULL,   cor.vars = NULL,   verbose = FALSE )"},{"path":"http://r-bayesian-networks.org/reference/check.valid.groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple check on the grouping variable — check.valid.groups","text":"group.var Name grouping variable. data.df data frame variables including variable specified group.var factor. cor.vars Name(s) variables grouping applied . verbose TRUE additional information printed. Defaults FALSE.","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple check on the grouping variable — check.valid.groups","text":"list data.df, indexes variables grouping applied associated group observation integer.","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Set of simple checks on the given parent limits — check.valid.parents","title":"Set of simple checks on the given parent limits — check.valid.parents","text":"Set simple checks given parent limits","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set of simple checks on the given parent limits — check.valid.parents","text":"","code":"check.valid.parents(data.df = NULL, max.parents = NULL, group.var = NULL)"},{"path":"http://r-bayesian-networks.org/reference/check.valid.parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set of simple checks on the given parent limits — check.valid.parents","text":"data.df data frame max.parents single integer one overall max parent limit. list names corresponding variable/column names data.df individual parent limits. NULL parent limit restriction(s). group.var yet implemented","code":""},{"path":"http://r-bayesian-networks.org/reference/check.valid.parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set of simple checks on the given parent limits — check.valid.parents","text":"numeric vector max number parents per variable","code":""},{"path":"http://r-bayesian-networks.org/reference/check.which.valid.nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Set of simple checks on the list given as parent limits — check.which.valid.nodes","title":"Set of simple checks on the list given as parent limits — check.which.valid.nodes","text":"Set simple checks list given parent limits","code":""},{"path":"http://r-bayesian-networks.org/reference/check.which.valid.nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set of simple checks on the list given as parent limits — check.which.valid.nodes","text":"","code":"check.which.valid.nodes(data.df = NULL, which.nodes = NULL, group.var = NULL)"},{"path":"http://r-bayesian-networks.org/reference/check.which.valid.nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set of simple checks on the list given as parent limits — check.which.valid.nodes","text":"data.df data frame .nodes vector giving column indices variables included, ignored variables included. group.var yet implemented","code":""},{"path":"http://r-bayesian-networks.org/reference/check.which.valid.nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set of simple checks on the list given as parent limits — check.which.valid.nodes","text":"integer vector column indexes valid nodes data.df","code":""},{"path":"http://r-bayesian-networks.org/reference/coef.abnFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print coefficients of objects of class abnFit — coef.abnFit","title":"Print coefficients of objects of class abnFit — coef.abnFit","text":"Print coefficients objects class abnFit","code":""},{"path":"http://r-bayesian-networks.org/reference/coef.abnFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print coefficients of objects of class abnFit — coef.abnFit","text":"","code":"# S3 method for abnFit coef(object, digits = 3L, verbose = TRUE, ...)"},{"path":"http://r-bayesian-networks.org/reference/coef.abnFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print coefficients of objects of class abnFit — coef.abnFit","text":"object Object class abnFit digits number digits results. verbose print additional output. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/compareDag.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two DAGs or EGs — compareDag","title":"Compare two DAGs or EGs — compareDag","text":"Function returns multiple graph metrics compare two DAGs essential graphs, known confusion matrix error matrix.","code":""},{"path":"http://r-bayesian-networks.org/reference/compareDag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two DAGs or EGs — compareDag","text":"","code":"compareDag(ref, test, node.names = NULL, checkDAG = TRUE)"},{"path":"http://r-bayesian-networks.org/reference/compareDag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two DAGs or EGs — compareDag","text":"ref matrix formula statement (see details format) defining reference network structure, directed acyclic graph (DAG). Note row names must set given node.names DAG given via formula statement. test matrix formula statement (see details format) defining test network structure, directed acyclic graph (DAG). Note row names must set given node.names DAG given via formula statement. node.names vector names DAGs given via formula, see details. checkDAG DAGs tested DAGs (default).","code":""},{"path":"http://r-bayesian-networks.org/reference/compareDag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two DAGs or EGs — compareDag","text":"TP True Positive TN True Negative FP False Positive FN False Negative CP Condition Positive (ref) CN Condition Negative (ref) PCP Predicted Condition Positive (test) PCN Predicted Condition Negative (test) True Positive Rate $$=\\frac{\\sum TP}{\\sum CP}$$ False Positive Rate $$=\\frac{\\sum FP}{\\sum CN}$$ Accuracy $$=\\frac{\\sum TP + \\sum TN}{Total population}$$ G-measure $$\\sqrt {{\\frac {TP}{TP+FP}}\\cdot {\\frac {TP}{TP+FN}}}$$ F1-Score $$\\frac{2 \\sum TP}{2 \\sum TP + \\sum FN + \\sum FP}$$ Positive Predictive Value $$\\frac{\\sum TP}{\\sum PCP}$$ False Ommision Rate $$\\frac{\\sum FN}{\\sum PCN}$$ Hamming-Distance Number changes needed match matrices.","code":""},{"path":"http://r-bayesian-networks.org/reference/compareDag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare two DAGs or EGs — compareDag","text":"R function returns standard Directed Acyclic Graph comparison metrics. statistical classification, metrics known confusion matrix error matrix. metrics allows visualization difference different DAGs. case comparing TRUTH learned structure two learned structures, metrics allow user estimate performance learning algorithm. order compute metrics, contingency table computed pondered difference adjacency matrices od two graphs. ref test can provided using formula statement (similar GLM input). typical formula  ~ node1|parent1:parent2 + node2:node3|parent3. formula statement start ~. example, node1 two parents (parent1 parent2). node2 node3 parent3. parents names exactly match given node.names. : separtor either children parents, | separates children (left side) parents (right side), + separates terms, . replaces variables node.names. test essential graphs (graphs) general, test DAG need switched checkDAG=FALSE. function compareEG() wrapper compareDag(, checkDAG=FALSE).","code":""},{"path":"http://r-bayesian-networks.org/reference/compareDag.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compare two DAGs or EGs — compareDag","text":"Sammut, Claude, Geoffrey . Webb. (2017). Encyclopedia machine learning data mining. Springer.","code":""},{"path":"http://r-bayesian-networks.org/reference/compareDag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two DAGs or EGs — compareDag","text":"","code":"test.m <- matrix(data = c(0,1,0,                           0,0,0,                           1,0,0), nrow = 3, ncol = 3) ref.m <- matrix(data = c(0,0,0,                          1,0,0,                          1,0,0), nrow = 3, ncol = 3)  colnames(test.m) <- rownames(test.m) <- colnames(ref.m) <- colnames(ref.m) <- c(\"a\", \"b\", \"c\")  unlist(compareDag(ref = ref.m, test = test.m)) #>              TPR              FPR         Accuracy              FDR  #>        0.5000000        0.1428571        0.7777778        0.5000000  #>        G-measure         F1-score              PPV              FOR  #>        0.5000000        2.0000000        0.5000000        0.5000000  #> Hamming-distance  #>        1.0000000"},{"path":"http://r-bayesian-networks.org/reference/compareEG.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two DAGs or EGs — compareEG","title":"Compare two DAGs or EGs — compareEG","text":"Function returns multiple graph metrics compare two DAGs essential graphs, known confusion matrix error matrix.","code":""},{"path":"http://r-bayesian-networks.org/reference/compareEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two DAGs or EGs — compareEG","text":"","code":"compareEG(ref, test)"},{"path":"http://r-bayesian-networks.org/reference/compareEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two DAGs or EGs — compareEG","text":"ref matrix formula statement (see details format) defining reference network structure, directed acyclic graph (DAG). Note row names must set given node.names DAG given via formula statement. test matrix formula statement (see details format) defining test network structure, directed acyclic graph (DAG). Note row names must set given node.names DAG given via formula statement.","code":""},{"path":"http://r-bayesian-networks.org/reference/compareEG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two DAGs or EGs — compareEG","text":"TP True Positive TN True Negative FP False Positive FN False Negative CP Condition Positive (ref) CN Condition Negative (ref) PCP Predicted Condition Positive (test) PCN Predicted Condition Negative (test) True Positive Rate $$=\\frac{\\sum TP}{\\sum CP}$$ False Positive Rate $$=\\frac{\\sum FP}{\\sum CN}$$ Accuracy $$=\\frac{\\sum TP + \\sum TN}{Total population}$$ G-measure $$\\sqrt {{\\frac {TP}{TP+FP}}\\cdot {\\frac {TP}{TP+FN}}}$$ F1-Score $$\\frac{2 \\sum TP}{2 \\sum TP + \\sum FN + \\sum FP}$$ Positive Predictive Value $$\\frac{\\sum TP}{\\sum PCP}$$ False Ommision Rate $$\\frac{\\sum FN}{\\sum PCN}$$ Hamming-Distance Number changes needed match matrices.","code":""},{"path":"http://r-bayesian-networks.org/reference/compareEG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare two DAGs or EGs — compareEG","text":"R function returns standard Directed Acyclic Graph comparison metrics. statistical classification, metrics known confusion matrix error matrix. metrics allows visualization difference different DAGs. case comparing TRUTH learned structure two learned structures, metrics allow user estimate performance learning algorithm. order compute metrics, contingency table computed pondered difference adjacency matrices od two graphs. ref test can provided using formula statement (similar GLM input). typical formula  ~ node1|parent1:parent2 + node2:node3|parent3. formula statement start ~. example, node1 two parents (parent1 parent2). node2 node3 parent3. parents names exactly match given node.names. : separtor either children parents, | separates children (left side) parents (right side), + separates terms, . replaces variables node.names. test essential graphs (graphs) general, test DAG need switched checkDAG=FALSE. function compareEG() wrapper compareDag(, checkDAG=FALSE).","code":""},{"path":"http://r-bayesian-networks.org/reference/compareEG.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compare two DAGs or EGs — compareEG","text":"Sammut, Claude, Geoffrey . Webb. (2017). Encyclopedia machine learning data mining. Springer.","code":""},{"path":"http://r-bayesian-networks.org/reference/compareEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two DAGs or EGs — compareEG","text":"","code":"test.m <- matrix(data = c(0,1,0,                           0,0,0,                           1,0,0), nrow = 3, ncol = 3) ref.m <- matrix(data = c(0,0,0,                          1,0,0,                          1,0,0), nrow = 3, ncol = 3)  colnames(test.m) <- rownames(test.m) <- colnames(ref.m) <- colnames(ref.m) <- c(\"a\", \"b\", \"c\")  unlist(compareDag(ref = ref.m, test = test.m)) #>              TPR              FPR         Accuracy              FDR  #>        0.5000000        0.1428571        0.7777778        0.5000000  #>        G-measure         F1-score              PPV              FOR  #>        0.5000000        2.0000000        0.5000000        0.5000000  #> Hamming-distance  #>        1.0000000"},{"path":"http://r-bayesian-networks.org/reference/createAbnDag.html","id":null,"dir":"Reference","previous_headings":"","what":"Make DAG of class ","title":"Make DAG of class ","text":"Make DAG class \"abnDag\"","code":""},{"path":"http://r-bayesian-networks.org/reference/createAbnDag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make DAG of class ","text":"","code":"createAbnDag( dag, data.df = NULL, data.dists = NULL, ...)"},{"path":"http://r-bayesian-networks.org/reference/createAbnDag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make DAG of class ","text":"dag matrix formula specifying DAG, see ‘Details’. data.df named dataframe. data.dists named list giving distribution node network. provided sample returned. ... arguments passed methods.","code":""},{"path":"http://r-bayesian-networks.org/reference/createAbnDag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make DAG of class ","text":"abnDag object list dag, data.df, data.dists. Create legitimate DAGs Create legitimate DAG abn format. object class abnDag containing named matrix named list giving distribution node.","code":""},{"path":"http://r-bayesian-networks.org/reference/createAbnDag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make DAG of class ","text":"object class class(abnDag) contains named matrix describing DAG possibly additional objects associated distributions nodes. dag specified formula, either data.df data.dists required . quantifier. dag specified unnamed matrix data.df data.dists missing,  lower-case letters Roman alphabet used node names.","code":""},{"path":"http://r-bayesian-networks.org/reference/createAbnDag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make DAG of class ","text":"","code":"dagFromFormula <- createAbnDag(dag = ~a+b|a,                               data.df = data.frame(\"a\"=1, \"b\"=1),                               data.dists = list(a=\"binomial\", b=\"gaussian\")) dagFromMatrix <- createAbnDag(dag = matrix(c(0,1,0,0), 2, 2),                               data.df = data.frame(\"a\"=1, \"b\"=1),                               data.dists = list(a=\"binomial\", b=\"gaussian\")) plot(dagFromMatrix)"},{"path":"http://r-bayesian-networks.org/reference/discretization.html","id":null,"dir":"Reference","previous_headings":"","what":"Discretization of a Possibly Continuous Data Frame of Random Variables based on their distribution — discretization","title":"Discretization of a Possibly Continuous Data Frame of Random Variables based on their distribution — discretization","text":"function discretizes data frame possibly continuous random variables rules discretization. discretization algorithms unsupervised univariate. See details complete list discretization rules (number state random variable also provided).","code":""},{"path":"http://r-bayesian-networks.org/reference/discretization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discretization of a Possibly Continuous Data Frame of Random Variables based on their distribution — discretization","text":"","code":"discretization(data.df = NULL,                       data.dists = NULL,                       discretization.method = \"sturges\",                       nb.states = FALSE)"},{"path":"http://r-bayesian-networks.org/reference/discretization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discretization of a Possibly Continuous Data Frame of Random Variables based on their distribution — discretization","text":"data.df data frame containing data discretize, binary multinomial variables must declared factors, others numeric vector. data frame must named. data.dists named list giving distribution node network. discretization.method character vector giving discretization method use; see details. number provided, variable discretized equal binning. nb.states logical variable select output. set TRUE list discretized data frame number state variable returned. set FALSE discretized data frame returned.","code":""},{"path":"http://r-bayesian-networks.org/reference/discretization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discretization of a Possibly Continuous Data Frame of Random Variables based on their distribution — discretization","text":"discretized data frame list containing table counts bin discretized data frame.","code":""},{"path":"http://r-bayesian-networks.org/reference/discretization.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discretization of a Possibly Continuous Data Frame of Random Variables based on their distribution — discretization","text":"fd Freedman Diaconis rule. IQR() stands interquartile range. number bins given $$\\frac{range(x) * n^{1/3}}{2 * IQR(x)}$$ Freedman Diaconis rule known less sensitive Scott's rule outlier. doane Doane's rule. number bins given $$1 + \\log_{2}{n} + \\log_{2}{1+\\frac{|g|}{\\sigma_{g}}}$$ modification Sturges' formula, attempts improve performance non-normal data. sqrt number bins given : $$\\sqrt(n)$$ cencov Cencov's rule. number bins given : $$n^{1/3}$$ rice Rice' rule. number bins given : $$2 n^{1/3}$$ terrell-scott Terrell-Scott's rule. number bins given : $$(2 n)^{1/3}$$ known Cencov, Rice, Terrell-Scott rules -estimates k, compared rules due simplicity. sturges Sturges's rule. number bins given : $$1 + \\log_2(n)$$ scott Scott's rule. number bins given : $$range(x) / \\sigma(x) n^{-1/3}$$","code":""},{"path":"http://r-bayesian-networks.org/reference/discretization.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Discretization of a Possibly Continuous Data Frame of Random Variables based on their distribution — discretization","text":"Garcia, S., et al.  (2013). survey discretization techniques: Taxonomy empirical analysis supervised learning. IEEE Transactions Knowledge Data Engineering, 25.4, 734-750. Cebeci, Z. Yildiz, F. (2017). Unsupervised Discretization Continuous Variables Chicken Egg Quality Traits Dataset. Turkish Journal Agriculture-Food Science Technology, 5.4, 315-320.","code":""},{"path":"http://r-bayesian-networks.org/reference/discretization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discretization of a Possibly Continuous Data Frame of Random Variables based on their distribution — discretization","text":"","code":"## Generate random variable rv <- rnorm(n = 100, mean = 5, sd = 2) dist <- list(\"gaussian\") names(dist) <- c(\"rv\")  ## Compute the entropy through discretization entropyData(freqs.table = discretization(data.df = rv, data.dists = dist, discretization.method = \"sturges\", nb.states = FALSE)) #> [1] 2.578973"},{"path":"http://r-bayesian-networks.org/reference/dot-onAttach.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints start up message — .onAttach","title":"Prints start up message — .onAttach","text":"Prints start message","code":""},{"path":"http://r-bayesian-networks.org/reference/dot-onAttach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints start up message — .onAttach","text":"","code":".onAttach(lib, pkg)"},{"path":"http://r-bayesian-networks.org/reference/dot-onAttach.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prints start up message — .onAttach","text":"","code":"library(abn)"},{"path":"http://r-bayesian-networks.org/reference/entropyData.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes an Empirical Estimation of the Entropy from a Table of Counts — entropyData","title":"Computes an Empirical Estimation of the Entropy from a Table of Counts — entropyData","text":"function empirically estimates Shannon entropy table counts using observed frequencies.","code":""},{"path":"http://r-bayesian-networks.org/reference/entropyData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes an Empirical Estimation of the Entropy from a Table of Counts — entropyData","text":"","code":"entropyData(freqs.table)"},{"path":"http://r-bayesian-networks.org/reference/entropyData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes an Empirical Estimation of the Entropy from a Table of Counts — entropyData","text":"freqs.table table counts.","code":""},{"path":"http://r-bayesian-networks.org/reference/entropyData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes an Empirical Estimation of the Entropy from a Table of Counts — entropyData","text":"Shannon's entropy estimate natural logarithm scale.","code":""},{"path":"http://r-bayesian-networks.org/reference/entropyData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes an Empirical Estimation of the Entropy from a Table of Counts — entropyData","text":"general concept entropy defined probability distributions. entropyData() function estimates empirical entropy data. probability estimated data using frequency tables. estimates plug-definition entropy return -called empirical entropy. common known problem empirical entropy estimations biased due sampling noise. also known bias decrease sample size increases.","code":""},{"path":"http://r-bayesian-networks.org/reference/entropyData.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Computes an Empirical Estimation of the Entropy from a Table of Counts — entropyData","text":"Cover, Thomas M, Joy Thomas. (2012). \"Elements Information Theory\". John Wiley & Sons.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/entropyData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes an Empirical Estimation of the Entropy from a Table of Counts — entropyData","text":"","code":"## Generate random variable rv <- rnorm(n = 100, mean = 5, sd = 2) dist <- list(\"gaussian\") names(dist) <- c(\"rv\")  ## Compute the entropy through discretization entropyData(freqs.table = discretization(data.df = rv, data.dists = dist, discretization.method = \"sturges\", nb.states = FALSE)) #> [1] 2.695883"},{"path":"http://r-bayesian-networks.org/reference/essentialGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the essential graph — essentialGraph","title":"Construct the essential graph — essentialGraph","text":"Constructs different versions essential graph given DAG. External function computes essential graph dag Minimal PDAG: directed edges participate v-structure Completed PDAG: directed edge corresponds compelled edge, every undirected edge corresponds reversible edge","code":""},{"path":"http://r-bayesian-networks.org/reference/essentialGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the essential graph — essentialGraph","text":"","code":"essentialGraph(dag, node.names = NULL, PDAG = \"minimal\")"},{"path":"http://r-bayesian-networks.org/reference/essentialGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the essential graph — essentialGraph","text":"dag matrix formula statement (see ‘Details’ format) defining network structure, directed acyclic graph (DAG). node.names vector names DAG given via formula, see ‘Details’. PDAG character value can : minimal complete, see ‘Details’.","code":""},{"path":"http://r-bayesian-networks.org/reference/essentialGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the essential graph — essentialGraph","text":"matrix giving PDAG.","code":""},{"path":"http://r-bayesian-networks.org/reference/essentialGraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct the essential graph — essentialGraph","text":"function returns essential graph DAG, aka acyclic partially directed graph (PDAG). can useful learning procedure defined Markov class equivalence. minimal PDAG defined directed edges participate v-structure. Whereas completed PDAG: every directed edge corresponds compelled edge, every undirected edge corresponds reversible edge. dag can provided using formula statement (similar glm). typical formula  ~ node1|parent1:parent2 + node2:node3|parent3. formula statement start ~. example, node1 two parents (parent1 parent2). node2 node3 parent3. parents names exactly match given node.names. : separator either children parents, | separates children (left side) parents (right side), + separates terms, . replaces variables node.names.","code":""},{"path":"http://r-bayesian-networks.org/reference/essentialGraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Construct the essential graph — essentialGraph","text":"West, D. B. (2001). Introduction Graph Theory. Vol. 2. Upper Saddle River: Prentice Hall. Chickering, D. M. (2013) Transformational Characterization Equivalent Bayesian Network Structures, arXiv:1302.4938.","code":""},{"path":"http://r-bayesian-networks.org/reference/essentialGraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct the essential graph — essentialGraph","text":"","code":"dag <- matrix(c(0,0,0, 1,0,0, 1,1,0), nrow = 3, ncol = 3) dist <- list(a=\"gaussian\", b=\"gaussian\", c=\"gaussian\") colnames(dag) <- rownames(dag) <- names(dist)  essentialGraph(dag) #>   a b c #> a 0 1 1 #> b 0 0 1 #> c 0 1 0"},{"path":"http://r-bayesian-networks.org/reference/eval.across.grid.html","id":null,"dir":"Reference","previous_headings":"","what":"function to get marginal across an equal grid — eval.across.grid","title":"function to get marginal across an equal grid — eval.across.grid","text":"function get marginal across equal grid","code":""},{"path":"http://r-bayesian-networks.org/reference/eval.across.grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to get marginal across an equal grid — eval.across.grid","text":"","code":"eval.across.grid(mylist, n.grid, single)"},{"path":"http://r-bayesian-networks.org/reference/eval.across.grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to get marginal across an equal grid — eval.across.grid","text":"mylist list matrices two cols x, y n.grid grid size single NULL TRUE single node parameter","code":""},{"path":"http://r-bayesian-networks.org/reference/eval.across.grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to get marginal across an equal grid — eval.across.grid","text":"list","code":""},{"path":"http://r-bayesian-networks.org/reference/ex0.dag.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic validation data set for use with abn library examples — ex0.dag.data","title":"Synthetic validation data set for use with abn library examples — ex0.dag.data","text":"300 observations simulated DAG 10 binary variables, 10 Gaussian variables 10 poisson variables.","code":""},{"path":"http://r-bayesian-networks.org/reference/ex0.dag.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic validation data set for use with abn library examples — ex0.dag.data","text":"","code":"ex0.dag.data"},{"path":"http://r-bayesian-networks.org/reference/ex0.dag.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synthetic validation data set for use with abn library examples — ex0.dag.data","text":"data frame, binary variables factors. relevant formulas given (note give parameter estimates just form relationships, e.g. logit()=1 means logit link function comprises intercept term). b1 binary, logit()=1 b2 binary, logit()=1 b3 binary, logit()=1 b4 binary, logit()=1 b5 binary, logit()=1 b6 binary, logit()=1 b7 binary, logit()=1 b8 binary, logit()=1 b9 binary, logit()=1 b10 binary, logit()=1 g1 gaussian, identity()=1 g2 gaussian, identity()=1 g3 gaussian, identity()=1 g4 gaussian, identity()=1 g5 gaussian, identity()=1 g6 gaussian, identity()=1 g7 gaussian, identity()=1 g8 gaussian, identity()=1 g9 gaussian, identity()=1 g10 gaussian, identity()=1 p1 poisson, log()=1 p2 poisson, log()=1 p3 poisson, log()=1 p4 poisson, log()=1 p5 poisson, log()=1 p6 poisson, log()=1 p7 poisson, log()=1 p8 poisson, log()=1 p9 poisson, log()=1 p10 poisson, log()=1","code":""},{"path":"http://r-bayesian-networks.org/reference/ex0.dag.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthetic validation data set for use with abn library examples — ex0.dag.data","text":"","code":"if (FALSE) { ## The dataset was (essentially) generated using the following code: datasize <- 300 tmp <- c(rep(\"y\", as.integer(datasize/2)), rep(\"n\", as.integer(datasize/2))) set.seed(1)  ex0.dag.data <- data.frame(b1=sample(tmp, size=datasize, replace=TRUE),                            b2=sample(tmp, size=datasize, replace=TRUE),                            b3=sample(tmp, size=datasize, replace=TRUE),                            b4=sample(tmp, size=datasize, replace=TRUE),                            b5=sample(tmp, size=datasize, replace=TRUE),                            b6=sample(tmp, size=datasize, replace=TRUE),                            b7=sample(tmp, size=datasize, replace=TRUE),                            b8=sample(tmp, size=datasize, replace=TRUE),                            b9=sample(tmp, size=datasize, replace=TRUE),                            b10=sample(tmp, size=datasize, replace=TRUE),                            g1=rnorm(datasize, mean=0,sd=1),                            g2=rnorm(datasize, mean=0,sd=1),                            g3=rnorm(datasize, mean=0,sd=1),                            g4=rnorm(datasize, mean=0,sd=1),                            g5=rnorm(datasize, mean=0,sd=1),                            g6=rnorm(datasize, mean=0,sd=1),                            g7=rnorm(datasize, mean=0,sd=1),                            g8=rnorm(datasize, mean=0,sd=1),                            g9=rnorm(datasize, mean=0,sd=1),                            g10=rnorm(datasize, mean=0,sd=1),                            p1=rpois(datasize, lambda=10),                            p2=rpois(datasize, lambda=10),                            p3=rpois(datasize, lambda=10),                            p4=rpois(datasize, lambda=10),                            p5=rpois(datasize, lambda=10),                            p6=rpois(datasize, lambda=10),                            p7=rpois(datasize, lambda=10),                            p8=rpois(datasize, lambda=10),                            p9=rpois(datasize, lambda=10),                            p10=rpois(datasize, lambda=10)) }"},{"path":"http://r-bayesian-networks.org/reference/ex1.dag.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic validation data set for use with abn library examples — ex1.dag.data","title":"Synthetic validation data set for use with abn library examples — ex1.dag.data","text":"10000 observations simulated DAG 10 variables Poisson, Bernoulli Gaussian distributions.","code":""},{"path":"http://r-bayesian-networks.org/reference/ex1.dag.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic validation data set for use with abn library examples — ex1.dag.data","text":"","code":"ex1.dag.data"},{"path":"http://r-bayesian-networks.org/reference/ex1.dag.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synthetic validation data set for use with abn library examples — ex1.dag.data","text":"data frame, binary variables factors. relevant formulas given (note give parameter estimates just form relationships, like glm(), e.g. logit()=1+p1 means logit link function comprises intercept term term involving p1). b1 binary, logit()=1 p1 poisson, log()=1 g1 gaussian, identity()=1 b2 binary, logit()=1 p2 poisson, log()=1+b1+p1 b3 binary, logit()=1+b1+g1+b2 g2 gaussian, identify()=1+p1+g1+b2 b4 binary, logit()=1+g1+p2 b5 binary, logit()=1+g1+g2 g3 gaussian, identity()=1+g1+b2","code":""},{"path":"http://r-bayesian-networks.org/reference/ex1.dag.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthetic validation data set for use with abn library examples — ex1.dag.data","text":"","code":"## The data is one realisation from the the underlying DAG: ex1.true.dag <- matrix(data=c(   0,0,0,0,0,0,0,0,0,0,   0,0,0,0,0,0,0,0,0,0,   0,0,0,0,0,0,0,0,0,0,   0,0,0,0,0,0,0,0,0,0,   1,1,0,0,0,0,0,0,0,0,   1,0,1,1,0,0,0,0,0,0,   0,1,1,1,0,0,0,0,0,0,   0,0,1,0,1,0,0,0,0,0,   0,0,1,0,0,0,1,0,0,0,   0,0,1,1,0,0,0,0,0,0), ncol=10, byrow=TRUE)  colnames(ex1.true.dag) <- rownames(ex1.true.dag) <-   c(\"b1\",\"p1\",\"g1\",\"b2\",\"p2\",\"b3\",\"g2\",\"b4\",\"b5\",\"g3\")"},{"path":"http://r-bayesian-networks.org/reference/ex2.dag.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic validation data set for use with abn library examples — ex2.dag.data","title":"Synthetic validation data set for use with abn library examples — ex2.dag.data","text":"10000 observations simulated DAG 18 variables three sets Poisson, Bernoulli Gaussian distributions.","code":""},{"path":"http://r-bayesian-networks.org/reference/ex2.dag.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic validation data set for use with abn library examples — ex2.dag.data","text":"","code":"ex2.dag.data"},{"path":"http://r-bayesian-networks.org/reference/ex2.dag.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synthetic validation data set for use with abn library examples — ex2.dag.data","text":"data frame, binary variables factors. relevant formulas given (note give parameter estimates just form relationships, e.g. logit()=1 means logit link function comprises intercept term). b1 binary,logit()=1+g1+b2+b3+p3+b4+g4+b5 g1 gaussian,identity()=1 p1 poisson,log()=1+g6 b2 binary,logit()=1+p3+b4+p6 g2 gaussian,identify()=1+b2 p2 poisson,log()=1+b2 b3 binary,logit()=1+g1+g2+p2+g3+p3+g4 g3 gaussian,identify()=1+g1+p3+b4 p3 poisson,log()=1 b4 binary,logit()=1+g1+p3+p5 g4 gaussian,identify()=1+b4; p4 poisson,log()=1+g1+b2+g2+b5 b5 binary,logit()=1+b2+g2+b3+p3+g4 g5 gaussian,identify()=1 p5 poisson,log()=1+g1+g5+b6+g6 b6 binary,logit()=1 g6 gaussian,identify()=1 p6 poisson,log()=1+g5","code":""},{"path":"http://r-bayesian-networks.org/reference/ex2.dag.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthetic validation data set for use with abn library examples — ex2.dag.data","text":"","code":"## The true underlying stochastic model has DAG - this data is a single realisation. ex2.true.dag <- matrix(data = c(   0,1,0,1,0,0,1,0,1,1,1,0,1,0,0,0,0,0,   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,   0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,   0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   0,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,   0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,   0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,   0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,   0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,   0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0 ), ncol = 18, byrow = TRUE)  colnames(ex2.true.dag) <- rownames(ex2.true.dag) <- c(\"b1\",\"g1\",\"p1\",\"b2\",                                                       \"g2\",\"p2\",\"b3\",\"g3\",                                                       \"p3\",\"b4\",\"g4\",\"p4\",                                                       \"b5\",\"g5\",\"p5\",\"b6\",                                                       \"g6\",\"p6\")"},{"path":"http://r-bayesian-networks.org/reference/ex3.dag.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation data set for use with abn library examples — ex3.dag.data","title":"Validation data set for use with abn library examples — ex3.dag.data","text":"1000 observations across 13 binary variables one grouping variable. Real (anonymised) data unknown structure.","code":""},{"path":"http://r-bayesian-networks.org/reference/ex3.dag.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation data set for use with abn library examples — ex3.dag.data","text":"","code":"ex3.dag.data"},{"path":"http://r-bayesian-networks.org/reference/ex3.dag.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Validation data set for use with abn library examples — ex3.dag.data","text":"data frame 14 columns, b1,b2,...,b13 binary variables encoded factors group factor 100 factors  defining sampling groups (10 observations ).","code":""},{"path":"http://r-bayesian-networks.org/reference/ex4.dag.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Valdiation data set for use with abn library examples — ex4.dag.data","title":"Valdiation data set for use with abn library examples — ex4.dag.data","text":"2000 observations across 10 binary variables one grouping variable. Real (anonymised) data unknown structure.","code":""},{"path":"http://r-bayesian-networks.org/reference/ex4.dag.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valdiation data set for use with abn library examples — ex4.dag.data","text":"","code":"ex4.dag.data"},{"path":"http://r-bayesian-networks.org/reference/ex4.dag.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Valdiation data set for use with abn library examples — ex4.dag.data","text":"data frame eleven columns: group factor 85 levels defining sampling groups; b1,...,b10 binary variables encoded factors.","code":""},{"path":"http://r-bayesian-networks.org/reference/ex5.dag.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Valdiation data set for use with abn library examples — ex5.dag.data","title":"Valdiation data set for use with abn library examples — ex5.dag.data","text":"434 observations across 18 variables, 6 binary 12 continuous, one grouping variable. Real (anonymised) data unknown structure.","code":""},{"path":"http://r-bayesian-networks.org/reference/ex5.dag.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valdiation data set for use with abn library examples — ex5.dag.data","text":"","code":"ex5.dag.data"},{"path":"http://r-bayesian-networks.org/reference/ex5.dag.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Valdiation data set for use with abn library examples — ex5.dag.data","text":"data frame 19 columns: b1,...,b6 binary variables, encoded factors; g1,...,g12 continuous variables. Finally, column group defines sampling groups (encoded factor well).","code":""},{"path":"http://r-bayesian-networks.org/reference/ex6.dag.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Valdiation data set for use with abn library examples — ex6.dag.data","title":"Valdiation data set for use with abn library examples — ex6.dag.data","text":"800 observations across 8 variables, 1 count, 2 binary 4 continuous, 1 grouping variable. Real (anonymised) data unknown structure.","code":""},{"path":"http://r-bayesian-networks.org/reference/ex6.dag.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valdiation data set for use with abn library examples — ex6.dag.data","text":"","code":"ex6.dag.data"},{"path":"http://r-bayesian-networks.org/reference/ex6.dag.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Valdiation data set for use with abn library examples — ex6.dag.data","text":"data frame eight columns. Binary variables factors p1 count g1 continuous g2 continuous b1 binary b2 binary g3 continuous g4 continuous group factor,defines sampling groups","code":""},{"path":"http://r-bayesian-networks.org/reference/ex7.dag.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Valdiation data set for use with abn library examples — ex7.dag.data","title":"Valdiation data set for use with abn library examples — ex7.dag.data","text":"10648 observations across 3 variables, 2 binary 1 grouping variable. Real (anonymised) data unknown structure.","code":""},{"path":"http://r-bayesian-networks.org/reference/ex7.dag.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valdiation data set for use with abn library examples — ex7.dag.data","text":"","code":"ex7.dag.data"},{"path":"http://r-bayesian-networks.org/reference/ex7.dag.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Valdiation data set for use with abn library examples — ex7.dag.data","text":"data frame, binary variables factors b1 binary b2 binary group factor, defines sampling groups","code":""},{"path":"http://r-bayesian-networks.org/reference/expit.html","id":null,"dir":"Reference","previous_headings":"","what":"expit of proportions — expit","title":"expit of proportions — expit","text":"See also C implementation ?abn::expit_cpp().","code":""},{"path":"http://r-bayesian-networks.org/reference/expit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expit of proportions — expit","text":"","code":"expit(x)"},{"path":"http://r-bayesian-networks.org/reference/expit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expit of proportions — expit","text":"x numeric values [0,1].","code":""},{"path":"http://r-bayesian-networks.org/reference/expit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"expit of proportions — expit","text":"numeric vector length x.","code":""},{"path":"http://r-bayesian-networks.org/reference/expit_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"expit function — expit_cpp","title":"expit function — expit_cpp","text":"transform x either via logit, expit.","code":""},{"path":"http://r-bayesian-networks.org/reference/expit_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expit function — expit_cpp","text":"","code":"expit_cpp(x)"},{"path":"http://r-bayesian-networks.org/reference/expit_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expit function — expit_cpp","text":"x numeric vector","code":""},{"path":"http://r-bayesian-networks.org/reference/factorial.html","id":null,"dir":"Reference","previous_headings":"","what":"Factorial — factorial","title":"Factorial — factorial","text":"Calculate factorial C##","code":""},{"path":"http://r-bayesian-networks.org/reference/factorial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factorial — factorial","text":"","code":"factorial(n)"},{"path":"http://r-bayesian-networks.org/reference/factorial_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Factorial — factorial_fast","title":"Fast Factorial — factorial_fast","text":"Calculate factorial C##","code":""},{"path":"http://r-bayesian-networks.org/reference/factorial_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Factorial — factorial_fast","text":"","code":"factorial_fast(n)"},{"path":"http://r-bayesian-networks.org/reference/family.abnFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print family of objects of class abnFit — family.abnFit","title":"Print family of objects of class abnFit — family.abnFit","text":"Print family objects class abnFit","code":""},{"path":"http://r-bayesian-networks.org/reference/family.abnFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print family of objects of class abnFit — family.abnFit","text":"","code":"# S3 method for abnFit family(object, ...)"},{"path":"http://r-bayesian-networks.org/reference/family.abnFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print family of objects of class abnFit — family.abnFit","text":"object Object class abnFit ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/find.next.left.x.html","id":null,"dir":"Reference","previous_headings":"","what":"Find next X evaluation Point — find.next.left.x","title":"Find next X evaluation Point — find.next.left.x","text":"Attempt find next x evaluation point using spline extrapolation traversing left mode.","code":""},{"path":"http://r-bayesian-networks.org/reference/find.next.left.x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find next X evaluation Point — find.next.left.x","text":"","code":"find.next.left.x(mat.xy, g.max, g.factor, x.delta, max.fact.delta)  find.next.right.x(mat.xy, g.max, g.factor, x.delta, max.fact.delta)"},{"path":"http://r-bayesian-networks.org/reference/find.next.left.x.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find next X evaluation Point — find.next.left.x","text":"mat.xy matrix g.max integer. See Details. g.factor integer. See Details. x.delta integer. See Details. max.fact.delta integer. See Details.","code":""},{"path":"http://r-bayesian-networks.org/reference/find.next.left.x.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find next X evaluation Point — find.next.left.x","text":"integer","code":""},{"path":"http://r-bayesian-networks.org/reference/find.next.left.x.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find next X evaluation Point — find.next.left.x","text":"new x point factor max.fact.delta (e.g. 0.2) last evaluated point stop cat(\"evaluating node \",nodeid,\": parameter:\",paramid,\" betafixed=\",betafixed,\" gvalue=\",gvalue,\"\\n\",sep=\"\"); find next x value left differs max. gvalue least factor g.factor, searching step sizes x.delta subject constraint move max.fact.delta*last.x evaluate . Avoids big steps.","code":""},{"path":"http://r-bayesian-networks.org/reference/find.next.left.x.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Find next X evaluation Point — find.next.left.x","text":"find.next.right.x(): Attempt find next x evaluation point using spline extrapolation traversing right mode.","code":""},{"path":"http://r-bayesian-networks.org/reference/fit.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Control the iterations in fitAbn — fit.control","title":"Control the iterations in fitAbn — fit.control","text":"Allow user set restrictions fitAbn Bayesian MLE approach. Control function similar build.control.","code":""},{"path":"http://r-bayesian-networks.org/reference/fit.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control the iterations in fitAbn — fit.control","text":"","code":"fit.control(   method = \"bayes\",   max.mode.error = 10,   mean = 0,   prec = 0.001,   loggam.shape = 1,   loggam.inv.scale = 5e-05,   max.iters = 100,   epsabs = 1e-07,   error.verbose = FALSE,   trace = 0L,   epsabs.inner = 1e-06,   max.iters.inner = 100,   finite.step.size = 1e-07,   hessian.params = c(1e-04, 0.01),   max.iters.hessian = 10,   max.hessian.error = 1e-04,   factor.brent = 100,   maxiters.hessian.brent = 10,   num.intervals.brent = 100,   min.pdf = 0.001,   n.grid = 250,   std.area = TRUE,   marginal.quantiles = c(0.025, 0.25, 0.5, 0.75, 0.975),   max.grid.iter = 1000,   marginal.node = NULL,   marginal.param = NULL,   variate.vec = NULL,   ncores = 1,   cluster.type = \"FORK\",   max.irls = 100,   tol = 1e-11,   tolPwrss = 1e-07,   check.rankX = \"message+drop.cols\",   check.scaleX = \"message+rescale\",   check.conv.grad = \"message\",   check.conv.singular = \"message\",   check.conv.hess = \"message\",   xtol_abs = 1e-06,   ftol_abs = 1e-06,   trace.mblogit = FALSE,   catcov.mblogit = \"free\",   epsilon = 1e-06,   seed = 9062019L )"},{"path":"http://r-bayesian-networks.org/reference/fit.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control the iterations in fitAbn — fit.control","text":"method character takes one two values: \"bayes\" \"mle\". Overrides method argument buildScoreCache. max.mode.error estimated modes INLA differ factor max.mode.error computed internally, results INLA replaced computed internally. force INLA always used, max.mode.error=100, force INLA never used max.mod.error=0. See also fitAbn. mean prior mean Gaussian additive terms node. INLA argument control.fixed=list(mean.intercept=...) control.fixed=list(mean=...). prec prior precision (\\(\\tau = \\frac{1}{\\sigma^2}\\)) Gaussian additive term node. INLA argument control.fixed=list(prec.intercept=...) control.fixed=list(prec=...). loggam.shape shape parameter Gamma distribution prior precision Gaussian node. INLA argument control.family=list(hyper = list(prec = list(prior=\"loggamma\",param=c(loggam.shape, loggam.inv.scale)))). loggam.inv.scale inverse scale parameter Gamma distribution prior precision Gaussian node. INLA argument control.family=list(hyper = list(prec = list(prior=\"loggamma\",param=c(loggam.shape, loggam.inv.scale)))). max.iters total number iterations allowed estimating modes Laplace approximation. passed .Call(\"fit_single_node\", ...). epsabs absolute error estimating modes Laplace approximation models random effects. Passed .Call(\"fit_single_node\", ...). error.verbose logical, additional output case errors occurring optimization. Passed .Call(\"fit_single_node\", ...). trace Non-negative integer. positive, tracing information progress \"L-BFGS-B\" optimization produced. Higher values may produce tracing information. (six levels tracing.  understand exactly see source code.). Passed .Call(\"fit_single_node\", ...). epsabs.inner absolute error maximization step (nested) Laplace approximation random effect term. Passed .Call(\"fit_single_node\", ...). max.iters.inner total number iterations maximization step nested Laplace approximation. Passed .Call(\"fit_single_node\", ...). finite.step.size suggested step length used finite difference estimation derivatives (outer) Laplace approximation estimating modes. Passed .Call(\"fit_single_node\", ...). hessian.params numeric vector giving parameters adaptive algorithm, determines optimal stepsize finite-difference estimation hessian. First entry initial guess, second entry absolute error. Passed .Call(\"fit_single_node\", ...). max.iters.hessian integer, maximum number iterations use determining optimal finite difference approximation (Nelder-Mead). Passed .Call(\"fit_single_node\", ...). max.hessian.error estimated log marginal likelihood using adaptive 5pt finite-difference rule Hessian differs max.hessian.error using adaptive 3pt rule continue minimize local error switching Brent-Dekker root bracketing method. Passed .Call(\"fit_single_node\", ...). factor.brent using Brent-Dekker root bracketing method define outer interval end points best estimate \\(h\\) (stepsize) Nelder-Mead \\(h/factor.brent,h*factor.brent)\\). Passed .Call(\"fit_single_node\", ...). maxiters.hessian.brent maximum number iterations allowed Brent-Dekker method. Passed .Call(\"fit_single_node\", ...). num.intervals.brent number initial different bracket segments try Brent-Dekker method. Passed .Call(\"fit_single_node\", ...). min.pdf value posterior density function stop estimation used computing marginals, see details. n.grid recompute density equally spaced grid n.grid points. std.area logical, area estimated posterior density standardized exactly one, useful error checking. marginal.quantiles vector giving quantiles compute posterior marginal distribution . max.grid.iter gives number grid points estimate posterior density explicitly specifying grid used avoid excessively long computation. marginal.node used conjunction marginal.param allow bespoke estimate marginal density specific grid. value 1 number nodes. marginal.param used conjunction marginal.node. value 1 intercept, see modes entry results appropriate number. variate.vec vector containing places evaluate posterior marginal density, must supplied marginal.node null. ncores number cores parallelize , see ‘Details’. >0, number CPU cores used. -1 available -1 core. method=\"mle\". cluster.type type cluster used, see ?parallel::makeCluster. abn defaults \"PSOCK\" Windows \"FORK\" Unix-like systems. \"FORK\" child process started rscript_args = \"---environ\" avoid loading whole workspace child. max.irls total number iterations estimating network scores using Iterative Reweighed Least Square algorithm. DEPRECATED? tol real number giving minimal tolerance expected terminate Iterative Reweighed Least Square algorithm estimate network score. Passed irls_binomial_cpp_fast_br irls_poisson_cpp_fast. tolPwrss numeric scalar passed glmerControl - tolerance declaring convergence penalized iteratively weighted residual sum--squares step. Similar tol. check.rankX character passed lmerControl glmerControl - specifying rankMatrix(X) compared ncol(X) columns design matrix possibly dropped ensure full rank. Defaults message+drop.cols. check.scaleX character passed lmerControl glmerControl - check problematic scaling columns fixed-effect model matrix, e.g. parameters measured different scales. Defaults message+rescale. check.conv.grad character passed lmerControl glmerControl - checking gradient deviance function convergence. Defaults message can one \"ignore\" - skip test; \"warning\" - warn test fails; \"message\" - print message test fails; \"stop\" - throw error test fails. check.conv.singular character passed lmerControl glmerControl - checking singular fit, .e. one parameters boundary feasible space (example, random effects variances equal 0 correlations random effects equal +/- 1.0). Defaults message can one \"ignore\" - skip test; \"warning\" - warn test fails; \"message\" - print message test fails; \"stop\" - throw error test fails. check.conv.hess character passed lmerControl glmerControl - checking Hessian deviance function convergence. Defaults message can one \"ignore\" - skip test; \"warning\" - warn test fails; \"message\" - print message test fails; \"stop\" - throw error test fails. xtol_abs Defaults 1e-6 stop small change parameter value. method='mle', group.var=.... Default convergence tolerance fitted (g)lmer models reduced value provided default values fit. value passed optCtrl argument (g)lmer (see help lme4::convergence()). ftol_abs Defaults 1e-6 stop small change deviance. Similar xtol_abs. trace.mblogit logical indicating output produced iteration. Directly passed trace argument mclogit.control. independent verbose. catcov.mblogit Defaults \"free\" meaning restrictions covariances random effects logit equations. Set \"diagonal\" random effects pertinent different categories uncorrelated \"single\" random effect variances pertinent categories identical. epsilon Defaults 1e-8. Positive convergence tolerance \\(\\epsilon\\) directly passed control argument mclogit::mblogit mclogit.control. method='mle', group.var=.... seed non-negative integer sets seed set.seed(seed).","code":""},{"path":"http://r-bayesian-networks.org/reference/fit.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control the iterations in fitAbn — fit.control","text":"Named list according provided arguments.","code":""},{"path":"http://r-bayesian-networks.org/reference/fit.control.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Control the iterations in fitAbn — fit.control","text":"Parallelization children possible via function foreach package doParallel.  ncores=0 ncores=1 use single threaded foreach. ncores=-1 uses available cores one.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/fit.control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control the iterations in fitAbn — fit.control","text":"","code":"ctrlmle <- abn::fit.control(method = \"mle\",                        max.irls = 100,                        tol = 10^-11,                        tolPwrss = 1e-7,                        xtol_abs = 1e-6,                        ftol_abs = 1e-6,                        epsilon = 1e-6,                        ncores = 2,                        cluster.type = \"PSOCK\",                        seed = 9062019L) ctrlbayes <- abn::fit.control(method = \"bayes\",                          mean = 0,                          prec = 0.001,                          loggam.shape = 1,                          loggam.inv.scale = 5e-05,                          max.mode.error = 10,                          max.iters = 100,                          epsabs = 1e-07,                          error.verbose = FALSE,                          epsabs.inner = 1e-06,                          max.iters.inner = 100,                          finite.step.size = 1e-07,                          hessian.params = c(1e-04, 0.01),                          max.iters.hessian = 10,                          max.hessian.error = 1e-04,                          factor.brent = 100,                          maxiters.hessian.brent = 10,                          num.intervals.brent = 100,                          min.pdf = 0.001,                          n.grid = 100,                          std.area = TRUE,                          marginal.quantiles = c(0.025, 0.25, 0.5, 0.75, 0.975),                          max.grid.iter = 1000,                          marginal.node = NULL,                          marginal.param = NULL,                          variate.vec = NULL,                          ncores = 1,                          cluster.type = NULL,                          seed = 9062019L)"},{"path":"http://r-bayesian-networks.org/reference/fitAbn.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an additive Bayesian network model — fitAbn","title":"Fit an additive Bayesian network model — fitAbn","text":"Fits additive Bayesian network observed data equivalent Bayesian information-theoretic multi-dimensional regression modeling. Two numerical options available Bayesian settings, standard Laplace approximation else integrated nested Laplace approximation provided via call R INLA library (see r-inla.org - hosted CRAN).","code":""},{"path":"http://r-bayesian-networks.org/reference/fitAbn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an additive Bayesian network model — fitAbn","text":"","code":"fitAbn(object = NULL,        dag = NULL,        data.df = NULL,        data.dists = NULL,        method = NULL,        group.var = NULL,        adj.vars = NULL,        cor.vars = NULL,        centre = TRUE,        compute.fixed = FALSE,        control = NULL,        verbose = FALSE,        debugging = FALSE,        ...)  fitAbn.bayes(   dag = NULL,   data.df = NULL,   data.dists = NULL,   group.var = NULL,   cor.vars = NULL,   centre = TRUE,   compute.fixed = FALSE,   control = fit.control(method = \"bayes\"),   mylist = NULL,   grouped.vars = NULL,   group.ids = NULL,   force.method = NULL,   verbose = FALSE,   debugging = FALSE )  fitAbn.mle(   dag = NULL,   data.df = NULL,   data.dists = NULL,   group.var = NULL,   grouped.vars = NULL,   group.ids = NULL,   adj.vars = NULL,   cor.vars = NULL,   centre = TRUE,   control = fit.control(method = \"mle\"),   verbose = FALSE,   debugging = FALSE )  regressionLoop(   i = NULL,   dag = NULL,   data.df = NULL,   data.df.multi = NULL,   data.dists = NULL,   group.var = NULL,   grouped.vars = NULL,   group.ids = NULL,   control = NULL,   nvars = NULL,   nobs = NULL,   dag.multi = NULL,   verbose = NULL )"},{"path":"http://r-bayesian-networks.org/reference/fitAbn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an additive Bayesian network model — fitAbn","text":"object object class abnLearned produced mostProbable, searchHeuristic searchHillClimber. dag matrix formula statement (see details) defining network structure, directed acyclic graph (DAG), see details format. Note column names row names must set . data.df data frame containing data used learning network, binary variables must declared factors, missing values allowed variable. data.dists named list giving distribution node network, see details. method NULL, takes method object, otherwise \"bayes\" \"mle\" method used, see details. group.var applicable mixed models gives column name data.df grouping variable (must factor denoting group membership). adj.vars character vector giving column names data.df network score adjusted , see details. cor.vars character vector giving column names data.df mixed model used (method = 'bayes' ). centre observations Gaussian node first standardised mean zero standard deviation one. compute.fixed logical flag, set TRUE computation marginal posterior distributions, see details. control list control parameters. See fit.control names settable control values effect. verbose TRUE provides additional output, particular code used call INLA, applicable. debugging TRUE method = 'mle' enables step -loop. ... additional arguments passed optimization. mylist result returned check.valid.data. grouped.vars result returned check.valid.groups. Column indexes variables affected grouping effect. group.ids result returned check.valid.groups. Vector group allocation observation (row) 'data.df'. force.method \"notset\", \"INLA\" \"C\". specified buildScoreCache(control=list(max.mode.error=...)). number child-node (mostly corresponds child node index e.g. dag). data.df.multi extended data.df one-hot-encoded multinomial variables. nvars number variables data.dists. nobs number observations data.df. dag.multi extended dag one-hot-encoded multinomial variables.","code":""},{"path":"http://r-bayesian-networks.org/reference/fitAbn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an additive Bayesian network model — fitAbn","text":"object class abnFit. named list. One entry variables data.df (excluding grouping variable, present) contains estimate log marginal likelihood individual node. entry \"mlik\" total log marginal likelihood full ABN model. vector error.codes - non-zero numerical error warning occurred, vector error.code.desc giving text description error. list modes, contains mode estimates parameter node. vector called Hessian accuracy, estimated local error log marginal likelihood node.  compute.fixed=TRUE list entry called marginals contains named entry every parameter ABN entry list two-column matrix first column value marginal parameter, say x, second column respective density value, pdf(x). Also, list called marginal.quantiles produced, giving quantiles marginal posterior distribution. list","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/fitAbn.html","id":"if-method-bayes-","dir":"Reference","previous_headings":"","what":"If method=\"Bayes\":","title":"Fit an additive Bayesian network model — fitAbn","text":"procedure fitAbn fits additive Bayesian network model data node (variable - column data.df) can either: presence/absence (Bernoulli); continuous (Gaussian); unbounded count (Poisson). Multinomial distributions supported method = \"mle\" (see ). model comprises set conditionally independent generalized linear regressions without random effects. Internal code used default numerical estimation nodes without random effects, INLA default nodes random effects. default behavior can overridden using control=list(max.mode.error=...). default max.mode.error=10, means modes estimated INLA output must within 10\\ Otherwise, internal code used rather INLA. force use INLA nodes, use max.mode.error=100, ignores check, force use internal code use max.mode.error=0. numerical reliability perform abn see http://r-bayesian-networks.org. Generally speaking, INLA can swift accurate, several cases, can perform poorly care required (internal check modes). Binary variables must declared factors two levels, argument data.dists must list named arguments, one variables data.df (except grouping variable - present!), entry either \"poisson\",\"binomial\", \"multinomial\" \"gaussian\", see examples . \"poisson\" \"binomial\" distributions use log logit link functions, respectively. Note \"binomial\" actually means binary, one Bernoulli trial per row data.df. data grouped correlated blocks - wherein standard regression context mixed model might used - network comprising one nodes generalized linear mixed model used (limited single random effect). achieved specifying parameters group.var cor.vars. former defines group membership variable, factor indicating observations belong grouping. parameter cor.vars character vector contains names nodes mixed model used. yet implemented method = 'mle'. example, problems, may appropriate variables (except group.var) data.df parametrized mixed model others may single variable grouping adjustment required (remainder variables covariates measured group level). network structure definition, dag, row represents node network, columns row define parents particular node, see example specific format. dag can provided using formula statement (similar GLM). typical formula  ~ node1|parent1:parent2 + node2:node3|parent3. formula statement start ~. example, node1 two parents (parent1 parent2). node2 node3 parent3. parents names must match given data.df. : separator either children parents, | separates children (left side) parents (right side), + separates terms, . replaces variables data.df. compute.fixed=TRUE marginal posterior distributions parameters computed. Note current algorithm used determine evaluation grid rather crude may need manually refined using variate.vec (one parameter time) publication-quality density estimates. Note manual grid can used internal code INLA (uses grid). end points defined value marginal density drops given threshold pdf.min. estimating log marginal likelihood models random effects (using internal code rather INLA), attempt made minimize error comparing estimates given 3pt 5pt rule estimating Hessian Laplace approximation. modes used case identical. first derivatives computed using gsl's adaptive finite difference function, embedding inside standard 3pt 5pt rules second derivatives. cases, central difference approximation tried first forward difference fall back (precision parameters strictly positive). error minimized choosing optimal step size using gsl's Nelder-Mead optimization, fails, (e.g., larger max.hessian.error) Brent-Dekker root bracketing method used fallback. error reduced max.hessian.error, step size, gave lowest error searches (across potentially many different initial bracket choices), used final Hessian evaluations Laplace approximation.","code":""},{"path":"http://r-bayesian-networks.org/reference/fitAbn.html","id":"if-method-mle-","dir":"Reference","previous_headings":"","what":"If method=\"mle\":","title":"Fit an additive Bayesian network model — fitAbn","text":"procedure fitAbn argument method= \"mle\" fits additive Bayesian network model data node (variable - column data.df) can either: presence/absence (Bernoulli); continuous (Gaussian); unbounded count (Poisson); discrete variable (Multinomial). model comprises set conditionally independent generalized linear regressions without adjustment. Binary discrete variables must declared factors argument data.dists must list named arguments, one variables data.df, entry either \"poisson\",\"binomial\", \"multinomial\" \"gaussian\", see examples . \"poisson\" \"binomial\" distributions use log logit link functions, respectively. Note \"binomial\" actually means binary, one Bernoulli trial per row data.df. data grouped correlated blocks - wherein standard regression context mixed-effect model might used - network comprising one nodes generalized linear mixed model used (limited single random intercept). achieved specifying parameter group.var (cor.vars method = \"bayes\" yet implemented method = \"mle\"). parameter group.var defines group membership variable, factor indicating observations belong grouping. corresponds \"1|group.var\" formula notation e.g. lme4. context fitAbn adjustment means irrespective adjacency matrix adjustment variable set (adj.vars) add covariate every node defined cor.vars. network structure definition, dag, row represents node network, columns row define parents particular node, see example specific format. dag can provided using formula statement (similar GLM). typical formula  ~ node1|parent1:parent2 + node2:node3|parent3. formula statement start ~. example, node1 two parents (parent1 parent2). node2 node3 parent3. parents names exactly match given data.df. : separator either children parents, | separates children (left side) parents (right side), + separates terms, . replaces variables data.df. Information-theoretic based network scores used fitAbn argument method=\"mle\" maximum likelihood (mlik, called marginal likelihood context computed node wise), Akaike Information Criteria (aic), Bayesian Information Criteria (bic) Minimum distance Length (mdl). classical definitions metrics given Kratzer Furrer (2018). numerical routine based iterative scheme estimate regression coefficients. Iterative Reweighed Least Square (IRLS) programmed using Rcpp/RcppArmadrillo. One hard coded feature fitAbn argument method=\"mle\" conditional use bias reduced binomial regression classical Generalized Linear Model (GLM) fails estimate maximum likelihood given model accurately. Additionally, QR decomposition performed check rank deficiency. model rank deficient BR GLM fails estimate , predictors sequentially removed. feature aims better estimating network scores data sparsity present. special care taken interpreting even displaying p-values computed fitAbn. Indeed, full model already selected using goodness fit metrics based () full dataset. control argument list separate arguments Bayesian MLE implementation. See  fit.control details.","code":""},{"path":"http://r-bayesian-networks.org/reference/fitAbn.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Fit an additive Bayesian network model — fitAbn","text":"fitAbn.bayes(): Internal function called fitAbn. fitAbn.mle(): Internal function called fitAbn. regressionLoop(): Internal function called fitAbn.mle().","code":""},{"path":"http://r-bayesian-networks.org/reference/fitAbn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit an additive Bayesian network model — fitAbn","text":"Kratzer, G., Lewis, F.., Comin, ., Pittavino, M. Furrer, R. (2019). \"Additive Bayesian Network Modelling R Package abn\". arXiv preprint arXiv:1911.09006. Kratzer, G., Furrer, R., 2018. Information-Theoretic Scoring Rules Learn Additive Bayesian Network Applied Epidemiology. Preprint; Arxiv: stat.ML/1808.01126. Lewis, F. ., McCormick, B. J. J. (2012). Revealing complexity health determinants resource poor settings. American Journal Epidemiology. DOI:10.1093/aje/KWS183. information abn can found : r-bayesian-networks.org.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/fitAbn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit an additive Bayesian network model — fitAbn","text":"Fraser Iain Lewis Gilles Kratzer.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/forLoopContentFitBayes.html","id":null,"dir":"Reference","previous_headings":"","what":"Regress each node on its parents.#' — forLoopContentFitBayes","title":"Regress each node on its parents.#' — forLoopContentFitBayes","text":"Regress node parents.#'","code":""},{"path":"http://r-bayesian-networks.org/reference/forLoopContentFitBayes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regress each node on its parents.#' — forLoopContentFitBayes","text":"","code":"forLoopContentFitBayes(   child = NULL,   dag = NULL,   data.df = NULL,   var.types = NULL,   grouped.vars = NULL,   group.ids = NULL,   control = NULL,   INLA.marginals = NULL,   verbose = NULL,   force.method = NULL,   data.dists = NULL,   mymodes = NULL,   error.code = NULL,   hessian.accuracy = NULL,   mymargs = NULL )"},{"path":"http://r-bayesian-networks.org/reference/forLoopContentFitBayes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regress each node on its parents.#' — forLoopContentFitBayes","text":"child integer node regressed var.types vector numeric encoding distribution types. See get.var.types(data.dists) INLA.marginals vector logicals indicating nodes fitted using INLA mymodes Empty list modes node error.code Empty element error codes node hessian.accuracy Empty element hessian accuracies node mymargs Empty list marginals node","code":""},{"path":"http://r-bayesian-networks.org/reference/forLoopContentFitBayes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regress each node on its parents.#' — forLoopContentFitBayes","text":"list mlik, modes, marginals, error codes, hessian accuracies logical INLA used node.","code":""},{"path":"http://r-bayesian-networks.org/reference/formula_abn.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula to adjacency matrix — formula_abn","title":"Formula to adjacency matrix — formula_abn","text":"Internal function produce square matrix length(name) \\(0,1\\) depending f. f start ~ terms entries name terms separated + term1 | term2 indicates col(term1) row(term2) puts 1 term1 | term2:term3: ... : used sep . = terms name","code":""},{"path":"http://r-bayesian-networks.org/reference/formula_abn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formula to adjacency matrix — formula_abn","text":"","code":"formula_abn(f, name)"},{"path":"http://r-bayesian-networks.org/reference/g2b2c_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy Data Set for Examples in README — g2b2c_data","title":"Toy Data Set for Examples in README — g2b2c_data","text":"1000 observations 5 variables: 2 continuous, 2 binary 1 categorical.","code":""},{"path":"http://r-bayesian-networks.org/reference/g2b2c_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy Data Set for Examples in README — g2b2c_data","text":"","code":"g2b2c_data"},{"path":"http://r-bayesian-networks.org/reference/g2b2c_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy Data Set for Examples in README — g2b2c_data","text":"data frame five columns. Binary categorical variables factors. G1 gaussian B1 binomial B2 binomial C categorical G2 gaussian","code":""},{"path":"http://r-bayesian-networks.org/reference/g2pbcgrp.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy Data Set for Examples in README — g2pbcgrp","title":"Toy Data Set for Examples in README — g2pbcgrp","text":"10000 observations 6 variables: 2 continuous, 1 binary, 1 count, 1 categorical 1 grouping factor.","code":""},{"path":"http://r-bayesian-networks.org/reference/g2pbcgrp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy Data Set for Examples in README — g2pbcgrp","text":"","code":"g2pbcgrp"},{"path":"http://r-bayesian-networks.org/reference/g2pbcgrp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy Data Set for Examples in README — g2pbcgrp","text":"data frame six columns. Binary categorical variables factors. G1 gaussian P poisson B binomial C categorical G2 gaussian group categorical","code":""},{"path":"http://r-bayesian-networks.org/reference/gauss_bugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Bugs code for Gaussian response — gauss_bugs","title":"Bugs code for Gaussian response — gauss_bugs","text":"Bugs model normal distributed response variable \\(X \\sim \\mathcal{N}(\\mu,\\,\\sigma^{2})\\).","code":""},{"path":"http://r-bayesian-networks.org/reference/gauss_bugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bugs code for Gaussian response — gauss_bugs","text":"","code":"gauss_bugs(nodename, nodesintercept, parentnames, parentcoefs, std)  gauss_bugsGroup(   nodename,   nodesintercept,   parentnames,   parentcoefs,   sigma,   sigma_alpha )"},{"path":"http://r-bayesian-networks.org/reference/gauss_bugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bugs code for Gaussian response — gauss_bugs","text":"nodename character string response variable name. nodesintercept overall mean response. Parameter fixed-effects intercept. parentnames single character string (one parent) vector characters (multiple parent nodes) parent node (predictor variables) names. parentcoefs overall slope predictor (parent node) variable (fixed-effects). std integer standard deviation response variable converted precision (see Details). sigma within-group variance. Parameter random-effects residual. sigma_alpha -group variance. Parameter random-effects intercept.","code":""},{"path":"http://r-bayesian-networks.org/reference/gauss_bugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bugs code for Gaussian response — gauss_bugs","text":"Bugs model returned stdout.","code":""},{"path":"http://r-bayesian-networks.org/reference/gauss_bugs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bugs code for Gaussian response — gauss_bugs","text":"variance normal distribution \\(\\frac{1}{\\tau}\\).","code":""},{"path":"http://r-bayesian-networks.org/reference/gauss_bugs.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Bugs code for Gaussian response — gauss_bugs","text":"gauss_bugsGroup(): Bugs code Gaussian response varying intercept","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/gauss_bugs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bugs code for Gaussian response — gauss_bugs","text":"","code":"gauss_bugs(nodename = \"a\",            parentnames = c(\"b\", \"c\"),            nodesintercept = c(0.318077),            parentcoefs = list(\"b\"=c(b=0.3059395),                               \"c\"=c(c=0.5555)),            std = c(0.05773503)) #> a ~ dnorm(mu.a, precision.a) # Gaussian response #> mu.a <- 0.318077 + 0.3059395*b + 0.5555*c # Linear regression #> precision.a <- inverse(0.05773503) # precision tau = 1/standard_dev"},{"path":"http://r-bayesian-networks.org/reference/get.quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"function to extract quantiles from INLA output — get.quantiles","title":"function to extract quantiles from INLA output — get.quantiles","text":"function get extract quantiles","code":""},{"path":"http://r-bayesian-networks.org/reference/get.quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to extract quantiles from INLA output — get.quantiles","text":"","code":"get.quantiles(mylist, quantiles, single)  get.ind.quantiles(outmat, inmat)"},{"path":"http://r-bayesian-networks.org/reference/get.quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to extract quantiles from INLA output — get.quantiles","text":"mylist list matrices two cols x, y quantiles vector desired quantiles single NULL TRUE single node parameter outmat matrix first col desired quantiles. want estimate second col inmat actual x,f(x) matrix","code":""},{"path":"http://r-bayesian-networks.org/reference/get.quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to extract quantiles from INLA output — get.quantiles","text":"list","code":""},{"path":"http://r-bayesian-networks.org/reference/get.quantiles.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"function to extract quantiles from INLA output — get.quantiles","text":"get.ind.quantiles(): helper function get.quantiles","code":""},{"path":"http://r-bayesian-networks.org/reference/get.var.types.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ordered vector with integers denoting the distribution — get.var.types","title":"Create ordered vector with integers denoting the distribution — get.var.types","text":"gaussian = 1, binomial = 2, poisson = 3, multinomial = 4","code":""},{"path":"http://r-bayesian-networks.org/reference/get.var.types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ordered vector with integers denoting the distribution — get.var.types","text":"","code":"get.var.types(data.dists = NULL)"},{"path":"http://r-bayesian-networks.org/reference/get.var.types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ordered vector with integers denoting the distribution — get.var.types","text":"data.dists list specifying columns distribution type. Names correspond column names values must one \"gaussian\", \"binomial\", \"poisson\", \"multinomial\".","code":""},{"path":"http://r-bayesian-networks.org/reference/get.var.types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ordered vector with integers denoting the distribution — get.var.types","text":"numeric encoding distribution corresponding list element number data.dists.","code":""},{"path":"http://r-bayesian-networks.org/reference/getMSEfromModes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Standard Deviations from all Gaussian Nodes — getMSEfromModes","title":"Extract Standard Deviations from all Gaussian Nodes — getMSEfromModes","text":"Extract Standard Deviations Gaussian Nodes","code":""},{"path":"http://r-bayesian-networks.org/reference/getMSEfromModes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Standard Deviations from all Gaussian Nodes — getMSEfromModes","text":"","code":"getMSEfromModes(modes, dists)"},{"path":"http://r-bayesian-networks.org/reference/getMSEfromModes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Standard Deviations from all Gaussian Nodes — getMSEfromModes","text":"modes list modes. dists list distributions.","code":""},{"path":"http://r-bayesian-networks.org/reference/getMSEfromModes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Standard Deviations from all Gaussian Nodes — getMSEfromModes","text":"named numeric vector. Names correspond node name. Value standard deviations.","code":""},{"path":"http://r-bayesian-networks.org/reference/getMargsINLA.html","id":null,"dir":"Reference","previous_headings":"","what":"function to extract marginals from INLA output — getMargsINLA","title":"function to extract marginals from INLA output — getMargsINLA","text":"function extract marginals INLA output","code":""},{"path":"http://r-bayesian-networks.org/reference/getMargsINLA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to extract marginals from INLA output — getMargsINLA","text":"","code":"getMargsINLA(list.fixed, list.hyper)"},{"path":"http://r-bayesian-networks.org/reference/getMargsINLA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to extract marginals from INLA output — getMargsINLA","text":"list.fixed list matrices two cols x, y list.hyper list hyperparameters","code":""},{"path":"http://r-bayesian-networks.org/reference/getMargsINLA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to extract marginals from INLA output — getMargsINLA","text":"vector","code":""},{"path":"http://r-bayesian-networks.org/reference/getModeVector.html","id":null,"dir":"Reference","previous_headings":"","what":"function to extract the mode from INLA output — getModeVector","title":"function to extract the mode from INLA output — getModeVector","text":"function extract mode INLA output","code":""},{"path":"http://r-bayesian-networks.org/reference/getModeVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to extract the mode from INLA output — getModeVector","text":"","code":"getModeVector(list.fixed, list.hyper)"},{"path":"http://r-bayesian-networks.org/reference/getModeVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to extract the mode from INLA output — getModeVector","text":"list.fixed list matrices two cols x, y list.hyper list hyperparameters","code":""},{"path":"http://r-bayesian-networks.org/reference/getModeVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to extract the mode from INLA output — getModeVector","text":"vector","code":""},{"path":"http://r-bayesian-networks.org/reference/getmarginals.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function called by fitAbn.bayes. — getmarginals","title":"Internal function called by fitAbn.bayes. — getmarginals","text":"Function computing marginal posterior densities using C called fit.dag() called internally.","code":""},{"path":"http://r-bayesian-networks.org/reference/getmarginals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function called by fitAbn.bayes. — getmarginals","text":"","code":"getmarginals(   res.list,   data.df,   dag.m,   var.types,   max.parents,   mean,   prec,   loggam.shape,   loggam.inv.scale,   max.iters,   epsabs,   verbose,   error.verbose,   trace,   grouped.vars,   group.ids,   epsabs.inner,   max.iters.inner,   finite.step.size,   hessian.params,   max.iters.hessian,   min.pdf,   marginal.node,   marginal.param,   variate.vec,   n.grid,   INLA.marginals,   iter.max,   max.hessian.error,   factor.brent,   maxiters.hessian.brent,   num.intervals.brent )"},{"path":"http://r-bayesian-networks.org/reference/getmarginals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function called by fitAbn.bayes. — getmarginals","text":"res.list rest arguments call C fitabn data.df data frame containing data used learning network, binary variables must declared factors, missing values allowed variable. dag.m adjacency matrix var.types distributions terms numeric code max.parents max number parents nodes dag (different max.parents definitions). mean prior mean Gaussian additive terms node. INLA argument control.fixed=list(mean.intercept=...) control.fixed=list(mean=...). prec prior precision (\\(\\tau = \\frac{1}{\\sigma^2}\\)) Gaussian additive term node. INLA argument control.fixed=list(prec.intercept=...) control.fixed=list(prec=...). loggam.shape shape parameter Gamma distribution prior precision Gaussian node. INLA argument control.family=list(hyper = list(prec = list(prior=\"loggamma\",param=c(loggam.shape, loggam.inv.scale)))). loggam.inv.scale inverse scale parameter Gamma distribution prior precision Gaussian node. INLA argument control.family=list(hyper = list(prec = list(prior=\"loggamma\",param=c(loggam.shape, loggam.inv.scale)))). max.iters total number iterations allowed estimating modes Laplace approximation. passed .Call(\"fit_single_node\", ...). epsabs absolute error estimating modes Laplace approximation models random effects. Passed .Call(\"fit_single_node\", ...). verbose TRUE provides additional output, particular code used call INLA, applicable. error.verbose logical, additional output case errors occurring optimization. Passed .Call(\"fit_single_node\", ...). trace Non-negative integer. positive, tracing information progress \"L-BFGS-B\" optimization produced. Higher values may produce tracing information. (six levels tracing.  understand exactly see source code.). Passed .Call(\"fit_single_node\", ...). grouped.vars result returned check.valid.groups. Column indexes variables affected grouping effect. group.ids result returned check.valid.groups. Vector group allocation observation (row) 'data.df'. epsabs.inner absolute error maximization step (nested) Laplace approximation random effect term. Passed .Call(\"fit_single_node\", ...). max.iters.inner total number iterations maximization step nested Laplace approximation. Passed .Call(\"fit_single_node\", ...). finite.step.size suggested step length used finite difference estimation derivatives (outer) Laplace approximation estimating modes. Passed .Call(\"fit_single_node\", ...). hessian.params numeric vector giving parameters adaptive algorithm, determines optimal stepsize finite-difference estimation hessian. First entry initial guess, second entry absolute error. Passed .Call(\"fit_single_node\", ...). max.iters.hessian integer, maximum number iterations use determining optimal finite difference approximation (Nelder-Mead). Passed .Call(\"fit_single_node\", ...). min.pdf value posterior density function stop estimation used computing marginals, see details. marginal.node used conjunction marginal.param allow bespoke estimate marginal density specific grid. value 1 number nodes. marginal.param used conjunction marginal.node. value 1 intercept, see modes entry results appropriate number. variate.vec vector containing places evaluate posterior marginal density, must supplied marginal.node null. n.grid recompute density equally spaced grid n.grid points. INLA.marginals vector - TRUE INLA used false otherwise iter.max max.iters fit.control. Total number iterations allowed estimating modes Laplace approximation. Passed .Call(\"fit_single_node\", ...). max.hessian.error estimated log marginal likelihood using adaptive 5pt finite-difference rule Hessian differs max.hessian.error using adaptive 3pt rule continue minimize local error switching Brent-Dekker root bracketing method. Passed .Call(\"fit_single_node\", ...). factor.brent using Brent-Dekker root bracketing method define outer interval end points best estimate \\(h\\) (stepsize) Nelder-Mead \\(h/factor.brent,h*factor.brent)\\). Passed .Call(\"fit_single_node\", ...). maxiters.hessian.brent maximum number iterations allowed Brent-Dekker method. Passed .Call(\"fit_single_node\", ...). num.intervals.brent number initial different bracket segments try Brent-Dekker method. Passed .Call(\"fit_single_node\", ...).","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/infoDag.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute standard information for a DAG. — infoDag","title":"Compute standard information for a DAG. — infoDag","text":"function returns standard metrics DAG description. list contains number nodes, number arcs, average Markov blanket size, neighborhood average set size, parent average set size children average set size.","code":""},{"path":"http://r-bayesian-networks.org/reference/infoDag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute standard information for a DAG. — infoDag","text":"","code":"infoDag(object, node.names = NULL)"},{"path":"http://r-bayesian-networks.org/reference/infoDag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute standard information for a DAG. — infoDag","text":"object object class abnLearned, abnFit. Alternatively, matrix formula statement defining network structure, directed acyclic graph (DAG). Note row names must set given node.names. node.names vector names DAG given via formula, see details.","code":""},{"path":"http://r-bayesian-networks.org/reference/infoDag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute standard information for a DAG. — infoDag","text":"named list contains following entries: number nodes, number arcs, average Markov blanket size, neighborhood average set size, parent average set size children average set size.","code":""},{"path":"http://r-bayesian-networks.org/reference/infoDag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute standard information for a DAG. — infoDag","text":"function returns named list following entries: number nodes, number arcs, average Markov blanket size, neighborhood average set size, parent average set size, children's average set size. dag can provided using formula statement (similar glm). typical formula  ~ node1|parent1:parent2 + node2:node3|parent3. formula statement start ~. example, node1 two parents (parent1 parent2). node2 node3 parent3. parents names exactly match given node.names. : separator either children parents, | separates children (left side) parents (right side), + separates terms, . replaces variables node.names.","code":""},{"path":"http://r-bayesian-networks.org/reference/infoDag.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute standard information for a DAG. — infoDag","text":"West, D. B. (2001). Introduction graph theory. Vol. 2. Upper Saddle River: Prentice Hall.","code":""},{"path":"http://r-bayesian-networks.org/reference/infoDag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute standard information for a DAG. — infoDag","text":"","code":"## Creating a dag: dag <- matrix(c(0,0,0,0, 1,0,0,0, 1,1,0,1, 0,1,0,0), nrow = 4, ncol = 4) dist <- list(a=\"gaussian\", b=\"gaussian\", c=\"gaussian\", d=\"gaussian\") colnames(dag) <- rownames(dag) <- names(dist)  infoDag(dag) #> $n.nodes #> [1] 4 #>  #> $n.arcs #> [1] 5 #>  #> $mb.average #> [1] 3 #>  #> $nh.average #> [1] 2.5 #>  #> $parent.average #> [1] 1.25 #>  #> $children.average #> [1] 1.25 #>  plot(createAbnDag(dag = dag, data.dists = dist))"},{"path":"http://r-bayesian-networks.org/reference/irls_binomial_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp","title":"Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp","text":"IRLS estimate network score Binomial nodes.","code":""},{"path":"http://r-bayesian-networks.org/reference/irls_binomial_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp","text":"","code":"irls_binomial_cpp(A, b, maxit, tol)"},{"path":"http://r-bayesian-networks.org/reference/irls_binomial_cpp_br.html","id":null,"dir":"Reference","previous_headings":"","what":"BR Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp_br","title":"BR Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp_br","text":"IRLS estimate network score Binomial nodes.","code":""},{"path":"http://r-bayesian-networks.org/reference/irls_binomial_cpp_br.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BR Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp_br","text":"","code":"irls_binomial_cpp_br(A, b, maxit, tol)"},{"path":"http://r-bayesian-networks.org/reference/irls_binomial_cpp_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp_fast","title":"Fast Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp_fast","text":"IRLS estimate network score Binomial nodes.","code":""},{"path":"http://r-bayesian-networks.org/reference/irls_binomial_cpp_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp_fast","text":"","code":"irls_binomial_cpp_fast(A, b, maxit, tol)"},{"path":"http://r-bayesian-networks.org/reference/irls_binomial_cpp_fast_br.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Br Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp_fast_br","title":"Fast Br Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp_fast_br","text":"IRLS estimate network score Binomial nodes.","code":""},{"path":"http://r-bayesian-networks.org/reference/irls_binomial_cpp_fast_br.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Br Iterative Reweighed Least Square algorithm for Binomials — irls_binomial_cpp_fast_br","text":"","code":"irls_binomial_cpp_fast_br(A, b, maxit, tol)"},{"path":"http://r-bayesian-networks.org/reference/irls_gaussian_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterative Reweighed Least Square algorithm for Gaussians — irls_gaussian_cpp","title":"Iterative Reweighed Least Square algorithm for Gaussians — irls_gaussian_cpp","text":"IRLS estimate network score Gaussian nodes.","code":""},{"path":"http://r-bayesian-networks.org/reference/irls_gaussian_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterative Reweighed Least Square algorithm for Gaussians — irls_gaussian_cpp","text":"","code":"irls_gaussian_cpp(A, b, maxit, tol)"},{"path":"http://r-bayesian-networks.org/reference/irls_gaussian_cpp_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Iterative Reweighed Least Square algorithm for Gaussians — irls_gaussian_cpp_fast","title":"Fast Iterative Reweighed Least Square algorithm for Gaussians — irls_gaussian_cpp_fast","text":"IRLS estimate network score Gaussian nodes.","code":""},{"path":"http://r-bayesian-networks.org/reference/irls_gaussian_cpp_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Iterative Reweighed Least Square algorithm for Gaussians — irls_gaussian_cpp_fast","text":"","code":"irls_gaussian_cpp_fast(A, b, maxit, tol)"},{"path":"http://r-bayesian-networks.org/reference/irls_poisson_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterative Reweighed Least Square algorithm for Poissons — irls_poisson_cpp","title":"Iterative Reweighed Least Square algorithm for Poissons — irls_poisson_cpp","text":"IRLS estimate network score Poisson nodes.","code":""},{"path":"http://r-bayesian-networks.org/reference/irls_poisson_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterative Reweighed Least Square algorithm for Poissons — irls_poisson_cpp","text":"","code":"irls_poisson_cpp(A, b, maxit, tol)"},{"path":"http://r-bayesian-networks.org/reference/irls_poisson_cpp_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Iterative Reweighed Least Square algorithm for Poissons — irls_poisson_cpp_fast","title":"Fast Iterative Reweighed Least Square algorithm for Poissons — irls_poisson_cpp_fast","text":"IRLS estimate network score Poisson nodes.","code":""},{"path":"http://r-bayesian-networks.org/reference/irls_poisson_cpp_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Iterative Reweighed Least Square algorithm for Poissons — irls_poisson_cpp_fast","text":"","code":"irls_poisson_cpp_fast(A, b, maxit, tol)"},{"path":"http://r-bayesian-networks.org/reference/linkStrength.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the strengths of the edge connections in a Bayesian Network learned from observational data — linkStrength","title":"Returns the strengths of the edge connections in a Bayesian Network learned from observational data — linkStrength","text":"flexible implementation multiple proxy strength measures useful visualizing edge connections Bayesian Network learned observational data.","code":""},{"path":"http://r-bayesian-networks.org/reference/linkStrength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the strengths of the edge connections in a Bayesian Network learned from observational data — linkStrength","text":"","code":"linkStrength(dag,                     data.df = NULL,                     data.dists = NULL,                     method = c(\"mi.raw\",                                \"mi.raw.pc\",                                \"mi.corr\",                                \"ls\",                                \"ls.pc\",                                \"stat.dist\"),                     discretization.method = \"doane\")"},{"path":"http://r-bayesian-networks.org/reference/linkStrength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the strengths of the edge connections in a Bayesian Network learned from observational data — linkStrength","text":"dag matrix formula statement (see details format) defining network structure, directed acyclic graph (DAG). Note rownames must set given data.dist DAG given via formula statement. data.df data frame containing data used learning node, binary variables must declared factors. data.dists named list giving distribution node network, see ‘Details’. method method used. See ‘Details’. discretization.method character vector giving discretization method use. See discretization.","code":""},{"path":"http://r-bayesian-networks.org/reference/linkStrength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the strengths of the edge connections in a Bayesian Network learned from observational data — linkStrength","text":"function returns named matrix requested metric.","code":""},{"path":"http://r-bayesian-networks.org/reference/linkStrength.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns the strengths of the edge connections in a Bayesian Network learned from observational data — linkStrength","text":"function returns multiple proxies estimating connection strength edges possibly discretized Bayesian network's data set. returned connection strength measures : Raw Mutual Information (mi.raw), Percentage Mutual information (mi.raw.pc), Raw Mutual Information computed via correlation (mi.corr), link strength (ls), percentage link strength (ls.pc) statistical distance (stat.dist). general concept entropy defined probability distributions. probability estimated data using frequency tables. estimates plug-definition entropy return -called empirical entropy. standard known problem empirical entropy estimations biased due sampling noise. also known bias decrease sample size increases. mutual information estimation computed observed frequencies plug-estimator based entropy. case arc going node X node Y remaining set parent Y denoted Z. mutual information defined (X, Y) = H(X) + H(Y) - H(X, Y), H() entropy. Percentage Mutual information defined PI(X,Y) = (X,Y)/H(Y|Z). Mutual Information computed via correlation defined MI(X,Y) = -0.5 log(1-cor(X,Y)^2). link strength defined LS(X->Y) = H(Y|Z)-H(Y|X,Z). percentage link strength defined PLS(X->Y) = LS(X->Y) / H(Y|Z). statistical distance defined SD(X,Y) = 1- MI(X,Y) / max(H(X),H(Y)).","code":""},{"path":"http://r-bayesian-networks.org/reference/linkStrength.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Returns the strengths of the edge connections in a Bayesian Network learned from observational data — linkStrength","text":"Boerlage, B. (1992).  Link strength Bayesian networks. Diss. University British Columbia. Ebert-Uphoff, Imme. \"Tutorial measure link strengths discrete Bayesian networks.\" (2009).","code":""},{"path":"http://r-bayesian-networks.org/reference/linkStrength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the strengths of the edge connections in a Bayesian Network learned from observational data — linkStrength","text":"","code":"# Gaussian N <- 1000 mydists <- list(a=\"gaussian\",                 b=\"gaussian\",                 c=\"gaussian\") a <- rnorm(n = N, mean = 0, sd = 1) b <- 1 + 2*rnorm(n = N, mean = 5, sd = 1) c <- 2 + 1*a + 2*b + rnorm(n = N, mean = 2, sd = 1) mydf <- data.frame(\"a\" = a,                    \"b\" = b,                    \"c\" = c) mycache.mle <- buildScoreCache(data.df = mydf,                                data.dists = mydists,                                method = \"mle\",                                max.parents = 2) mydag.mp <- mostProbable(score.cache = mycache.mle, verbose = FALSE) linkstr <- linkStrength(dag = mydag.mp$dag,                         data.df = mydf,                         data.dists = mydists,                         method = \"ls\",                         discretization.method = \"sturges\")"},{"path":"http://r-bayesian-networks.org/reference/logLik.abnFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print logLik of objects of class abnFit — logLik.abnFit","title":"Print logLik of objects of class abnFit — logLik.abnFit","text":"Print logLik objects class abnFit","code":""},{"path":"http://r-bayesian-networks.org/reference/logLik.abnFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print logLik of objects of class abnFit — logLik.abnFit","text":"","code":"# S3 method for abnFit logLik(object, digits = 3L, verbose = TRUE, ...)"},{"path":"http://r-bayesian-networks.org/reference/logLik.abnFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print logLik of objects of class abnFit — logLik.abnFit","text":"object Object class abnFit digits number digits results. verbose print additional output. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/logit.html","id":null,"dir":"Reference","previous_headings":"","what":"Logit of proportions — logit","title":"Logit of proportions — logit","text":"See also C implementation ?abn::logit_cpp().","code":""},{"path":"http://r-bayesian-networks.org/reference/logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logit of proportions — logit","text":"","code":"logit(x)"},{"path":"http://r-bayesian-networks.org/reference/logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logit of proportions — logit","text":"x numeric values [0,1].","code":""},{"path":"http://r-bayesian-networks.org/reference/logit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logit of proportions — logit","text":"numeric vector length x.","code":""},{"path":"http://r-bayesian-networks.org/reference/logit_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"logit functions — logit_cpp","title":"logit functions — logit_cpp","text":"transform x either via logit, expit.","code":""},{"path":"http://r-bayesian-networks.org/reference/logit_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logit functions — logit_cpp","text":"","code":"logit_cpp(x)"},{"path":"http://r-bayesian-networks.org/reference/logit_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logit functions — logit_cpp","text":"x numeric vector","code":""},{"path":"http://r-bayesian-networks.org/reference/makebugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Make BUGS model from fitted DAG — makebugs","title":"Make BUGS model from fitted DAG — makebugs","text":"Make BUGS model fitted DAG","code":""},{"path":"http://r-bayesian-networks.org/reference/makebugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make BUGS model from fitted DAG — makebugs","text":"","code":"makebugs(dag, data.dists, coefs, stderrors)"},{"path":"http://r-bayesian-networks.org/reference/makebugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make BUGS model from fitted DAG — makebugs","text":"dag named adjacency matrix representing DAG. Names correspond node names. data.dists list node distributions. coefs list named node names containing element matrix nodes' coefficients. stderrors list named node names containing element matrix nodes' standard errors","code":""},{"path":"http://r-bayesian-networks.org/reference/makebugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make BUGS model from fitted DAG — makebugs","text":"Bugs model returned stdout.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/makebugs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make BUGS model from fitted DAG — makebugs","text":"","code":"## Prepare data and arguments mydists <- list(a=\"gaussian\",                 b=\"multinomial\",                 c=\"binomial\",                 d=\"poisson\") mydag <- matrix(0, 4, 4, byrow = TRUE,                 dimnames = list(c(\"a\", \"b\", \"c\", \"d\"),                                 c(\"a\", \"b\", \"c\", \"d\"))) mydag[2,1] <- mydag[3,2] <- mydag[4,3] <- 1 # plotAbn(mydag, data.dists = mydists) mycoefs <- list(\"a\"=matrix(-6.883383e-17, byrow = TRUE,                            dimnames = list(NULL,                                            \"a|intercept\")),                 \"b\"=matrix(c(2.18865, 3.133928, 3.138531, 1.686432, 3.134161, 5.052104),                            nrow= 1, byrow = TRUE,                            dimnames = list(c(NULL),                                       c(\"b|intercept.2\", \"b|intercept.3\", \"b|intercept.4\",                                       \"a.2\", \"a.3\", \"a.4\"))),                 \"c\"=matrix(c(1.11, 2.22, 3.33, 4.44, 5.55),                            nrow= 1, byrow = TRUE,                            dimnames = list(c(NULL),                                       c(\"c|intercept\", \"b1\", \"b2\", \"b3\", \"b4\"))),                 \"d\"=matrix(c(3.33, 4.44),                            nrow= 1, byrow = TRUE,                            dimnames = list(c(NULL),                                       c(\"d|intercept\", \"c\")))) mymse <- c(\"a\"=0,\"b\"=1,\"c\"=2,\"d\"=3) ## Make BUGS model makebugs(dag = mydag, data.dists = mydists, coefs = mycoefs, stderrors = mymse) #> model{ #> a ~ dnorm(mu.a, precision.a) # Gaussian response #> mu.a <- -6.883383e-17 # Linear regression #> precision.a <- inverse(0) # precision tau = 1/standard_dev #> b ~ dcat(p.b) # Categorical response #> p.b[1] <- phi.b[1]/sum(phi.b) # soft-max #> log(phi.b[1]) <- 0 # Reference category #> p.b[2] <- phi.b[2]/sum(phi.b) # soft-max #> log(phi.b[2]) <- 2.18865 + 1.686432*a #> p.b[3] <- phi.b[3]/sum(phi.b) # soft-max #> log(phi.b[3]) <- 3.133928 + 3.134161*a #> p.b[4] <- phi.b[4]/sum(phi.b) # soft-max #> log(phi.b[4]) <- 3.138531 + 5.052104*a #> c ~ dbern(p.c) # Bernoulli response #> logit(p.c) <- 1.11 +  #> 0.0242836145724376*b + 0.0736851897251164*b + 0.223587273987992*b + 0.678443921714454*b #>  # logistic regression #> d ~ dpois(lambda.d) # Poisson response #> log(lambda.d) <- 3.33 + 4.44*c # logistic regression #> }"},{"path":"http://r-bayesian-networks.org/reference/makebugsGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Make BUGS model from fitted DAG with grouping — makebugsGroup","title":"Make BUGS model from fitted DAG with grouping — makebugsGroup","text":"Make BUGS model fitted DAG grouping","code":""},{"path":"http://r-bayesian-networks.org/reference/makebugsGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make BUGS model from fitted DAG with grouping — makebugsGroup","text":"","code":"makebugsGroup(   dag,   data.dists,   stderrors,   group.var,   mu,   betas,   sigma,   sigma_alpha )"},{"path":"http://r-bayesian-networks.org/reference/makebugsGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make BUGS model from fitted DAG with grouping — makebugsGroup","text":"dag named adjacency matrix representing DAG. Names correspond node names. data.dists list node distributions. stderrors list named node names containing element matrix nodes' standard errors group.var applicable mixed models gives column name data.df grouping variable (must factor denoting group membership). mu Standard deviation fixed effects. betas Coefficients/slopes fixed effects . sigma variance random effects. sigma_alpha variance-covariance matrix corresponding covariances output mblogit.","code":""},{"path":"http://r-bayesian-networks.org/reference/makebugsGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make BUGS model from fitted DAG with grouping — makebugsGroup","text":"Bugs model returned stdout.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/mb.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Markov blanket — mb","title":"Compute the Markov blanket — mb","text":"function computes Markov blanket set nodes given DAG (Directed Acyclic Graph).","code":""},{"path":"http://r-bayesian-networks.org/reference/mb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Markov blanket — mb","text":"","code":"mb(dag, node, data.dists = NULL)"},{"path":"http://r-bayesian-networks.org/reference/mb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Markov blanket — mb","text":"dag matrix formula statement (see details format) defining network structure, directed acyclic graph (DAG). node character vector nodes Markov Blanket returned. data.dists named list giving distribution node network, see details.","code":""},{"path":"http://r-bayesian-networks.org/reference/mb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Markov blanket — mb","text":"character vector node names Markov blanket.","code":""},{"path":"http://r-bayesian-networks.org/reference/mb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Markov blanket — mb","text":"function returns Markov Blanket set nodes given DAG. dag can provided using formula statement (similar glm). typical formula  ~ node1|parent1:parent2 + node2:node3|parent3. formula statement start ~. example, node1 two parents (parent1 parent2). node2 node3 parent3. parents names exactly match given name. : separtor either children parents, | separates children (left side) parents (right side), + separates terms, . replaces variables name.","code":""},{"path":"http://r-bayesian-networks.org/reference/mb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Markov blanket — mb","text":"","code":"## Defining distribution and dag dist <- list(a=\"gaussian\", b=\"gaussian\", c=\"gaussian\", d=\"gaussian\",              e=\"binomial\", f=\"binomial\") dag <- matrix(c(0,1,1,0,1,0,                 0,0,1,1,0,1,                 0,0,0,0,0,0,                 0,0,0,0,0,0,                 0,0,0,0,0,1,                 0,0,0,0,0,0), nrow = 6L, ncol = 6L, byrow = TRUE) colnames(dag) <- rownames(dag) <- names(dist)  mb(dag, node = \"b\") #> [1] \"a\" \"c\" \"d\" \"f\" \"e\" mb(dag, node = c(\"b\",\"e\")) #> [1] \"a\" \"c\" \"d\" \"f\" \"e\" \"b\"  mb(~a|b:c:e+b|c:d:f+e|f, node = \"e\", data.dists = dist) #> [1] \"a\" \"f\" \"b\" \"c\""},{"path":"http://r-bayesian-networks.org/reference/miData.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical Estimation of the Entropy from a Table of Counts — miData","title":"Empirical Estimation of the Entropy from a Table of Counts — miData","text":"function empirically estimates Mutual Information table counts using observed frequencies.","code":""},{"path":"http://r-bayesian-networks.org/reference/miData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical Estimation of the Entropy from a Table of Counts — miData","text":"","code":"miData(freqs.table, method = c(\"mi.raw\", \"mi.raw.pc\"))"},{"path":"http://r-bayesian-networks.org/reference/miData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical Estimation of the Entropy from a Table of Counts — miData","text":"freqs.table table counts. method character determining Mutual Information normalized.","code":""},{"path":"http://r-bayesian-networks.org/reference/miData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical Estimation of the Entropy from a Table of Counts — miData","text":"Mutual information estimate.","code":""},{"path":"http://r-bayesian-networks.org/reference/miData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical Estimation of the Entropy from a Table of Counts — miData","text":"mutual information estimation computed observed frequencies plugin estimator based entropy. plugin estimator $$(X, Y) = H (X) + H(Y) - H(X, Y)$$, $$H()$$ entropy computed entropyData.","code":""},{"path":"http://r-bayesian-networks.org/reference/miData.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical Estimation of the Entropy from a Table of Counts — miData","text":"Cover, Thomas M, Joy Thomas. (2012). \"Elements Information Theory\". John Wiley & Sons.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/miData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical Estimation of the Entropy from a Table of Counts — miData","text":"","code":"## Generate random variable Y <- rnorm(n = 100, mean = 0, sd = 2) X <- rnorm(n = 100, mean = 5, sd = 2)  dist <- list(Y=\"gaussian\", X=\"gaussian\")  miData(discretization(data.df = cbind(X,Y), data.dists = dist,                       discretization.method = \"fd\", nb.states = FALSE),                       method = \"mi.raw\") #> [1] 0"},{"path":"http://r-bayesian-networks.org/reference/mi_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutual Information — mi_cpp","title":"Mutual Information — mi_cpp","text":"Calculates mutual information.","code":""},{"path":"http://r-bayesian-networks.org/reference/mi_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutual Information — mi_cpp","text":"","code":"mi_cpp(joint_dist)"},{"path":"http://r-bayesian-networks.org/reference/modes2coefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert modes to fitAbn.mle$coefs structure — modes2coefs","title":"Convert modes to fitAbn.mle$coefs structure — modes2coefs","text":"Convert modes fitAbn.mle$coefs structure","code":""},{"path":"http://r-bayesian-networks.org/reference/modes2coefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert modes to fitAbn.mle$coefs structure — modes2coefs","text":"","code":"modes2coefs(modes)"},{"path":"http://r-bayesian-networks.org/reference/modes2coefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert modes to fitAbn.mle$coefs structure — modes2coefs","text":"modes list modes.","code":""},{"path":"http://r-bayesian-networks.org/reference/modes2coefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert modes to fitAbn.mle$coefs structure — modes2coefs","text":"list matrix arrays.","code":""},{"path":"http://r-bayesian-networks.org/reference/mostProbable.html","id":null,"dir":"Reference","previous_headings":"","what":"Find most probable DAG structure — mostProbable","title":"Find most probable DAG structure — mostProbable","text":"Find probable DAG structure using exact order based approach due Koivisto Sood, 2004.","code":""},{"path":"http://r-bayesian-networks.org/reference/mostProbable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find most probable DAG structure — mostProbable","text":"","code":"mostProbable(score.cache, score=\"bic\", prior.choice=1, verbose=TRUE, ...)"},{"path":"http://r-bayesian-networks.org/reference/mostProbable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find most probable DAG structure — mostProbable","text":"score.cache object class abnCache typically outputted buildScoreCache(). score score used score network. Possible choices aic, bic, mdl, mlik. prior.choice integer, 1 2, 1 uniform structural prior 2 uses weighted prior, see details verbose TRUE provides additional output. ... arguments passed methods.","code":""},{"path":"http://r-bayesian-networks.org/reference/mostProbable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find most probable DAG structure — mostProbable","text":"object class abnMostprobable, list containing: matrix giving DAG definition probable posterior structure, cache pre-computed scores score used selection.","code":""},{"path":"http://r-bayesian-networks.org/reference/mostProbable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find most probable DAG structure — mostProbable","text":"procedure runs exact order based structure discovery approach Koivisto Sood (2004) find probable posterior network (DAG). local.score node cache, created using buildScoreCache (manually provided format used). Note scope search given options used local.score, example, restricting number parents ban retain constraints given . routine can take long time complete highly sensitive number nodes network. recommended use reduced data set get idea computational practicality approach.  particular, memory usage can quickly increase beyond may available. additive models, problems comprising 20 nodes feasible machines. Memory requirements can increase considerably , run time making less practical. recommended form -modeling adjustment performed resulting DAG (unless dealing vast numbers observations), example, using parametric bootstrapping, straightforward implement MCMC engines JAGS WinBUGS. See case studies http://r-bayesian-networks.org files provided package directories inst/bootstrapping_example inst/old_vignette details. parameter prior.choice determines prior used within node given choice parent combination. Koivisto Sood (2004) p.554, form prior used, assumes prior probability parent combinations comprising number parents equal. Specifically, prior probability parent set G cardinality |G| proportional 1/[n-1 choose |G|] n total nodes. Note favors parent combinations either low high cardinality, may appropriate. prior used prior.choice=2. prior.choice=1 uninformative prior used parent combinations cardinalities equally likely. latter equivalent structural prior used heuristic searches e.g., searchHillclimber searchHeuristic. Note network score (log marginal likelihood) probable DAG returned can easily computed using fitAbn, see examples .","code":""},{"path":"http://r-bayesian-networks.org/reference/mostProbable.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find most probable DAG structure — mostProbable","text":"Koivisto, M. V. (2004). Exact Structure Discovery Bayesian Networks, Journal Machine Learning Research, vol 5, 549-573.","code":""},{"path":"http://r-bayesian-networks.org/reference/mostProbable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find most probable DAG structure — mostProbable","text":"","code":"if (FALSE) { ############################## ## Example 1 ##############################  ## This data comes with `abn` see ?ex1.dag.data mydat <- ex1.dag.data[1:5000, c(1:7,10)]  ## Setup distribution list for each node: mydists <- list(b1=\"binomial\", p1=\"poisson\", g1=\"gaussian\", b2=\"binomial\",                 p2=\"poisson\", b3=\"binomial\", g2=\"gaussian\", g3=\"gaussian\")  ## Parent limits, for speed purposes quite specific here: max.par <- list(\"b1\"=0,\"p1\"=0,\"g1\"=1,\"b2\"=1,\"p2\"=2,\"b3\"=3,\"g2\"=3,\"g3\"=2) ## Now build cache (no constraints in ban nor retain) mycache <- buildScoreCache(data.df=mydat, data.dists=mydists, max.parents=max.par)  ## Find the globally best DAG: mp.dag <- mostProbable(score.cache=mycache) myres <- fitAbn(object=mp.dag,create.graph=TRUE) myres$mlik plot(myres) # plot the best model  ## last line is essentially equivalent to: # plotAbn(dag=mp.dag$dag, data.dists=mydists, fitted.values=myres$modes)  ## Fit the known true DAG (up to variables 'b4' and 'b5'): true.dag <- matrix(data=0, ncol=8, nrow=8) colnames(true.dag) <- rownames(true.dag) <- names(mydists)  true.dag[\"p2\",c(\"b1\",\"p1\")] <- 1 true.dag[\"b3\",c(\"b1\",\"g1\",\"b2\")] <- 1 true.dag[\"g2\",c(\"p1\",\"g1\",\"b2\")] <- 1 true.dag[\"g3\",c(\"g1\",\"b2\")] <- 1  fitAbn(dag=true.dag, data.df=mydat, data.dists=mydists)$mlik  ################################################################# ## Example 2 - models with random effects #################################################################  ## This data comes with abn see ?ex3.dag.data mydat <- ex3.dag.data[,c(1:4,14)] mydists <- list(b1=\"binomial\", b2=\"binomial\", b3=\"binomial\", b4=\"binomial\")  ## This takes a few seconds and requires INLA: mycache.mixed <- buildScoreCache(data.df=mydat,                                  data.dists=mydists,                                  group.var=\"group\",                                  max.parents=2)  ## Find the most probable DAG: mp.dag <- mostProbable(score.cache=mycache.mixed) ## and get goodness of fit: fitAbn(object=mp.dag,        group.var=\"group\")$mlik }"},{"path":"http://r-bayesian-networks.org/reference/nobs.abnFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print number of observations of objects of class abnFit — nobs.abnFit","title":"Print number of observations of objects of class abnFit — nobs.abnFit","text":"Print number observations objects class abnFit","code":""},{"path":"http://r-bayesian-networks.org/reference/nobs.abnFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print number of observations of objects of class abnFit — nobs.abnFit","text":"","code":"# S3 method for abnFit nobs(object, ...)"},{"path":"http://r-bayesian-networks.org/reference/nobs.abnFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print number of observations of objects of class abnFit — nobs.abnFit","text":"object Object class abnFit ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/odds.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability to odds — odds","title":"Probability to odds — odds","text":"Probability odds","code":""},{"path":"http://r-bayesian-networks.org/reference/odds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability to odds — odds","text":"","code":"odds(x)"},{"path":"http://r-bayesian-networks.org/reference/odds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability to odds — odds","text":"x numeric vector probabilities values [0,1].","code":""},{"path":"http://r-bayesian-networks.org/reference/odds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability to odds — odds","text":"numeric vector length x.","code":""},{"path":"http://r-bayesian-networks.org/reference/or.html","id":null,"dir":"Reference","previous_headings":"","what":"Odds Ratio from a matrix — or","title":"Odds Ratio from a matrix — or","text":"Compute odds ratio contingency table matrix.","code":""},{"path":"http://r-bayesian-networks.org/reference/or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Odds Ratio from a matrix — or","text":"","code":"or(x)"},{"path":"http://r-bayesian-networks.org/reference/or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Odds Ratio from a matrix — or","text":"x 2x2 table matrix.","code":""},{"path":"http://r-bayesian-networks.org/reference/or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Odds Ratio from a matrix — or","text":"real value.","code":""},{"path":"http://r-bayesian-networks.org/reference/pigs.vienna.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset related to diseases present in `finishing pigs', animals about to enter the human food chain at an abattoir. — pigs.vienna","title":"Dataset related to diseases present in `finishing pigs', animals about to enter the human food chain at an abattoir. — pigs.vienna","text":"data consider comprise randomly chosen batch 50 pigs 500 randomly chosen pig producers UK. dataset consists 25000 observations, 10 binary variables, grouping variable. `finishing pigs', animals enter human food chain abattoir. description data set present vignette.","code":""},{"path":"http://r-bayesian-networks.org/reference/pigs.vienna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset related to diseases present in `finishing pigs', animals about to enter the human food chain at an abattoir. — pigs.vienna","text":"","code":"pigs.vienna"},{"path":"http://r-bayesian-networks.org/reference/pigs.vienna.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset related to diseases present in `finishing pigs', animals about to enter the human food chain at an abattoir. — pigs.vienna","text":"data frame mixture 10 discrete variables, set factor, grouping variable. PC Binary. PT Binary. MS Binary. HS Binary. TAIL Binary. Abscess Binary. Pyaemia Binary. EPcat Binary. PDcat Binary. plbinary Binary. batch Group variable, corresponding 500 different pig producers","code":""},{"path":"http://r-bayesian-networks.org/reference/pigs.vienna.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset related to diseases present in `finishing pigs', animals about to enter the human food chain at an abattoir. — pigs.vienna","text":"dataset used older version vignette. See also files provided package directories inst/bootstrapping_example inst/old_vignette give detailed analysis dataset provide details bootstrapping example thereof.","code":""},{"path":"http://r-bayesian-networks.org/reference/pigs.vienna.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dataset related to diseases present in `finishing pigs', animals about to enter the human food chain at an abattoir. — pigs.vienna","text":"Hartnack, S., et al. (2016) \"Attitudes Austrian veterinarians towards euthanasia small animal practice: impacts age gender views euthanasia.\" BMC Veterinary Research 12.1: 26.","code":""},{"path":"http://r-bayesian-networks.org/reference/plot.abnDag.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots DAG from an object of class abnDag — plot.abnDag","title":"Plots DAG from an object of class abnDag — plot.abnDag","text":"Plots DAG object class abnDag","code":""},{"path":"http://r-bayesian-networks.org/reference/plot.abnDag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots DAG from an object of class abnDag — plot.abnDag","text":"","code":"# S3 method for abnDag plot(x, ...)"},{"path":"http://r-bayesian-networks.org/reference/plot.abnDag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots DAG from an object of class abnDag — plot.abnDag","text":"x Object class abnDag ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/plot.abnDag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots DAG from an object of class abnDag — plot.abnDag","text":"Rgraphviz::plot","code":""},{"path":"http://r-bayesian-networks.org/reference/plot.abnDag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots DAG from an object of class abnDag — plot.abnDag","text":"","code":"mydag <- createAbnDag(dag = ~a+b|a,                       data.df = data.frame(\"a\"=1, \"b\"=1),                       data.dists = list(a=\"binomial\", b=\"gaussian\")) plot(mydag)"},{"path":"http://r-bayesian-networks.org/reference/plot.abnFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot objects of class abnFit — plot.abnFit","title":"Plot objects of class abnFit — plot.abnFit","text":"Plot objects class abnFit","code":""},{"path":"http://r-bayesian-networks.org/reference/plot.abnFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot objects of class abnFit — plot.abnFit","text":"","code":"# S3 method for abnFit plot(x, ...)"},{"path":"http://r-bayesian-networks.org/reference/plot.abnFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot objects of class abnFit — plot.abnFit","text":"x Object class abnFit ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/plot.abnHeuristic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot objects of class abnHeuristic — plot.abnHeuristic","title":"Plot objects of class abnHeuristic — plot.abnHeuristic","text":"Plot objects class abnHeuristic","code":""},{"path":"http://r-bayesian-networks.org/reference/plot.abnHeuristic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot objects of class abnHeuristic — plot.abnHeuristic","text":"","code":"# S3 method for abnHeuristic plot(x, ...)"},{"path":"http://r-bayesian-networks.org/reference/plot.abnHeuristic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot objects of class abnHeuristic — plot.abnHeuristic","text":"x Object class abnHeuristic ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/plot.abnHillClimber.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot objects of class abnHillClimber — plot.abnHillClimber","title":"Plot objects of class abnHillClimber — plot.abnHillClimber","text":"Plot objects class abnHillClimber","code":""},{"path":"http://r-bayesian-networks.org/reference/plot.abnHillClimber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot objects of class abnHillClimber — plot.abnHillClimber","text":"","code":"# S3 method for abnHillClimber plot(x, ...)"},{"path":"http://r-bayesian-networks.org/reference/plot.abnHillClimber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot objects of class abnHillClimber — plot.abnHillClimber","text":"x Object class abnHillClimber ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/plot.abnMostprobable.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot objects of class abnMostprobable — plot.abnMostprobable","title":"Plot objects of class abnMostprobable — plot.abnMostprobable","text":"Plot objects class abnMostprobable","code":""},{"path":"http://r-bayesian-networks.org/reference/plot.abnMostprobable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot objects of class abnMostprobable — plot.abnMostprobable","text":"","code":"# S3 method for abnMostprobable plot(x, ...)"},{"path":"http://r-bayesian-networks.org/reference/plot.abnMostprobable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot objects of class abnMostprobable — plot.abnMostprobable","text":"x Object class abnMostprobable ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/plotAbn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an ABN graphic — plotAbn","title":"Plot an ABN graphic — plotAbn","text":"Plot ABN DAG using formula statement matrix using Rgraphviz graphAM class.","code":""},{"path":"http://r-bayesian-networks.org/reference/plotAbn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an ABN graphic — plotAbn","text":"","code":"plotAbn(dag, data.dists=NULL, markov.blanket.node=NULL, fitted.values=NULL,                digits=2, edge.strength=NULL, edge.strength.lwd=5, edge.direction=\"pc\",                edge.color=\"black\", edge.linetype=\"solid\", edge.arrowsize=0.6,                edge.fontsize=node.fontsize, node.fontsize=12,                node.fillcolor=c(\"lightblue\", \"brown3\", \"chartreuse3\"),                node.fillcolor.list=NULL,                node.shape=c(\"circle\", \"box\", \"ellipse\", \"diamond\"),                plot=TRUE , ...)"},{"path":"http://r-bayesian-networks.org/reference/plotAbn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an ABN graphic — plotAbn","text":"dag matrix formula statement (see details format) defining network structure, Directed Acyclic Graph (DAG). Note rownames must set given data.dists. data.dists named list giving distribution node network, see details. markov.blanket.node name variables display Markov blanket. fitted.values modes coefficents outputted fitAbn. digits number digits display fitted.values. edge.strength named matrix containing evaluations edge strength change arcs width (Mutual information, p-values, number bootstrap retrieve samples outcome linkStrength). edge.strength.lwd maximum line width edge.strength. edge.direction character giving direction arcs plotted, pc (parent child) cp (child parent) undirected. edge.color colour edge. edge.linetype linetype edge. Defaults \"solid\". Valid values R's base graphic parameter lty. edge.arrowsize thickness arrows. relevant arc.strength provided. edge.fontsize font size arcs fitted values. node.fontsize font size nodes names. node.fillcolor colour node. Second third element used Markov blanket node Markov blanket. node.fillcolor.list list node coloured. node.shape shape nodes according Gaussian, binomial, Poisson multinomial distributions. plot logical variable, set TRUE graph plotted. ... arguments passed plotting function.","code":""},{"path":"http://r-bayesian-networks.org/reference/plotAbn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an ABN graphic — plotAbn","text":"rendered graph, plot=TRUE. graphAM object returned invisibly.","code":""},{"path":"http://r-bayesian-networks.org/reference/plotAbn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot an ABN graphic — plotAbn","text":"default binomial nodes squares, multinoial nodes empty, Gaussian nodes circles poison nodes ellipses. dag can provided using formula statement (similar glm). typical formula  ~ node1|parent1:parent2 + node2:node3|parent3. construction based graph package. Properties graph can changend construction, see ‘Examples’.","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/plotAbn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an ABN graphic — plotAbn","text":"","code":"#Define distribution list dist <- list(a=\"gaussian\", b=\"gaussian\", c=\"gaussian\", d=\"gaussian\", e=\"binomial\", f=\"binomial\")  #Define a matrix formulation edge.strength <- matrix(c(0,0.5,0.5,0.7,0.1,0,                           0,0,0.3,0.1,0,0.8,                           0,0,0,0.35,0.66,0,                           0,0,0,0,0.9,0,                           0,0,0,0,0,0.8,                           0,0,0,0,0,0),nrow = 6L, ncol = 6L, byrow = TRUE)  ## Naming of the matrix colnames(edge.strength) <- rownames(edge.strength) <- names(dist)  ## Plot form a matrix plotAbn(dag = edge.strength, data.dists = dist)   ## Edge strength plotAbn(dag = ~a|b:c:d:e+b|c:d:f+c|d:e+d|e+e|f, data.dists = dist, edge.strength = edge.strength)   ## Plot from a formula for a different DAG! plotAbn(dag = ~a|b:c:e+b|c:d:f+e|f, data.dists = dist)   ## Markov blanket plotAbn(dag = ~a|b:c:e+b|c:d:f+e|f, data.dists = dist, markov.blanket.node = \"e\")   ## Change col for all edges tmp <- plotAbn(dag = ~a|b:c:e+b|c:d:f+e|f, data.dists = dist, plot=FALSE) graph::edgeRenderInfo(tmp) <- list(col=\"blue\") Rgraphviz::renderGraph(tmp)   ## Change lty for individual ones. Named vector is necessary tmp <- plotAbn(dag = ~a|b:c:e+b|c:d:f+e|f, data.dists = dist, plot=FALSE) edgelty <- rep(c(\"solid\",\"dotted\"), c(6,1)) names(edgelty) <- names( graph::edgeRenderInfo(tmp, \"col\")) graph::edgeRenderInfo(tmp) <- list(lty=edgelty) Rgraphviz::renderGraph(tmp)"},{"path":"http://r-bayesian-networks.org/reference/pois_bugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Bugs code for Poisson response — pois_bugs","title":"Bugs code for Poisson response — pois_bugs","text":"Bugs model count response variable \\(X \\sim \\mathcal{Pois}(\\lambda)\\).","code":""},{"path":"http://r-bayesian-networks.org/reference/pois_bugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bugs code for Poisson response — pois_bugs","text":"","code":"pois_bugs(nodename, nodesintercept, parentnames, parentcoefs)  pois_bugsGroup(nodename, nodesintercept, parentnames, parentcoefs, sigma_alpha)"},{"path":"http://r-bayesian-networks.org/reference/pois_bugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bugs code for Poisson response — pois_bugs","text":"nodename character string response variable name. nodesintercept overall mean response. Parameter fixed-effects intercept. parentnames single character string (one parent) vector characters (multiple parent nodes) parent node (predictor variables) names. parentcoefs overall slope predictor (parent node) variable (fixed-effects). sigma_alpha -group variance. Parameter random-effects intercept.","code":""},{"path":"http://r-bayesian-networks.org/reference/pois_bugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bugs code for Poisson response — pois_bugs","text":"Bugs model returned stdout.","code":""},{"path":"http://r-bayesian-networks.org/reference/pois_bugs.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Bugs code for Poisson response — pois_bugs","text":"pois_bugsGroup(): Bugs code Poisson response varying intercept","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/pois_bugs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bugs code for Poisson response — pois_bugs","text":"","code":"pois_bugs(nodename = \"a\",           parentnames = c(\"b\", \"c\"),           nodesintercept = c(0.318077),           parentcoefs = list(\"b\"=c(b=0.3059395),                              \"c\"=c(c=0.5555))) #> a ~ dpois(lambda.a) # Poisson response #> log(lambda.a) <- 0.318077 + 0.3059395*b + 0.5555*c # logistic regression"},{"path":"http://r-bayesian-networks.org/reference/print.abnCache.html","id":null,"dir":"Reference","previous_headings":"","what":"Print objects of class abnCache — print.abnCache","title":"Print objects of class abnCache — print.abnCache","text":"Print objects class abnCache","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnCache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print objects of class abnCache — print.abnCache","text":"","code":"# S3 method for abnCache print(x, digits = 3, ...)"},{"path":"http://r-bayesian-networks.org/reference/print.abnCache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print objects of class abnCache — print.abnCache","text":"x Object class abnCache digits number digits results. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnCache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print objects of class abnCache — print.abnCache","text":"summary statement class abnCache.","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnCache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print objects of class abnCache — print.abnCache","text":"","code":"## Subset of the build-in dataset, see  ?ex0.dag.data mydat <- ex0.dag.data[,c(\"b1\",\"b2\",\"g1\",\"g2\",\"b3\",\"g3\")] ## take a subset of cols  ## setup distribution list for each node mydists <- list(b1=\"binomial\", b2=\"binomial\", g1=\"gaussian\",                 g2=\"gaussian\", b3=\"binomial\", g3=\"gaussian\")  # Structural constraints # ban arc from b2 to b1 # always retain arc from g2 to g1  ## parent limits max.par <- list(\"b1\"=2, \"b2\"=2, \"g1\"=2, \"g2\"=2, \"b3\"=2, \"g3\"=2)  ## now build the cache of pre-computed scores accordingly to the structural constraints if(requireNamespace(\"INLA\", quietly = TRUE)){   # Run only if INLA is available res.c <- buildScoreCache(data.df=mydat, data.dists=mydists,                          dag.banned= ~b1|b2, dag.retained= ~g1|g2, max.parents=max.par) print(res.c) } #> Loading required package: sp #> This is INLA_24.02.09 built 2024-02-09 03:35:28 UTC. #>  - See www.r-inla.org/contact-us for how to get help. #>  - List available models/likelihoods/etc with inla.list.models() #>  - Use inla.doc(<NAME>) to access documentation #> Number of nodes in the network: 6. #>  #> Distribution of the marginal likelihood:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    -455    -454    -225    -328    -223    -213"},{"path":"http://r-bayesian-networks.org/reference/print.abnDag.html","id":null,"dir":"Reference","previous_headings":"","what":"Print objects of class abnDag — print.abnDag","title":"Print objects of class abnDag — print.abnDag","text":"Print objects class abnDag","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnDag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print objects of class abnDag — print.abnDag","text":"","code":"# S3 method for abnDag print(x, digits = 3L, ...)"},{"path":"http://r-bayesian-networks.org/reference/print.abnDag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print objects of class abnDag — print.abnDag","text":"x Object class abnDag digits number digits adjacency matrix. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnDag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print objects of class abnDag — print.abnDag","text":"outputs adjacency matrix statement class x.","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnDag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print objects of class abnDag — print.abnDag","text":"","code":"mydag <- createAbnDag(dag = ~a+b|a, data.df = data.frame(\"a\"=1, \"b\"=1)) print(mydag) #>   a b #> a 0 0 #> b 1 0 #> Class 'abnDag'."},{"path":"http://r-bayesian-networks.org/reference/print.abnFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print objects of class abnFit — print.abnFit","title":"Print objects of class abnFit — print.abnFit","text":"Print objects class abnFit","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print objects of class abnFit — print.abnFit","text":"","code":"# S3 method for abnFit print(x, digits = 3L, ...)"},{"path":"http://r-bayesian-networks.org/reference/print.abnFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print objects of class abnFit — print.abnFit","text":"x Object class abnFit digits number digits results. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnHeuristic.html","id":null,"dir":"Reference","previous_headings":"","what":"Print objects of class abnHeuristic — print.abnHeuristic","title":"Print objects of class abnHeuristic — print.abnHeuristic","text":"Print objects class abnHeuristic","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnHeuristic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print objects of class abnHeuristic — print.abnHeuristic","text":"","code":"# S3 method for abnHeuristic print(x, digits = 2L, ...)"},{"path":"http://r-bayesian-networks.org/reference/print.abnHeuristic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print objects of class abnHeuristic — print.abnHeuristic","text":"x Object class abnHeuristic digits number digits results. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnHillClimber.html","id":null,"dir":"Reference","previous_headings":"","what":"Print objects of class abnHillClimber — print.abnHillClimber","title":"Print objects of class abnHillClimber — print.abnHillClimber","text":"Print objects class abnHillClimber","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnHillClimber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print objects of class abnHillClimber — print.abnHillClimber","text":"","code":"# S3 method for abnHillClimber print(x, digits = 3L, ...)"},{"path":"http://r-bayesian-networks.org/reference/print.abnHillClimber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print objects of class abnHillClimber — print.abnHillClimber","text":"x Object class abnHillClimber digits number digits results. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnMostprobable.html","id":null,"dir":"Reference","previous_headings":"","what":"Print objects of class abnMostprobable — print.abnMostprobable","title":"Print objects of class abnMostprobable — print.abnMostprobable","text":"Print objects class abnMostprobable","code":""},{"path":"http://r-bayesian-networks.org/reference/print.abnMostprobable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print objects of class abnMostprobable — print.abnMostprobable","text":"","code":"# S3 method for abnMostprobable print(x, digits = 3L, ...)"},{"path":"http://r-bayesian-networks.org/reference/print.abnMostprobable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print objects of class abnMostprobable — print.abnMostprobable","text":"x Object class abnMostprobable digits number digits results. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/rank_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank of a matrix — rank_cpp","title":"Rank of a matrix — rank_cpp","text":"similar base::rank","code":""},{"path":"http://r-bayesian-networks.org/reference/rank_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank of a matrix — rank_cpp","text":"","code":"rank_cpp(A)"},{"path":"http://r-bayesian-networks.org/reference/scoreContribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the score's contribution in a network of each observation. — scoreContribution","title":"Compute the score's contribution in a network of each observation. — scoreContribution","text":"function computes score's contribution observation total network score.","code":""},{"path":"http://r-bayesian-networks.org/reference/scoreContribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the score's contribution in a network of each observation. — scoreContribution","text":"","code":"scoreContribution(object = NULL,                          dag = NULL, data.df = NULL, data.dists = NULL,                          verbose = FALSE)"},{"path":"http://r-bayesian-networks.org/reference/scoreContribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the score's contribution in a network of each observation. — scoreContribution","text":"object object class 'abnLearned' produced mostProbable, searchHeuristic searchHillClimber. dag matrix formula statement (see details) defining network structure, directed acyclic graph (DAG), see details format. Note colnames rownames must set. data.df data frame containing data used learning network, binary variables must declared factors missing values allowed variable. data.dists named list giving distribution node network, see details. verbose TRUE provides additional output.","code":""},{"path":"http://r-bayesian-networks.org/reference/scoreContribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the score's contribution in a network of each observation. — scoreContribution","text":"named list contains scores contributions: maximum likelihood, aic, bic, mdl diagonal values hat matrix.","code":""},{"path":"http://r-bayesian-networks.org/reference/scoreContribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the score's contribution in a network of each observation. — scoreContribution","text":"function computes score contribution observation total network score. function available mle settings. one uses glm predict functions. function attempt perform diagnostic ABN analysis.","code":""},{"path":"http://r-bayesian-networks.org/reference/scoreContribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the score's contribution in a network of each observation. — scoreContribution","text":"","code":"if (FALSE) { ## Use a subset of a built-in simulated data set mydat <- ex1.dag.data[,c(\"b1\",\"g1\",\"p1\")]  ## setup distribution list for each node mydists <- list(b1=\"binomial\", g1=\"gaussian\", p1=\"poisson\")  ## now build cache mycache <- buildScoreCache(data.df = mydat, data.dists = mydists, max.parents = 2, method = \"mle\")  ## Find the globally best DAG mp.dag <- mostProbable(score.cache=mycache, score=\"bic\", verbose = FALSE)  out <- scoreContribution(object = mp.dag)  ## Observations contribution per network node boxplot(out$bic) }"},{"path":"http://r-bayesian-networks.org/reference/searchHeuristic.html","id":null,"dir":"Reference","previous_headings":"","what":"A family of heuristic algorithms that aims at finding high scoring directed acyclic graphs — searchHeuristic","title":"A family of heuristic algorithms that aims at finding high scoring directed acyclic graphs — searchHeuristic","text":"flexible implementation multiple greedy search algorithms find high scoring network (DAG)","code":""},{"path":"http://r-bayesian-networks.org/reference/searchHeuristic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A family of heuristic algorithms that aims at finding high scoring directed acyclic graphs — searchHeuristic","text":"","code":"searchHeuristic(score.cache, score = \"mlik\",                        num.searches = 1, seed = 42L, start.dag = NULL,                        max.steps = 100,                        algo = \"hc\", tabu.memory = 10, temperature = 0.9,                        verbose = FALSE, ...)"},{"path":"http://r-bayesian-networks.org/reference/searchHeuristic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A family of heuristic algorithms that aims at finding high scoring directed acyclic graphs — searchHeuristic","text":"score.cache output buildScoreCache(). score score used score network. Possible choices aic, bic, mdl, mlik. num.searches positive integer giving number different search run, see details. seed non-negative integer sets seed. start.dag DAG given matrix, see details format, can used explicity provide starting point structural search. max.steps constant giving number search steps per search, see details. algo heuristic algorithm used. Possible choices : hc, tabu, sa. tabu.memory non-negative integer number set memory tabu search. temperature real number giving update temperature sa (simulated annealing) search algorithm. verbose TRUE provides additional output. ... arguments passed methods.","code":""},{"path":"http://r-bayesian-networks.org/reference/searchHeuristic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A family of heuristic algorithms that aims at finding high scoring directed acyclic graphs — searchHeuristic","text":"object class abnHeuristic (extends class abnLearnd) contains list entires: dags list DAGs scores vector giving network score locally optimal network search detailed.score vector giving evolution network score random restarts score number giving network score locally optimal network score.cache pre-computed cache scores num.searches numeric giving number random restart max.steps numeric giving maximal number optimization steps within search algorithm character indicating algorithm used","code":""},{"path":"http://r-bayesian-networks.org/reference/searchHeuristic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A family of heuristic algorithms that aims at finding high scoring directed acyclic graphs — searchHeuristic","text":"function flexible implementation multiple greedy heuristic algorithms, particularly well adapted abn framework. targets multi-random restarts heuristic algorithms. user can select num.searches maximum number steps within max.steps. optimization algorithm within search relatively rudimentary. function searchHeuristic different searchHillClimber sense function fully written R, whereas searchHillClimber written C thus expected faster. function searchHillClimber hill-climbing step consider every information pre-computed scores cache function searchHeuristic performs local stepwise optimization. function chooses structural move (edge move) compute score's change. point, closer MCMCMC algorithm Madigan York (1995) Giudici Castelo (2003) single edge move. user select random, random valid DAG selected. routine used favourise low density structure. function implements three algorithm selected parameter algo: hc, tabu sa. algo=hc: Hill-climber algorithm (hc) single move algorithm. Hill-climbing step within search arc attempted added. new score computed compared previous network's score. algo=tabu: algorithm hc used, list banned moves computed. parameter tabu.memory controls length tabu list. idea classical Hill-climber algorithm inefficient cross low probability regions unblock local maximum reaching higher score peak. forcing algorithm choose already used moves, force algorithm escape local maximum. algo=sa: variant heuristic search algorithm based simulated annealing described Metropolis et al. (1953). accepted moves result decrease network score. acceptance rate can monitored parameter temperature.","code":""},{"path":"http://r-bayesian-networks.org/reference/searchHeuristic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A family of heuristic algorithms that aims at finding high scoring directed acyclic graphs — searchHeuristic","text":"Heckerman, D., Geiger, D. Chickering, D. M. (1995). Learning Bayesian networks: combination knowledge statistical data. Machine Learning, 20, 197-243. Madigan, D. York, J. (1995) \"Bayesian graphical models discrete data\". International Statistical Review, 63:215232. Giudici, P. Castelo, R. (2003). \"Improving Markov chain Monte Carlo model search data mining\". Machine Learning, 50:127158. Metropolis, N., Rosenbluth, . W., Rosenbluth, M. N., Teller, . H., & Teller, E. (1953). \"Equation state calculations fast computing machines\". journal chemical physics, 21(6), 1087-1092.","code":""},{"path":"http://r-bayesian-networks.org/reference/searchHeuristic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A family of heuristic algorithms that aims at finding high scoring directed acyclic graphs — searchHeuristic","text":"","code":"if (FALSE) { ############################################## ## example: use built-in simulated data set ##############################################  mydat <- ex1.dag.data ## this data comes with abn see ?ex1.dag.data  ## setup distribution list for each node mydists<-list(b1=\"binomial\", p1=\"poisson\", g1=\"gaussian\", b2=\"binomial\",               p2=\"poisson\", b3=\"binomial\", g2=\"gaussian\", b4=\"binomial\",               b5=\"binomial\", g3=\"gaussian\")  mycache <- buildScoreCache(data.df = mydat, data.dists = mydists, max.parents = 2)  ## Now peform 10 greedy searches heur.res <- searchHeuristic(score.cache = mycache, data.dists = mydists,                             start.dag = \"random\", num.searches = 10,                             max.steps = 50)  ## Plot (one) dag plotAbn(heur.res$dags[[1]], data.dists = mydists) }"},{"path":"http://r-bayesian-networks.org/reference/searchHillClimber.html","id":null,"dir":"Reference","previous_headings":"","what":"Find high scoring directed acyclic graphs using heuristic search. — searchHillClimber","title":"Find high scoring directed acyclic graphs using heuristic search. — searchHillClimber","text":"Find high scoring network (DAG) structures using random re-starts greedy hill-climber heuristic search.","code":""},{"path":"http://r-bayesian-networks.org/reference/searchHillClimber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find high scoring directed acyclic graphs using heuristic search. — searchHillClimber","text":"","code":"searchHillClimber(score.cache, score = \"mlik\", num.searches = 1, seed = 42,                          start.dag = NULL, support.threshold = 0.5, timing.on = TRUE,                          dag.retained = NULL, verbose = FALSE, ...)"},{"path":"http://r-bayesian-networks.org/reference/searchHillClimber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find high scoring directed acyclic graphs using heuristic search. — searchHillClimber","text":"score.cache output buildScoreCache(). score character giving network score used select structure. Currently 'mlik' . num.searches number times run search. seed non-negative integer sets seed GSL random number generator. start.dag DAG given matrix, see details format, can used provide starting point structural search explicitly. support.threshold proportion search results - locally optimal DAG - arc must appear part consensus network. timing.extra output terms duration computation. dag.retained DAG given matrix, see details format. necessary score.cache created using explicit retain matrix, retain matrix used . dag.retained used algorithm generates initial random DAG ensure necessary arcs retained. verbose extra output. ... arguments passed methods.","code":""},{"path":"http://r-bayesian-networks.org/reference/searchHillClimber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find high scoring directed acyclic graphs using heuristic search. — searchHillClimber","text":"list entries: init.score vector giving network score initial network search commenced final.score vector giving network score locally optimal network init.dag list matrices, initial DAGs final.dag list matrices, locally optimal DAGs consensus matrix holding binary graph, necessary DAG! support.threshold percentage supported used create consensus matrix","code":""},{"path":"http://r-bayesian-networks.org/reference/searchHillClimber.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find high scoring directed acyclic graphs using heuristic search. — searchHillClimber","text":"procedure runs greedy hill-climbing search similar, identical, method presented initially Heckerman et al. 1995. (Machine Learning, 20, 197-243). search begins randomly chosen DAG structure constructed way attempt choose DAG uniformly vast landscape possible structures. algorithm used follows: given node cache (buildScoreCache, within set allowed local parent combinations, random combination chosen node. combined full DAG, checked cycles, check iterates nodes random order. nodes least one child (.e., least one cycle present), first node examined children removed, check cycles repeated. removed cycle present, DAG used starting point search, , second node chosen (randomly) process repeated DAG obtained. actual hill-climbing algorithm differs slightly presented Heckerman et al. full cache possible local combinations available. hill-climbing step, everything node cache considered. words, possible single swaps members cache currently present DAG full cache. single swap, provides greatest increase goodness fit chosen. single swap removal addition one node-parent combination present cache avoiding cycle. means well single arc changes (addition removal), multiple arc changes also considered step, note however arc reversal scheme takes two steps (requires first removal parent arc one node addition parent arc different node). original algorithm perturbed current DAG single arc step also included arc reversal. current implementation may efficient original arguably natural given pre-computed cache local scores. start DAG may provided case num.searches must equal 1 - option really just provide local search around previously identified optimal DAG. function designed two different purposes: ) interactive visualization; ii) longer batch processing. former provides easy visual \"eyeballing\" data terms majority consensus network (similar threshold), graphical structure comprises arcs feature given proportion (support.threshold) locally optimal DAGs already identified run. general hope structure stabilize - become fixed - relatively quickly, least problems smaller numbers nodes.","code":""},{"path":"http://r-bayesian-networks.org/reference/searchHillClimber.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find high scoring directed acyclic graphs using heuristic search. — searchHillClimber","text":"Lewis, F. ., McCormick, B. J. J. (2012). Revealing complexity health determinants resource poor settings. American Journal Epidemiology. DOI:10.1093/aje/KWS183).","code":""},{"path":"http://r-bayesian-networks.org/reference/simulateAbn.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data from a fitted additive Bayesian network. — simulateAbn","title":"Simulate data from a fitted additive Bayesian network. — simulateAbn","text":"Simulate data fitted additive Bayesian network.","code":""},{"path":"http://r-bayesian-networks.org/reference/simulateAbn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data from a fitted additive Bayesian network. — simulateAbn","text":"","code":"simulateAbn(   object = NULL,   run.simulation = TRUE,   bugsfile = NULL,   n.chains = 10L,   n.adapt = 1000L,   n.thin = 100L,   n.iter = 10000L,   seed = 42L,   verbose = FALSE,   debug = FALSE )"},{"path":"http://r-bayesian-networks.org/reference/simulateAbn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data from a fitted additive Bayesian network. — simulateAbn","text":"object type abnFit. run.simulation call JAGS simulate data (default TRUE). bugsfile path valid file NULL (default)  delete bugs file simulation. n.chains number parallel chains model. n.adapt number iteration adaptation. n.adapt set zero, adaptation takes place. n.thin thinning interval monitors. n.iter number iteration monitor. seed default set 42. verbose TRUE prints additional output debug TRUE prints bug file content stdout run simulations.","code":""},{"path":"http://r-bayesian-networks.org/reference/simulateAbn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data from a fitted additive Bayesian network. — simulateAbn","text":"data.frame","code":""},{"path":[]},{"path":"http://r-bayesian-networks.org/reference/simulateAbn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data from a fitted additive Bayesian network. — simulateAbn","text":"","code":"df <- FCV[, c(12:15)] mydists <- list(Outdoor=\"binomial\",                 Sex=\"multinomial\",                 GroupSize=\"poisson\",                 Age=\"gaussian\")  ## buildScoreCache -> mostProbable() -> fitAbn() suppressWarnings({   mycache.mle <- buildScoreCache(data.df = df, data.dists = mydists, method = \"mle\",                                  adj.vars = NULL, cor.vars = NULL,                                  dag.banned = NULL, dag.retained = NULL,                                  max.parents = 1,                                  which.nodes = NULL, defn.res = NULL) }) # ignore non-convergence warnings mp.dag.mle <- mostProbable(score.cache = mycache.mle, verbose = FALSE) myres.mle <- fitAbn(object = mp.dag.mle, method = \"mle\")  myres.sim <- simulateAbn(object = myres.mle,                              run.simulation = TRUE,                              bugsfile = NULL,                              verbose = FALSE) str(myres.sim) #> 'data.frame':\t1000 obs. of  4 variables: #>  $ Age      : num  -0.796 -0.6201 0.0929 -0.1999 -0.9388 ... #>  $ GroupSize: num  4 4 2 5 3 3 3 2 3 4 ... #>  $ Outdoor  : Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 2 1 1 2 2 ... #>  $ Sex      : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 3 1 4 1 3 1 4 2 3 1 ... prop.table(table(myres.sim$Outdoor)) #>  #>   0   1  #> 0.4 0.6  prop.table(table(df$Outdoor)) #>  #>         0         1  #> 0.4233333 0.5766667"},{"path":"http://r-bayesian-networks.org/reference/simulateDag.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a DAG with with arbitrary arcs density — simulateDag","title":"Simulate a DAG with with arbitrary arcs density — simulateDag","text":"Provided node names, returns abnDAG. Arc density refers chance node connected node .","code":""},{"path":"http://r-bayesian-networks.org/reference/simulateDag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a DAG with with arbitrary arcs density — simulateDag","text":"","code":"simulateDag(node.name, data.dists = NULL, edge.density = 0.5, verbose = FALSE)"},{"path":"http://r-bayesian-networks.org/reference/simulateDag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a DAG with with arbitrary arcs density — simulateDag","text":"node.name vector character giving names nodes. gives size simulated DAG. data.dists named list corresponding node.name specifying distribution node. provided arbitrary distributions assigned nodes. edge.density number [0,1] specifying edge probability dag. verbose print information run.","code":""},{"path":"http://r-bayesian-networks.org/reference/simulateDag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a DAG with with arbitrary arcs density — simulateDag","text":"object class abnDag consisting named matrix, named list giving distribution node empty element data.","code":""},{"path":"http://r-bayesian-networks.org/reference/simulateDag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a DAG with with arbitrary arcs density — simulateDag","text":"function generates DAGs sampling triangular matrices reorder columns rows randomly. network density (edge.density) used column-wise binomial sampling probability. matrix named using user-provided names.","code":""},{"path":"http://r-bayesian-networks.org/reference/simulateDag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a DAG with with arbitrary arcs density — simulateDag","text":"","code":"simdag <- simulateDag(node.name = c(\"a\", \"b\", \"c\", \"d\"),                       edge.density = 0.5,                       data.dists = list(a = \"gaussian\",                                         b = \"binomial\",                                         c = \"poisson\",                                         d = \"multinomial\"))  ## Example using Ozon entries: dist <- list(Ozone=\"gaussian\",   Solar.R=\"gaussian\",  Wind=\"gaussian\",              Temp=\"gaussian\",    Month=\"gaussian\",    Day=\"gaussian\") out <- simulateDag(node.name = names(dist), data.dists = dist, edge.density = 0.8) plot(out)"},{"path":"http://r-bayesian-networks.org/reference/skewness.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes skewness of a distribution — skewness","title":"Computes skewness of a distribution — skewness","text":"Computes skewness distribution","code":""},{"path":"http://r-bayesian-networks.org/reference/skewness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes skewness of a distribution — skewness","text":"","code":"skewness(x)"},{"path":"http://r-bayesian-networks.org/reference/skewness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes skewness of a distribution — skewness","text":"x numeric vector","code":""},{"path":"http://r-bayesian-networks.org/reference/skewness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes skewness of a distribution — skewness","text":"integer","code":""},{"path":"http://r-bayesian-networks.org/reference/std.area.under.grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard Area Under the Marginal — std.area.under.grid","title":"Standard Area Under the Marginal — std.area.under.grid","text":"function get std. marginal exactly unity. close unity cases due numerical accuracy differences (since point separate estimate) might little adrift turn option see reliable original estimation ","code":""},{"path":"http://r-bayesian-networks.org/reference/std.area.under.grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard Area Under the Marginal — std.area.under.grid","text":"","code":"std.area.under.grid(mylist, single)"},{"path":"http://r-bayesian-networks.org/reference/std.area.under.grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard Area Under the Marginal — std.area.under.grid","text":"mylist list matrices two cols x, y single NULL TRUE single node parameter","code":""},{"path":"http://r-bayesian-networks.org/reference/std.area.under.grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard Area Under the Marginal — std.area.under.grid","text":"list","code":""},{"path":"http://r-bayesian-networks.org/reference/strsplits.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursive string splitting — strsplits","title":"Recursive string splitting — strsplits","text":"Internal function call multiple times strsplit() remove space","code":""},{"path":"http://r-bayesian-networks.org/reference/strsplits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursive string splitting — strsplits","text":"","code":"strsplits(x, splits, ...)"},{"path":"http://r-bayesian-networks.org/reference/summary.abnDag.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints summary statistics from an object of class abnDag — summary.abnDag","title":"Prints summary statistics from an object of class abnDag — summary.abnDag","text":"Prints summary statistics object class abnDag","code":""},{"path":"http://r-bayesian-networks.org/reference/summary.abnDag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints summary statistics from an object of class abnDag — summary.abnDag","text":"","code":"# S3 method for abnDag summary(object, ...)"},{"path":"http://r-bayesian-networks.org/reference/summary.abnDag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints summary statistics from an object of class abnDag — summary.abnDag","text":"object object class abnLearned, abnFit. Alternatively, matrix formula statement defining network structure, directed acyclic graph (DAG). Note row names must set given node.names. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/summary.abnDag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prints summary statistics from an object of class abnDag — summary.abnDag","text":"","code":"mydag <- createAbnDag(dag = ~a+b|a, data.df = data.frame(\"a\"=1, \"b\"=1)) summary(mydag) #> $n.nodes #> [1] 2 #>  #> $n.arcs #> [1] 1 #>  #> $mb.average #> [1] 1 #>  #> $nh.average #> [1] 1 #>  #> $parent.average #> [1] 0.5 #>  #> $children.average #> [1] 0.5 #>"},{"path":"http://r-bayesian-networks.org/reference/summary.abnFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of objects of class abnFit — summary.abnFit","title":"Print summary of objects of class abnFit — summary.abnFit","text":"Print summary objects class abnFit","code":""},{"path":"http://r-bayesian-networks.org/reference/summary.abnFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of objects of class abnFit — summary.abnFit","text":"","code":"# S3 method for abnFit summary(object, digits = 3L, ...)"},{"path":"http://r-bayesian-networks.org/reference/summary.abnFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of objects of class abnFit — summary.abnFit","text":"object Object class abnFit digits number digits results. ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/summary.abnMostprobable.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of objects of class abnMostprobable — summary.abnMostprobable","title":"Print summary of objects of class abnMostprobable — summary.abnMostprobable","text":"Print summary objects class abnMostprobable","code":""},{"path":"http://r-bayesian-networks.org/reference/summary.abnMostprobable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of objects of class abnMostprobable — summary.abnMostprobable","text":"","code":"# S3 method for abnMostprobable summary(object, ...)"},{"path":"http://r-bayesian-networks.org/reference/summary.abnMostprobable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of objects of class abnMostprobable — summary.abnMostprobable","text":"object Object class abnMostprobable ... additional parameters. used moment.","code":""},{"path":"http://r-bayesian-networks.org/reference/tidy.cache.html","id":null,"dir":"Reference","previous_headings":"","what":"tidy up cache — tidy.cache","title":"tidy up cache — tidy.cache","text":"tidy cache","code":""},{"path":"http://r-bayesian-networks.org/reference/tidy.cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tidy up cache — tidy.cache","text":"","code":"tidy.cache(thecache)"},{"path":"http://r-bayesian-networks.org/reference/toGraphviz.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a DAG into graphviz format — toGraphviz","title":"Convert a DAG into graphviz format — toGraphviz","text":"Given matrix defining DAG create text file suitable plotting graphviz.","code":""},{"path":"http://r-bayesian-networks.org/reference/toGraphviz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a DAG into graphviz format — toGraphviz","text":"","code":"toGraphviz(dag,                   data.df=NULL,                   data.dists=NULL,                   group.var=NULL,                   outfile=NULL,                   directed=TRUE,                   verbose=FALSE)"},{"path":"http://r-bayesian-networks.org/reference/toGraphviz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a DAG into graphviz format — toGraphviz","text":"dag matrix defining DAG. data.df data frame containing data used learning network. data.dists list named arguments matching names data frame gives distribution family variable. See fitAbn details. group.var applicable mixed models gives column name data.df grouping variable (must factor denoting group membership). See fitAbn details. outfile character string giving filename contain graphviz graph. directed logical; TRUE, directed acyclic graph produced, otherwise undirected graph. verbose TRUE output printed. TRUE 'outfile=NULL' '.dot' file printed console.","code":""},{"path":"http://r-bayesian-networks.org/reference/toGraphviz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a DAG into graphviz format — toGraphviz","text":"Nothing returned, file outfile written.","code":""},{"path":"http://r-bayesian-networks.org/reference/toGraphviz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a DAG into graphviz format — toGraphviz","text":"Graphviz (https://www.graphviz.org) visualisation software developed &T freely available. function creates text representation DAG, undirected graph, can plotted using graphviz. R package, Rgraphviz (available Bioconductor project https://www.bioconductor.org/) interfaces R working installation graphviz. Binary nodes appear squares, Gaussian ovals Poisson nodes diamonds resulting graphviz network diagram. many shapes possible nodes numerous visual enhancements - see online graphviz documentation. Bespoke refinements can added editing raw outfile produced. full manual editing, particularly layout, adding annotations, one easy solution convert postscript format graph (produced graphviz using -Tps switch) vector format using tool pstoedit (http://www.pstoedit.net/), edit using vector drawing tool like xfig. can resaved postscript pdf thus retaining full vector quality.","code":""},{"path":"http://r-bayesian-networks.org/reference/toGraphviz.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a DAG into graphviz format — toGraphviz","text":"Fraser Iain Lewis Marta Pittavino","code":""},{"path":"http://r-bayesian-networks.org/reference/toGraphviz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a DAG into graphviz format — toGraphviz","text":"","code":"## On a typical linux system the following code constructs a nice ## looking pdf file 'graph.pdf'. if (FALSE) { ## Subset of a build-in dataset mydat <- ex0.dag.data[,c(\"b1\",\"b2\",\"b3\",\"g1\",\"b4\",\"p2\",\"p4\")]  ## setup distribution list for each node mydists <- list(b1=\"binomial\", b2=\"binomial\", b3=\"binomial\",                 g1=\"gaussian\", b4=\"binomial\", p2=\"poisson\",                                 p4=\"poisson\") ## specify DAG model mydag <- matrix(c(   0,1,0,0,1,0,0, #                      0,0,0,0,0,0,0, #                      0,1,0,0,1,0,0, #                      1,0,0,0,0,0,1, #                      0,0,0,0,0,0,0, #                      0,0,0,1,0,0,0, #                      0,0,0,0,1,0,0  # ), byrow=TRUE, ncol=7)  colnames(mydag) <- rownames(mydag) <- names(mydat)  ## create file for processing with graphviz outfile <- paste(tempdir(), \"graph.dot\", sep=\"/\") toGraphviz(dag=mydag, data.df=mydat, data.dists=mydists, outfile=outfile) ## and then process using graphviz tools e.g. on linux if(Sys.info()[[\"sysname\"]] == \"Linux\" && interactive()) {   system(paste( \"dot -Tpdf -o graph.pdf\", outfile))   system(\"evince graph.pdf\") } ## Example using data with a group variable  where b1<-b2 mydag <- matrix(c(0,1, 0,0), byrow=TRUE, ncol=2)  colnames(mydag) <- rownames(mydag) <- names(ex3.dag.data[,c(1,2)]) ## specific distributions mydists <- list(b1=\"binomial\", b2=\"binomial\")  ## create file for processing with graphviz outfile <- paste0(tempdir(), \"/graph.dot\") toGraphviz(dag=mydag, data.df=ex3.dag.data[,c(1,2,14)], data.dists=mydists,            group.var=\"group\",            outfile=outfile, directed=FALSE) ## and then process using graphviz tools e.g. on linux: if(Sys.info()[[\"sysname\"]] == \"Linux\" && interactive()) {   pdffile <- paste0(tempdir(), \"/graph.pdf\")   system(paste(\"dot -Tpdf -o \", pdffile, outfile))   system(paste(\"evince \", pdffile, \" &\"))   ## or some other viewer } }"},{"path":"http://r-bayesian-networks.org/reference/validate_abnDag.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for valid DAG of class abnDag — validate_abnDag","title":"Check for valid DAG of class abnDag — validate_abnDag","text":"Beside basic checks, function also checks square matrix undirected cycles (trivial cycles) undirected cycles.","code":""},{"path":"http://r-bayesian-networks.org/reference/validate_abnDag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for valid DAG of class abnDag — validate_abnDag","text":"","code":"validate_abnDag(dag, data.df = NULL, returnDag = TRUE, ...)"},{"path":"http://r-bayesian-networks.org/reference/validate_abnDag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for valid DAG of class abnDag — validate_abnDag","text":"dag dag either formula, matrix  object class 'abnDag' data.df data frame returnDag TRUE (default) returns DAG matrix. ... additional arguments.","code":""},{"path":"http://r-bayesian-networks.org/reference/validate_abnDag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for valid DAG of class abnDag — validate_abnDag","text":"Either TRUE/FALSE DAG matrix.","code":""},{"path":"http://r-bayesian-networks.org/reference/validate_abnDag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for valid DAG of class abnDag — validate_abnDag","text":"Similar check.valid.dag().","code":""},{"path":"http://r-bayesian-networks.org/reference/validate_dists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for valid distribution — validate_dists","title":"Check for valid distribution — validate_dists","text":"distribution names must match inla() family=''. Similar get.var.types(), mainly different output.","code":""},{"path":"http://r-bayesian-networks.org/reference/validate_dists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for valid distribution — validate_dists","text":"","code":"validate_dists(data.dists, returnDists = TRUE, ...)"},{"path":"http://r-bayesian-networks.org/reference/validate_dists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for valid distribution — validate_dists","text":"data.dists list variable distributions. returnDists TRUE (default) returns list provided. ... additional arguments.","code":""},{"path":"http://r-bayesian-networks.org/reference/validate_dists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for valid distribution — validate_dists","text":"either TRUE/FALSE list variable distributions provided input.","code":""},{"path":"http://r-bayesian-networks.org/reference/var33.html","id":null,"dir":"Reference","previous_headings":"","what":"simulated dataset from a DAG comprising of 33 variables — var33","title":"simulated dataset from a DAG comprising of 33 variables — var33","text":"250 observations simulated DAG 17 binary variables 16 continuous. DAG data features vignette. Note conditional dependence relations given population may differ realization 250 observations.","code":""},{"path":"http://r-bayesian-networks.org/reference/var33.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulated dataset from a DAG comprising of 33 variables — var33","text":"","code":"var33"},{"path":"http://r-bayesian-networks.org/reference/var33.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"simulated dataset from a DAG comprising of 33 variables — var33","text":"data frame mixture discrete variables set factor continuous variables. Joint distribution structure used generate data. v1 Binary, independent. v2 Gaussian, conditionally dependent upon v1. v3 Binary, independent. v4 Binary, conditionally dependent upon v3. v5 Gaussian, conditionally dependent upon v6. v6 Binary, conditionally dependent upon v4 v7. v7 Gaussian,  conditionally dependent upon v8. v8 Gaussian,  conditionally dependent upon v9. v9 Binary, conditionally dependent upon v10. v10 Binary, independent. v11 Binary,  conditionally dependent upon v10, v12 v19. v12 Binary, independent. v13 Gaussian, independent. v14 Gaussian,  conditionally dependent upon v13. v15 Binary, conditionally dependent upon v14 v21. v16 Gaussian, independent. v17 Gaussian, conditionally dependent upon v16 v20. v18 Binary,  conditionally dependent upon v20. v19 Binary,  conditionally dependent upon v20. v20 Binary, independent. v21 Binary, conditionally dependent upon v20. v22 Gaussian, conditionally dependent upon v21. v23 Gaussian, conditionally dependent upon v21. v24 Gaussian, conditionally dependent upon v23. v25 Gaussian, conditionally dependent upon v23 v26. v26 Binary, conditionally dependent upon v20. v27 Binary, independent. v28 Binary, conditionally dependent upon v27, v29 v31. v29 Gaussian, independent. v30 Gaussian,  conditionally dependent upon v29. v31 Gaussian, independent. v32 Binary,  conditionally dependent upon v21, v29 v31. v33 Gaussian,  conditionally dependent upon v31.","code":""},{"path":"http://r-bayesian-networks.org/reference/var33.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulated dataset from a DAG comprising of 33 variables — var33","text":"","code":"## Constructing the DAG of the dataset: dag33 <- matrix(0, 33, 33) dag33[2,1] <- 1 dag33[4,3] <- 1 dag33[6,4] <- 1; dag33[6,7] <- 1 dag33[5,6] <- 1 dag33[7,8] <- 1 dag33[8,9] <- 1 dag33[9,10] <- 1 dag33[11,10] <- 1; dag33[11,12] <- 1; dag33[11,19] <- 1; dag33[14,13] <- 1 dag33[17,16] <- 1; dag33[17,20] <- 1 dag33[15,14] <- 1; dag33[15,21] <- 1 dag33[18,20] <- 1 dag33[19,20] <- 1 dag33[21,20] <- 1 dag33[22,21] <- 1 dag33[23,21] <- 1 dag33[24,23] <- 1 dag33[25,23] <- 1; dag33[25,26] <- 1 dag33[26,20] <- 1 dag33[33,31] <- 1 dag33[33,31] <- 1 dag33[32,21] <- 1; dag33[32,31] <- 1; dag33[32,29] <- 1 dag33[30,29] <- 1 dag33[28,27] <- 1; dag33[28,29] <- 1; dag33[28,31] <- 1"},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-306","dir":"Changelog","previous_headings":"","what":"abn 3.0.6","title":"abn 3.0.6","text":"2024-03-17 Matteo Delucchi New website added JOSS paper Changed ChangeLog NEWS.md Revised CITATION file Updated README added logo Revised class names methods Added functional test getmarginals() Check validity sensibility compute.fixed argument. Check validity sensibility check argument buildscoreCache(). Check codecoverage harmonised plotting across different classes Created new vignettes relaxed tests allow complete partial scientific notation string outputs BUGS files. avoid examples tests CRAN require INLA Restructured private developement repository one public repo.","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-305","dir":"Changelog","previous_headings":"","what":"abn 3.0.5","title":"abn 3.0.5","text":"2024-01-18 Matteo Delucchi Parallelization buildScoreCache(method='bayes') fitAbn(method='bayes') foreach(). Controlling number cores used INLA. always using available cores. Specifying type parallelisation build.control() fit.control(). Fixed bug test simulateAbn() failing CRAN. Increase package availability skipping tests CRAN require INLA. also speeds CRAN checks.","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-304","dir":"Changelog","previous_headings":"","what":"abn 3.0.4","title":"abn 3.0.4","text":"CRAN release: 2023-11-30 2023-11-03 Matteo Delucchi Fixed format issues source code caused significant warnings GCC clang. Temporary workaround install correct versions INLA dependencies. hopefully fixed next release INLA.","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-303","dir":"Changelog","previous_headings":"","what":"abn 3.0.3","title":"abn 3.0.3","text":"CRAN release: 2023-11-03 2023-11-03 Matteo Delucchi Temporarily fixed tests CRAN Fedora flavour.","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-302","dir":"Changelog","previous_headings":"","what":"abn 3.0.2","title":"abn 3.0.2","text":"CRAN release: 2023-10-26 2023-10-23 Matteo Delucchi Temporarily fixed tests CRAN multithreading. Replaced README.md file. Fixed bug plotAbn() causing non-sensical edge labels. New CoC Licence files. Updated examples documentation.","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-301","dir":"Changelog","previous_headings":"","what":"abn 3.0.1","title":"abn 3.0.1","text":"CRAN release: 2023-10-09 2023-09-29 Matteo Delucchi Patched memory access error source code. Fixed reverse dependency mcmcabn().","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-300","dir":"Changelog","previous_headings":"","what":"abn 3.0.0","title":"abn 3.0.0","text":"CRAN release: 2023-09-06 2023-09-01 Matteo Delucchi Implemented random-intercept model method=\"mle\" argument group.var. simulateAbn(): Fixed run arguments. Enhancement: Simulates hierarchical model group.var provided. Fixed parallel computing method=\"mle\" always run smoothly. Beware, structure objects changed! Updated documentation Roxygen. Rigorous checking function arguments. Upgraded unit test testthat e3. Implemented extensive unit tests CI/CD pipelines. Many (!) bugs fixed mainly flew radar. Removed deprecated functions. Refactoring . Especially harmonise buildScoreCache() fitAbn() methods “mle” “bayes”.","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-27-0","dir":"Changelog","previous_headings":"","what":"abn 2.7-0","title":"abn 2.7-0","text":"CRAN release: 2022-04-07 2022-04-02 Reinhard Furrer plotAbn(): new arguments, now fully based class graphAM, proper handling lty, lwd etc. options fitAbn() buildScoreCache() now handled list passed argument control=. default values slightly adapted. Default list available via fit.control() build.control(), including options! Significantly improved help several functions examples. Improved display print methods. Possiblity use single threaded () loop foreach(). Due proper method handling, arguments create.graph searchHillClimber() fitAbn(method=\"bayes\") removed. Argument verbose properly implemented (including passing JAGS functions). New function compareEG() compare two essential graphs. Additional argument checking cleaning many error messages. ## Internal changes: New option trace passed “lbfgsb”. Less ARMA messages, using now #define ARMA_WARN_LEVEL 1. GSL error now caught R level. Severe R moderate C code cleaning.","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-260","dir":"Changelog","previous_headings":"","what":"abn 2.6.0","title":"abn 2.6.0","text":"2021-06-08 Gilles Kratzer, Reinhard Furrer & Kalina Cherneva Bug fixes: . initial values several chains simulateAbn() . new default value method fitAbn() . new default value method='bic' mostProbable() . minor bug fixes plotAbn() . minor bug fix help(plotAbn) . number parent specification buildScoreCache( , method='mle') Renaming many function arguments consistency Reordering, purging adding function argments Parallelization buildScoreCache(, method='mle') Cleaning RCpp improved default parameters (speed 5%) Adapting authorship package Minor cleaning Examples help files","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-250","dir":"Changelog","previous_headings":"","what":"abn 2.5.0","title":"abn 2.5.0","text":"2021-04-23 Gilles Kratzer & Reinhard Furrer Renaming many functions CamelCase consistency Renaming many arguments consistency Reordering, purging adding function argments Major changes plotAbn() Cleaning several help files","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-240","dir":"Changelog","previous_headings":"","what":"abn 2.4.0","title":"abn 2.4.0","text":"2020-10-31 Gilles Kratzer & Reinhard Furrer Update citations Update ORCID number","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-230","dir":"Changelog","previous_headings":"","what":"abn 2.3.0","title":"abn 2.3.0","text":"2020-10-22 Gilles Kratzer & Reinhard Furrer Requirement use R>=4.0.0","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-221","dir":"Changelog","previous_headings":"","what":"abn 2.2.1","title":"abn 2.2.1","text":"CRAN release: 2020-06-15 2020-06-13 Gilles Kratzer & Reinhard Furrer Patch S4 exports stated package Testing automatic (testhat.R tests repository) Updated version vignette","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-22","dir":"Changelog","previous_headings":"","what":"abn 2.2","title":"abn 2.2","text":"CRAN release: 2019-11-23 2019-11-22 Gilles Kratzer & Reinhard Furrer New vignette describing new functionalities! Old vignette store ﻿ directories inst/bootstrapping_example inst/old_vignette Dataset: FCV Methods related class abnFit: family, logLik, AIC, BIC, nobs, coef Bugs corrected plotabn() Compilation warnings corrected Typos man help files corrected Compiler flags compatible Solaris OS","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-21","dir":"Changelog","previous_headings":"","what":"abn 2.1","title":"abn 2.1","text":"CRAN release: 2019-07-04 2019-07-04 Gilles Kratzer & Reinhard Furrer Compiler flags compatible Solaris system Note related INLA","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-20","dir":"Changelog","previous_headings":"","what":"abn 2.0","title":"abn 2.0","text":"CRAN release: 2019-07-01 2019-07-01 Gilles Kratzer & Reinhard Furrer Implementation S3 methods (print, summary, plot) New classes: * abnDag, abnCache, abnHeuristic, abnMostprobable, abnHillClimber, abnFit renaming functions * link.strength() -> linkStrength() * search.heuristic() -> searchHeuristic() * backward compatibility ensured functions New tests implemented internal validation backward compatibility Dependence Cairo removed modification search.hillclimber(): interactive plotting possible buildscorecache() becomes parametrisable wrapper bayesian mle methods fitabn() becomes parametrisable wrapper bayesian mle methods Dataset: adg Multiple Bugs corrected","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-12","dir":"Changelog","previous_headings":"","what":"abn 1.2","title":"abn 1.2","text":"CRAN release: 2018-08-10 2018-07-23 Gilles Kratzer (many) new functions buildscorecache.mle() fitabn.mle() plotabn() simulateabn() expit(), logit(), odds() () mb() link.strength() discretization() essentialGraph() compareDag() infoDag() simulateDag() search.heuristic() entropyData() miData() modification existing functions: mostprobable()","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-102","dir":"Changelog","previous_headings":"","what":"abn 1.0.2","title":"abn 1.0.2","text":"CRAN release: 2016-11-09 2016-11-09 Gilles Kratzer Default ban retain matrix Automatic testing procedure package","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-10","dir":"Changelog","previous_headings":"","what":"abn 1.0","title":"abn 1.0","text":"CRAN release: 2016-01-18 2016-01-11 Pittavino Marta New vignette uploaded.","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-086","dir":"Changelog","previous_headings":"","what":"abn 0.86","title":"abn 0.86","text":"CRAN release: 2015-12-28 2015-12-22 Pittavino Marta INLA routine updated, ERROR NOTE addressed.","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-085","dir":"Changelog","previous_headings":"","what":"abn 0.85","title":"abn 0.85","text":"CRAN release: 2014-12-09 2014-12-22 Pittavino Marta Published Version v0.85 CRAN","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-085-1","dir":"Changelog","previous_headings":"","what":"abn 0.85","title":"abn 0.85","text":"CRAN release: 2014-12-09 2014-12-09 Pittavino Marta cleanup file delete additional Makevars added","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-085-2","dir":"Changelog","previous_headings":"","what":"abn 0.85","title":"abn 0.85","text":"CRAN release: 2014-12-09 2014-12-08 Pittavino Marta FOSS license –-cran NOTE addressed, eliminated BuildVignettes DESCRIPTION file","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-12-06 Pittavino Marta v0.84 submitted CRAN","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084-1","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-12-05 Pittavino Marta dependencies –-cran NOTE addressed, .Rprofile graphical issue Sweave solved","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084-2","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-12-04 Pittavino Marta finished edit vignette","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084-3","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-11-23/24 Pittavino Marta updating vignette","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084-4","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-11-03/04 Pittavino Marta issue Rd2pdf LaTeX addressed","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084-5","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-10-27 Pittavino Marta installation local version abn text work vignette","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084-6","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-10-23 Pittavino Marta confirmation change maintainer","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084-7","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-10-13 Pittavino Marta updated Rclean file .log .status check length characters manual","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084-8","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-10-06 Pittavino Marta * compressed Data resaveRdaFiles(,compress=c(“xz”)) * solved installing issue (Rclean update)","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084-9","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-10-03 Pittavino Marta alias Rclean extended eliminate old old version comment require(Cairo) line-code","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084-10","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-10-02 Reinhard Furrer Cairo NOTE fixed, moved Suggests Depends DESCRIPTION NAMESPACE update check last amendments works .gitignore create","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-084-11","dir":"Changelog","previous_headings":"","what":"abn 0.84","title":"abn 0.84","text":"2014-09-29 Pittavino Marta update version rename R function one manual","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-083","dir":"Changelog","previous_headings":"","what":"abn 0.83","title":"abn 0.83","text":"CRAN release: 2013-03-07 2014-09-26 Pittavino Marta update DESCRIPTION","code":""},{"path":"http://r-bayesian-networks.org/news/index.html","id":"abn-083-1","dir":"Changelog","previous_headings":"","what":"abn 0.83","title":"abn 0.83","text":"CRAN release: 2013-03-07 2014-09-19 Pittavino Marta update DESCRIPTION update tographviz documentation create ChangeLog file","code":""}]
