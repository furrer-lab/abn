// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// logit_cpp
Rcpp::NumericVector logit_cpp(Rcpp::NumericVector x);
RcppExport SEXP _abn_logit_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logit_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// expit_cpp
Rcpp::NumericVector expit_cpp(Rcpp::NumericVector x);
RcppExport SEXP _abn_expit_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(expit_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// irls_binomial_cpp
Rcpp::List irls_binomial_cpp(arma::mat A, arma::vec b, double maxit, double tol);
RcppExport SEXP _abn_irls_binomial_cpp(SEXP ASEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(irls_binomial_cpp(A, b, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// irls_binomial_cpp_br
Rcpp::List irls_binomial_cpp_br(arma::mat A, arma::vec b, double maxit, double tol);
RcppExport SEXP _abn_irls_binomial_cpp_br(SEXP ASEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(irls_binomial_cpp_br(A, b, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// irls_binomial_cpp_fast
Rcpp::List irls_binomial_cpp_fast(arma::mat A, arma::vec b, double maxit, double tol);
RcppExport SEXP _abn_irls_binomial_cpp_fast(SEXP ASEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(irls_binomial_cpp_fast(A, b, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// irls_binomial_cpp_fast_br
Rcpp::List irls_binomial_cpp_fast_br(arma::mat A, arma::vec b, double maxit, double tol);
RcppExport SEXP _abn_irls_binomial_cpp_fast_br(SEXP ASEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(irls_binomial_cpp_fast_br(A, b, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// irls_gaussian_cpp
Rcpp::List irls_gaussian_cpp(arma::mat A, arma::mat b, double maxit, double tol);
RcppExport SEXP _abn_irls_gaussian_cpp(SEXP ASEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(irls_gaussian_cpp(A, b, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// irls_gaussian_cpp_fast
Rcpp::List irls_gaussian_cpp_fast(arma::mat A, arma::vec b, double maxit, double tol);
RcppExport SEXP _abn_irls_gaussian_cpp_fast(SEXP ASEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(irls_gaussian_cpp_fast(A, b, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// factorial
double factorial(double n);
RcppExport SEXP _abn_factorial(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(factorial(n));
    return rcpp_result_gen;
END_RCPP
}
// irls_poisson_cpp
Rcpp::List irls_poisson_cpp(arma::mat A, arma::vec b, double maxit, double tol);
RcppExport SEXP _abn_irls_poisson_cpp(SEXP ASEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(irls_poisson_cpp(A, b, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// factorial_fast
double factorial_fast(double n);
RcppExport SEXP _abn_factorial_fast(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(factorial_fast(n));
    return rcpp_result_gen;
END_RCPP
}
// irls_poisson_cpp_fast
Rcpp::List irls_poisson_cpp_fast(arma::mat A, arma::vec b, double maxit, double tol);
RcppExport SEXP _abn_irls_poisson_cpp_fast(SEXP ASEXP, SEXP bSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(irls_poisson_cpp_fast(A, b, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// mi_cpp
double mi_cpp(arma::mat joint_dist);
RcppExport SEXP _abn_mi_cpp(SEXP joint_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type joint_dist(joint_distSEXP);
    rcpp_result_gen = Rcpp::wrap(mi_cpp(joint_dist));
    return rcpp_result_gen;
END_RCPP
}
// rank_cpp
int rank_cpp(arma::mat A);
RcppExport SEXP _abn_rank_cpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(rank_cpp(A));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP buildcachematrix(SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP checkforcycles(SEXP, SEXP);
RcppExport SEXP fit_single_node(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP fitabn_marginals(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP mostprobable_C(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP searchhill(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_abn_logit_cpp", (DL_FUNC) &_abn_logit_cpp, 1},
    {"_abn_expit_cpp", (DL_FUNC) &_abn_expit_cpp, 1},
    {"_abn_irls_binomial_cpp", (DL_FUNC) &_abn_irls_binomial_cpp, 4},
    {"_abn_irls_binomial_cpp_br", (DL_FUNC) &_abn_irls_binomial_cpp_br, 4},
    {"_abn_irls_binomial_cpp_fast", (DL_FUNC) &_abn_irls_binomial_cpp_fast, 4},
    {"_abn_irls_binomial_cpp_fast_br", (DL_FUNC) &_abn_irls_binomial_cpp_fast_br, 4},
    {"_abn_irls_gaussian_cpp", (DL_FUNC) &_abn_irls_gaussian_cpp, 4},
    {"_abn_irls_gaussian_cpp_fast", (DL_FUNC) &_abn_irls_gaussian_cpp_fast, 4},
    {"_abn_factorial", (DL_FUNC) &_abn_factorial, 1},
    {"_abn_irls_poisson_cpp", (DL_FUNC) &_abn_irls_poisson_cpp, 4},
    {"_abn_factorial_fast", (DL_FUNC) &_abn_factorial_fast, 1},
    {"_abn_irls_poisson_cpp_fast", (DL_FUNC) &_abn_irls_poisson_cpp_fast, 4},
    {"_abn_mi_cpp", (DL_FUNC) &_abn_mi_cpp, 1},
    {"_abn_rank_cpp", (DL_FUNC) &_abn_rank_cpp, 1},
    {"buildcachematrix", (DL_FUNC) &buildcachematrix,  5},
    {"checkforcycles",   (DL_FUNC) &checkforcycles,    2},
    {"fit_single_node",  (DL_FUNC) &fit_single_node,  27},
    {"fitabn_marginals", (DL_FUNC) &fitabn_marginals, 30},
    {"mostprobable_C",   (DL_FUNC) &mostprobable_C,    6},
    {"searchhill",       (DL_FUNC) &searchhill,       13},
    {NULL, NULL, 0}
};

RcppExport void R_init_abn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
